<!DOCTYPE html>
<html lang="pt-BR" class="">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Calendário Interativo com Ações</title>
    
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
      tailwind.config = { darkMode: 'class' }
    </script>
    <script src="https://unpkg.com/lucide@latest"></script>

    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        body { -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; font-family: 'Inter', sans-serif; user-select: none; }
        .transition-all-ease { transition: all 0.3s ease-in-out; }
        .active-btn { transform: scale(0.95); }
        input[type='number']::-webkit-inner-spin-button, input[type='number']::-webkit-outer-spin-button { -webkit-appearance: none; margin: 0; }
        input[type='number'] { -moz-appearance: textfield; }
        .form-input { @apply w-full px-3 py-2 text-gray-700 bg-gray-50 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-200 dark:focus:ring-blue-500; }
        .form-label { @apply block text-sm font-medium text-gray-600 dark:text-gray-300 mb-1; }
        .error-message { @apply text-red-500 text-xs mt-1; }
        
        /* Estilos para a área de texto com auto-resize */
        .autoresize-textarea {
            min-height: 8rem; /* Altura inicial maior (128px) */
            resize: vertical;   /* Permite redimensionamento vertical pelo usuário */
            overflow-y: hidden; /* Oculta a barra de rolagem até ser necessária */
        }

        /* Estilos para a notificação (toast) */
        #toast-notification {
            transition: opacity 0.3s, transform 0.3s;
        }

        .timeline-item-enter {
            opacity: 0;
            transform: translateY(-10px);
        }

        .timeline-item-enter-active {
            opacity: 1;
            transform: translateY(0);
            transition: opacity 0.3s, transform 0.3s;
        }
    </style>
</head>
<body class="bg-gray-50 dark:bg-gray-900 transition-colors duration-300">
    
    <!-- Ecrã de Mapeamento Inicial -->
    <div id="initial-mapping-screen" class="p-4 md:p-6 max-w-2xl mx-auto">
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">
            <h2 class="text-2xl font-semibold text-gray-800 dark:text-white mb-4">Filtros Iniciais</h2>
            <p class="text-gray-600 dark:text-gray-400 mb-6">Por favor, selecione os filtros para visualizar o calendário.</p>

            <!-- Indicador de Carregamento -->
            <div id="loading-indicator" class="flex justify-center items-center py-8">
                <svg class="animate-spin -ml-1 mr-3 h-8 w-8 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                <span class="text-lg font-medium text-gray-700 dark:text-gray-300">A carregar dados...</span>
            </div>
            
            <!-- Formulário de Filtros -->
            <div id="mapping-form" class="hidden space-y-4">
                <div>
                    <label for="categoria-select" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Categoria*</label>
                    <div class="relative">
                        <select id="categoria-select" class="w-full pl-4 pr-10 py-3 text-base text-gray-800 dark:text-gray-200 bg-white dark:bg-gray-700/50 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:focus:ring-offset-gray-800 transition-all-ease" style="appearance: none; -webkit-appearance: none; -moz-appearance: none;" required>
                            <option value="">Selecione uma Categoria</option>
                        </select>
                        <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-3 text-gray-500 dark:text-gray-400">
                            <i data-lucide="chevron-down" class="h-5 w-5"></i>
                        </div>
                    </div>
                </div>
                <div>
                    <label for="responsavel-select" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Responsável*</label>
                    <div class="relative">
                        <select id="responsavel-select" class="w-full pl-4 pr-10 py-3 text-base text-gray-800 dark:text-gray-200 bg-white dark:bg-gray-700/50 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:focus:ring-offset-gray-800 transition-all-ease" style="appearance: none; -webkit-appearance: none; -moz-appearance: none;" required>
                                <option value="">Selecione um Responsável</option>
                        </select>
                        <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-3 text-gray-500 dark:text-gray-400">
                            <i data-lucide="chevron-down" class="h-5 w-5"></i>
                        </div>
                    </div>
                </div>
                <div>
                    <label for="servico-select" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Serviço</label>
                     <div class="relative">
                        <select id="servico-select" class="w-full pl-4 pr-10 py-3 text-base text-gray-800 dark:text-gray-200 bg-white dark:bg-gray-700/50 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:focus:ring-offset-gray-800 transition-all-ease" style="appearance: none; -webkit-appearance: none; -moz-appearance: none;">
                            <option value="">Todos os Serviços</option>
                        </select>
                        <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-3 text-gray-500 dark:text-gray-400">
                            <i data-lucide="chevron-down" class="h-5 w-5"></i>
                        </div>
                    </div>
                </div>
                <div class="pt-4">
                    <button id="show-timeline-btn" class="w-full flex justify-center items-center bg-blue-600 text-white font-semibold text-base py-3 px-4 rounded-lg hover:bg-blue-700 transition-all-ease active-btn focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:focus:ring-offset-gray-900 disabled:bg-blue-400 disabled:cursor-not-allowed">
                        <span class="mr-2">Ver Registros</span>
                        <i data-lucide="arrow-right" class="h-5 w-5"></i>
                    </button>
                    <p id="initial-filters-error" class="text-center text-red-500 text-sm mt-2 hidden">Por favor, selecione Categoria e Responsável.</p>
                </div>
            </div>
        </div>
    </div>

    <div id="timeline-container" class="p-4 md:p-6 max-w-2xl mx-auto hidden">
        <div class="mb-4 flex justify-between items-center">
            <button id="timeline-change-filters-btn" class="text-sm text-blue-600 dark:text-blue-400 hover:underline whitespace-nowrap">Alterar Filtros</button>
            <button id="view-calendar-btn" class="text-sm text-blue-600 dark:text-blue-400 hover:underline whitespace-nowrap">Ver Calendário / Registrar para outra data</button>
        </div>
        <div id="timeline-list" class="space-y-4"></div>
    </div>


    <div id="calendar-container" class="p-4 md:p-6 max-w-2xl mx-auto hidden">
        <!-- Secção de Filtros Ativos -->
        <div id="active-filters-container" class="mb-4 bg-white dark:bg-gray-800 rounded-lg shadow-lg p-4 hidden">
            <div class="flex flex-wrap justify-between items-center gap-4">
                 <div id="filter-tags" class="flex flex-wrap gap-2 items-center">
                    <!-- Tags de filtro serão inseridas aqui -->
                </div>
                <div class="flex gap-4">
                    <button id="show-timeline-view-btn" class="text-sm text-blue-600 dark:text-blue-400 hover:underline whitespace-nowrap">Ver Registros</button>
                    <button id="change-filters-btn" class="text-sm text-blue-600 dark:text-blue-400 hover:underline whitespace-nowrap">Alterar Filtros</button>
                </div>
            </div>
       </div>

        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-4 transition-colors duration-300 relative">
             <!-- Overlay de Carregamento para o Calendário -->
            <div id="calendar-loading-overlay" class="absolute inset-0 bg-white/50 dark:bg-gray-800/50 z-10 flex justify-center items-center rounded-lg hidden">
                <svg class="animate-spin h-8 w-8 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
            </div>
            <!-- Cabeçalho do Calendário -->
            <div id="calendar-header" class="flex items-center justify-between mb-4">
                <h2 id="month-year-title" class="text-xl md:text-2xl font-semibold text-gray-800 dark:text-white cursor-pointer hover:text-blue-600 dark:hover:text-blue-400">Junho 2025</h2>
                <div class="flex items-center space-x-2">
                    <button id="today-btn" class="px-3 py-1 text-sm font-medium rounded-md active-btn transition-all-ease">Hoje</button>
                    <button id="prev-month-btn" class="p-2 rounded-full active-btn transition-all-ease"><i data-lucide="chevron-left" class="h-5 w-5"></i></button>
                    <button id="next-month-btn" class="p-2 rounded-full active-btn transition-all-ease"><i data-lucide="chevron-right" class="h-5 w-5"></i></button>
                    <button id="theme-toggle-btn" class="p-2 rounded-full active-btn transition-all-ease"><i id="theme-icon" data-lucide="sun" class="h-5 w-5"></i></button>
                </div>
            </div>

            <!-- Grelhas do Calendário -->
            <div id="days-of-week" class="grid grid-cols-7 gap-1 text-center text-xs font-medium text-gray-500 dark:text-gray-400 mb-2">
                <div>Dom</div> <div>Seg</div> <div>Ter</div> <div>Qua</div> <div>Qui</div> <div>Sex</div> <div>Sáb</div>
            </div>
            <div id="calendar-grid" class="grid grid-cols-7 gap-1"></div>
            <div id="month-view" class="grid grid-cols-3 gap-2 hidden"></div>
            <div id="year-view" class="hidden items-center justify-center">
                 <div class="flex items-center justify-center space-x-2">
                    <button id="prev-year-chunk-btn" class="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700 transition-all-ease active-btn"><i data-lucide="chevron-left" class="h-5 w-5 text-gray-600 dark:text-gray-400"></i></button>
                    <div id="year-grid" class="grid grid-cols-4 gap-2"></div>
                    <button id="next-year-chunk-btn" class="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700 transition-all-ease active-btn"><i data-lucide="chevron-right" class="h-5 w-5 text-gray-600 dark:text-gray-400"></i></button>
                </div>
            </div>
            <!-- Legenda -->
            <div id="calendar-legend" class="mt-4 pt-4 border-t border-gray-200 dark:border-gray-700 flex flex-wrap gap-x-4 gap-y-2">
                <!-- A legenda será inserida aqui via JS -->
            </div>
        </div>
    </div>
    
    <!-- Modal de Ações -->
    <div id="actions-modal" class="fixed inset-0 bg-gray-900/50 flex items-center justify-center p-4 hidden opacity-0 transition-all-ease">
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-md p-6 scale-95 transition-all-ease">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Ações para o Período</h3>
            <div class="space-y-4">
                <div id="imbativel-section" class="flex items-center p-3 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700/50">
                    <input id="imbativel-checkbox" type="checkbox" class="h-4 w-4 rounded text-orange-500 border-gray-300 focus:ring-orange-500">
                    <label for="imbativel-checkbox" class="ml-3 text-sm font-medium">Marcar como Dia Imbatível</label>
                    <i data-lucide="star" class="h-4 w-4 ml-auto text-orange-400"></i>
                </div>
                <div class="border-t border-gray-200 dark:border-gray-700 pt-4">
                    <div class="p-3 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700/50"><input id="sem-ocorrencia-radio" name="ocorrencia_tipo" type="radio" value="sem_ocorrencia" class="h-4 w-4 text-green-600 focus:ring-green-500"><label for="sem-ocorrencia-radio" class="ml-3 text-sm font-medium">Marcar como Sem Ocorrência</label></div>
                    <div id="rca-option-container" class="p-3 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700/50"><input id="rca-radio" name="ocorrencia_tipo" type="radio" value="rca" class="h-4 w-4 text-red-600 focus:ring-red-500"><label for="rca-radio" class="ml-3 text-sm font-medium">Registar RCA</label></div>
                </div>
            </div>
            <div class="mt-6 flex justify-end space-x-3">
                <button id="cancel-modal-btn" class="px-4 py-2 text-sm font-medium rounded-md shadow-sm border">Cancelar</button>
                <button id="apply-modal-btn" class="flex justify-center items-center px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:bg-blue-400 disabled:cursor-not-allowed">Aplicar</button>
            </div>
        </div>
    </div>

    <!-- Modal do Assistente RCA -->
    <div id="rca-wizard-modal" data-start-date="" data-end-date="" class="fixed inset-0 bg-gray-900/50 flex items-center justify-center p-4 hidden opacity-0 transition-all-ease">
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-2xl scale-95 transition-all-ease">
            <div class="p-6 border-b">
                <h3 class="text-lg font-semibold">Registo de RCA (Análise de Causa Raiz)</h3>
                <p class="text-sm text-gray-500" id="rca-step-indicator">Passo <span id="rca-current-step">1</span> de 2</p>
            </div>
            
            <div id="rca-error-summary" class="p-4 bg-red-50 border-l-4 border-red-400 hidden mx-6 rounded"></div>

            <form id="rca-form" class="p-6 space-y-4 max-h-[60vh] overflow-y-auto">
                <!-- Etapa 1 (antiga Etapa 2): Período e Impacto -->
                <div id="rca-step-1" class="rca-step">
                    <h4 class="font-semibold mb-4">Etapa 1: Período e Impacto</h4>
                     <div class="grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-4">
                        <div>
                            <label for="rca-inicio-time" class="block text-sm font-medium text-gray-600 dark:text-gray-300 mb-1">Hora de Início*</label>
                            <div class="flex items-center space-x-2 p-2 bg-gray-100 dark:bg-gray-700/50 rounded-md">
                                <span id="rca-inicio-date" class="font-medium text-gray-600 dark:text-gray-300 whitespace-nowrap"></span>
                                <input type="time" id="rca-inicio-time" class="form-input" required>
                            </div>
                            <p class="error-message hidden">Hora de início é obrigatória.</p>
                        </div>
                        <div>
                            <label for="rca-fim-time" class="block text-sm font-medium text-gray-600 dark:text-gray-300 mb-1">Hora de Fim*</label>
                            <div class="flex items-center space-x-2 p-2 bg-gray-100 dark:bg-gray-700/50 rounded-md">
                                <span id="rca-fim-date" class="font-medium text-gray-600 dark:text-gray-300 whitespace-nowrap"></span>
                                <input type="time" id="rca-fim-time" class="form-input" required>
                            </div>
                            <p class="error-message hidden">Hora de fim é obrigatória.</p>
                        </div>
                        <div>
                            <label for="rca-problema-num" class="form-label">Nº do Problema</label>
                            <input type="text" id="rca-problema-num" placeholder="PRB0123456" class="form-input">
                            <p class="error-message hidden">Formato inválido. Use PRB0123456.</p>
                        </div>
                         <div>
                            <label for="rca-incidente-num" class="form-label">Nº do Incidente</label>
                            <input type="text" id="rca-incidente-num" placeholder="INC0123456" class="form-input">
                            <p class="error-message hidden">Formato inválido. Use INC0123456.</p>
                        </div>
                        <div>
                            <label for="rca-impacto" class="form-label">Impacto (%)*</label>
                            <input type="number" id="rca-impacto" step="0.1" class="form-input" required>
                            <p class="error-message hidden">Valor deve estar entre 0 e 100.</p>
                        </div>
                        <div>
                            <label for="rca-racional" class="form-label">Racional do Impacto*</label>
                            <select id="rca-racional" class="form-input" required>
                                <!-- As opções serão preenchidas dinamicamente -->
                            </select>
                             <p class="error-message hidden">Campo obrigatório.</p>
                        </div>
                    </div>
                    <div class="mt-4 border-t pt-4">
                        <label class="flex items-center cursor-pointer">
                            <input type="checkbox" id="rca-critico-toggle" class="sr-only peer">
                            <div class="relative w-11 h-6 bg-gray-200 rounded-full peer peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-red-600"></div>
                            <span class="ms-3 text-sm font-medium">Evento Crítico?</span>
                        </label>
                    </div>
                    <div id="rca-servico-critico-section" class="mt-4 hidden">
                        <label for="rca-servico-critico" class="form-label">Serviço Crítico Afetado*</label>
                        <select id="rca-servico-critico" class="form-input">
                            <option value="">Selecione um serviço...</option>
                        </select>
                        <p class="error-message hidden">Campo obrigatório.</p>
                    </div>
                </div>
                <!-- Etapa 2 (antiga Etapa 3): Análise -->
                <div id="rca-step-2" class="rca-step hidden">
                    <h4 class="font-semibold mb-4">Etapa 2: Análise e Descrições</h4>
                     <div class="space-y-4">
                        <div>
                            <label for="rca-problema-desc" class="form-label">Qual foi o problema observado?*</label>
                            <textarea id="rca-problema-desc" class="form-input autoresize-textarea" required data-autoresize placeholder="Descreva o problema observado aqui..."></textarea>
                            <p class="error-message hidden">Campo obrigatório.</p>
                        </div>
                        <div>
                            <label for="rca-causa" class="form-label">Qual foi a causa raiz identificada?*</label>
                            <textarea id="rca-causa" class="form-input autoresize-textarea" required data-autoresize placeholder="Descreva a causa raiz aqui..."></textarea>
                             <p class="error-message hidden">Campo obrigatório.</p>
                        </div>
                        <div>
                            <label for="rca-resolucao" class="form-label">Qual foi a ação de contorno/resolução realizada?*</label>
                            <textarea id="rca-resolucao" class="form-input autoresize-textarea" required data-autoresize placeholder="Descreva a ação de contorno ou resolução realizada aqui..."></textarea>
                             <p class="error-message hidden">Campo obrigatório.</p>
                        </div>
                    </div>
                </div>
            </form>

            <div class="p-6 border-t flex justify-between items-center">
                <button id="rca-cancel-btn" class="px-4 py-2 text-sm font-medium rounded-md shadow-sm border">Cancelar</button>
                <div class="space-x-3">
                    <button id="rca-prev-btn" class="px-4 py-2 text-sm font-medium rounded-md shadow-sm border">Anterior</button>
                    <button id="rca-next-btn" class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md shadow-sm">Próximo</button>
                    <button id="rca-save-btn" class="flex justify-center items-center px-4 py-2 text-sm font-medium text-white bg-green-600 rounded-md shadow-sm hidden disabled:bg-green-400 disabled:cursor-not-allowed">Salvar RCA</button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Toast Notification -->
    <div id="toast-notification" class="fixed top-5 right-5 w-full max-w-xs p-4 rounded-lg shadow-lg text-white opacity-0 transform translate-y-2 transition-all-ease" style="z-index: 100;">
        <div class="flex items-center">
            <div id="toast-icon" class="mr-3"></div>
            <p id="toast-message" class="text-sm font-medium"></p>
        </div>
    </div>


    <script>
        document.addEventListener('DOMContentLoaded', () => {
            'use strict';

            // --- CONSTANTES ---
            const API_ENDPOINTS = {
                initialData: 'https://prod-96.westus.logic.azure.com:443/workflows/0fa3bd3693404e0784ac54c5384ffce6/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=RZJjoPihCDjQogYqzHJLRBoQeOxGprDNjyWZxR8DJZM',
                monthData: 'https://prod-13.westus.logic.azure.com:443/workflows/99be8b0c613047a498ac7f9b2bcfe2ca/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=DOoibAcjA_KJM0_kv2pkiM33ajFy7HsvJG2Ih8zNdGs',
                save: 'https://prod-126.westus.logic.azure.com:443/workflows/1457a62308f64bbabb597499c9bb4618/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=Kg5fzqa7buSQaV0TxVsvfeUbq-ICMobfxiQFRzbf1Wk',
                servicosCriticos: 'https://prod-119.westus.logic.azure.com:443/workflows/d2e495e96af548acaa70318d74c07596/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=n4FxWDTe1al2x_30knYpYLxxjT1YmzqRUmEyoHF6oJ4'
            };
            const MONTH_NAMES = ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"];
            const STATUS_CODES = { RCA: 867770000, SEM_OCORRENCIA: 867770001 };
            const MARKER_TYPES = {
                rca: { label: 'RCA Registado', color: 'bg-red-500', icon: null },
                sem_ocorrencia: { label: 'Sem Ocorrência', color: 'bg-green-500', icon: null },
                imbativel: { label: 'Dia Imbatível', color: 'text-orange-500', icon: 'star' }
            };

            // --- ELEMENTOS DO DOM ---
            const dom = {
                calendarGrid: document.getElementById('calendar-grid'),
                monthYearTitle: document.getElementById('month-year-title'),
                prevMonthBtn: document.getElementById('prev-month-btn'),
                nextMonthBtn: document.getElementById('next-month-btn'),
                todayBtn: document.getElementById('today-btn'),
                themeToggleBtn: document.getElementById('theme-toggle-btn'),
                themeIcon: document.getElementById('theme-icon'),
                daysOfWeekContainer: document.getElementById('days-of-week'),
                monthView: document.getElementById('month-view'),
                yearView: document.getElementById('year-view'),
                yearGrid: document.getElementById('year-grid'),
                prevYearChunkBtn: document.getElementById('prev-year-chunk-btn'),
                nextYearChunkBtn: document.getElementById('next-year-chunk-btn'),
                calendarLegend: document.getElementById('calendar-legend'),
                initialMappingScreen: document.getElementById('initial-mapping-screen'),
                calendarContainer: document.getElementById('calendar-container'),
                timelineContainer: document.getElementById('timeline-container'),
                showTimelineBtn: document.getElementById('show-timeline-btn'),
                timelineChangeFiltersBtn: document.getElementById('timeline-change-filters-btn'),
                viewCalendarBtn: document.getElementById('view-calendar-btn'),
                timelineList: document.getElementById('timeline-list'),
                showTimelineViewBtn: document.getElementById('show-timeline-view-btn'),
                categoriaSelect: document.getElementById('categoria-select'),
                responsavelSelect: document.getElementById('responsavel-select'),
                servicoSelect: document.getElementById('servico-select'),
                loadingIndicator: document.getElementById('loading-indicator'),
                mappingForm: document.getElementById('mapping-form'),
                activeFiltersContainer: document.getElementById('active-filters-container'),
                filterTags: document.getElementById('filter-tags'),
                changeFiltersBtn: document.getElementById('change-filters-btn'),
                initialFiltersError: document.getElementById('initial-filters-error'),
                calendarLoadingOverlay: document.getElementById('calendar-loading-overlay'),
                actionsModal: {
                    modal: document.getElementById('actions-modal'),
                    cancelBtn: document.getElementById('cancel-modal-btn'),
                    applyBtn: document.getElementById('apply-modal-btn'),
                    imbativelSection: document.getElementById('imbativel-section'),
                    imbativelCheckbox: document.getElementById('imbativel-checkbox'),
                    semOcorrenciaRadio: document.getElementById('sem-ocorrencia-radio'),
                    rcaRadio: document.getElementById('rca-radio'),
                    rcaOptionContainer: document.getElementById('rca-option-container'),
                },
                rcaWizard: {
                    modal: document.getElementById('rca-wizard-modal'),
                    form: document.getElementById('rca-form'),
                    errorSummary: document.getElementById('rca-error-summary'),
                    stepIndicator: document.getElementById('rca-step-indicator'),
                    prevBtn: document.getElementById('rca-prev-btn'),
                    nextBtn: document.getElementById('rca-next-btn'),
                    saveBtn: document.getElementById('rca-save-btn'),
                    cancelBtn: document.getElementById('rca-cancel-btn'),
                    criticoToggle: document.getElementById('rca-critico-toggle'),
                    servicoCriticoSection: document.getElementById('rca-servico-critico-section'),
                    servicoCriticoSelect: document.getElementById('rca-servico-critico'),
                    impactoInput: document.getElementById('rca-impacto'),
                    racionalSelect: document.getElementById('rca-racional'),
                },
                toast: {
                    notification: document.getElementById('toast-notification'),
                    message: document.getElementById('toast-message'),
                    icon: document.getElementById('toast-icon'),
                }
            };

            // --- ESTADO DA APLICAÇÃO ---
            let state = {
                currentDate: new Date(),
                currentView: 'timeline', // 'timeline', 'days', 'months', 'years'
                selectionStartDate: null,
                selectionEndDate: null,
                isDragging: false,
                rcaCurrentStep: 1,
                yearViewStart: null,
                initialData: [],
                currentUserName: 'Utilizador Desconhecido',
                dailyMarkers: {}, // Ex: { "2025-06-20": ["rca", "imbativel"] }
                rcaDataStore: {},
                dailyData: {},
            };

            // --- FUNÇÕES DE RENDERIZAÇÃO E UI ---

            /**
             * Renderiza a legenda do calendário com base nos tipos de marcadores definidos.
             */
            const renderLegend = () => {
                dom.calendarLegend.innerHTML = '';
                Object.entries(MARKER_TYPES).forEach(([key, { label, color, icon }]) => {
                    const legendItem = document.createElement('div');
                    legendItem.className = 'flex items-center text-xs text-gray-600 dark:text-gray-400';
                    
                    const visual = document.createElement('div');
                    if (icon) {
                        visual.innerHTML = `<i data-lucide="${icon}" class="h-3.5 w-3.5 mr-1.5 ${color}"></i>`;
                    } else {
                        visual.className = `h-3 w-3 rounded-full mr-1.5 ${color}`;
                    }
                    
                    legendItem.appendChild(visual);
                    legendItem.append(label);
                    dom.calendarLegend.appendChild(legendItem);
                });
                lucide.createIcons();
            };

            /**
             * Mostra os elementos da UI especificados e esconde os outros.
             * @param {...HTMLElement} elementsToShow - Elementos a serem mostrados.
             */
            const showView = (...elementsToShow) => {
                [dom.calendarGrid, dom.daysOfWeekContainer, dom.monthView, dom.yearView].forEach(el => el.classList.add('hidden'));
                elementsToShow.forEach(el => el.classList.remove('hidden'));
            };

            /**
             * Atualiza o título do calendário com base na vista atual.
             */
            const updateTitle = () => {
                if (state.currentView === 'days') {
                    dom.monthYearTitle.textContent = `${MONTH_NAMES[state.currentDate.getMonth()]} ${state.currentDate.getFullYear()}`;
                } else if (state.currentView === 'months') {
                    dom.monthYearTitle.textContent = `${state.currentDate.getFullYear()}`;
                } else { // years
                    dom.monthYearTitle.textContent = `${state.yearViewStart} - ${state.yearViewStart + 11}`;
                }
            };

            /**
             * Renderiza a vista de seleção de meses.
             */
            const renderMonthView = () => {
                dom.monthView.innerHTML = '';
                MONTH_NAMES.forEach((name, index) => {
                    const monthCell = document.createElement('div');
                    monthCell.textContent = name;
                    monthCell.className = 'flex items-center justify-center h-16 rounded-lg cursor-pointer text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 transition-all-ease';
                    if (index === state.currentDate.getMonth()) {
                        monthCell.classList.add('bg-blue-500', 'text-white', 'font-semibold');
                    }
                    monthCell.addEventListener('click', () => {
                        state.currentDate.setMonth(index);
                        state.currentView = 'days';
                        fetchAndDisplayMonthData();
                    });
                    dom.monthView.appendChild(monthCell);
                });
            };

            /**
             * Renderiza a vista de seleção de anos.
             */
            const renderYearView = () => {
                if (!state.yearViewStart) state.yearViewStart = state.currentDate.getFullYear() - 5;
                dom.yearGrid.innerHTML = '';
                for (let i = 0; i < 12; i++) {
                    const year = state.yearViewStart + i;
                    const yearCell = document.createElement('div');
                    yearCell.textContent = year;
                    yearCell.className = 'flex items-center justify-center h-16 rounded-lg cursor-pointer text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 transition-all-ease';
                    if (year === state.currentDate.getFullYear()) {
                        yearCell.classList.add('bg-blue-500', 'text-white', 'font-semibold');
                    }
                    yearCell.addEventListener('click', () => {
                        state.currentDate.setFullYear(year);
                        state.currentView = 'months';
                        renderCalendar();
                    });
                    dom.yearGrid.appendChild(yearCell);
                }
            };
            
            /**
             * Renderiza a grelha de dias do mês atual.
             */
            const renderDayGrid = () => {
                dom.calendarGrid.innerHTML = '';
                const year = state.currentDate.getFullYear();
                const month = state.currentDate.getMonth();
                const firstDayOfMonth = new Date(year, month, 1);
                const firstDayOfWeek = firstDayOfMonth.getDay();
                const startDate = new Date(firstDayOfMonth);
                startDate.setDate(startDate.getDate() - firstDayOfWeek);

                for (let i = 0; i < 42; i++) {
                    const day = new Date(startDate);
                    day.setDate(day.getDate() + i);

                    const cell = document.createElement('div');
                    cell.dataset.date = toISODateString(day);

                    const dayNumber = document.createElement('span');
                    dayNumber.textContent = day.getDate();
                    cell.appendChild(dayNumber);

                    const markersContainer = document.createElement('div');
                    markersContainer.className = 'absolute bottom-1 left-1/2 -translate-x-1/2 flex items-center justify-center space-x-1';
                    cell.appendChild(markersContainer);

                    applyDayStyles(cell, day);
                    dom.calendarGrid.appendChild(cell);
                }
                lucide.createIcons();
            };

            /**
             * Aplica os estilos a uma célula de dia (cor, marcadores, seleção, etc.).
             * @param {HTMLElement} cell - O elemento da célula.
             * @param {Date} day - O objeto Date para a célula.
             */
            const applyDayStyles = (cell, day) => {
                const dayString = cell.dataset.date;
                const isToday = isSameDay(day, new Date());
                const isCurrentMonth = day.getMonth() === state.currentDate.getMonth();
                const isSelected = isDayInRange(day, state.selectionStartDate, state.selectionEndDate);
                
                cell.className = 'relative flex items-center justify-center h-12 w-12 text-sm rounded-lg cursor-pointer transition-all-ease';

                if (isCurrentMonth) {
                    cell.classList.add('text-gray-700', 'dark:text-gray-200', 'hover:bg-gray-100', 'dark:hover:bg-gray-700');
                } else {
                    cell.classList.add('text-gray-300', 'dark:text-gray-600');
                }

                if (isSelected) {
                    cell.classList.add('bg-blue-100', 'dark:bg-blue-900/50', 'border', 'border-blue-300');
                    cell.classList.remove('hover:bg-gray-100', 'dark:hover:bg-gray-700');
                }

                if (isToday) {
                    cell.querySelector('span').classList.add('h-7', 'w-7', 'flex', 'items-center', 'justify-center', 'font-bold', 'bg-blue-500', 'text-white', 'rounded-full');
                }

                const markersContainer = cell.querySelector('div:last-child');
                markersContainer.innerHTML = '';
                const markers = state.dailyMarkers[dayString] || [];
                markers.forEach(key => {
                    const info = MARKER_TYPES[key];
                    if (!info) return;
                    if (info.icon) {
                        const icon = document.createElement('i');
                        icon.setAttribute('data-lucide', info.icon);
                        icon.className = `h-3.5 w-3.5 ${info.color}`;
                        markersContainer.appendChild(icon);
                    } else {
                        const dot = document.createElement('div');
                        dot.className = `h-1.5 w-1.5 rounded-full ${info.color}`;
                        markersContainer.appendChild(dot);
                    }
                });
            };

            /**
             * Renderiza a vista do calendário principal com base no estado atual (dias, meses, anos).
             */
            const renderCalendar = () => {
                updateThemeIcon();
                switch (state.currentView) {
                    case 'days':
                        showView(dom.calendarGrid, dom.daysOfWeekContainer);
                        renderDayGrid();
                        break;
                    case 'months':
                        showView(dom.monthView);
                        renderMonthView();
                        break;
                    case 'years':
                        showView(dom.yearView);
                        renderYearView();
                        break;
                }
                updateTitle();
                lucide.createIcons();
            };

            /**
             * Re-aplica estilos a todas as células do dia, útil após a seleção mudar.
             */
            const updateSelectionStyles = () => {
                dom.calendarGrid.querySelectorAll('[data-date]').forEach(cell => {
                    const cellDate = new Date(cell.dataset.date + 'T00:00:00'); // Garante que a data é tratada como local
                    applyDayStyles(cell, cellDate);
                });
                lucide.createIcons();
            };

            const renderTimelineView = () => {
                dom.timelineList.innerHTML = '';
                const dates = Object.keys(state.dailyData).sort((a, b) => new Date(b) - new Date(a));
                if (dates.length === 0) {
                    dom.timelineList.innerHTML = '<p class="text-center text-gray-500 dark:text-gray-400">Nenhum registro encontrado para os últimos 7 dias.</p>';
                    return;
                }
                dates.forEach(date => {
                    const item = document.createElement('div');
                    item.className = 'bg-white dark:bg-gray-800 rounded-lg shadow p-4 flex justify-between items-center timeline-item-enter';
                    const dateObj = new Date(date + 'T00:00:00');
                    const formattedDate = dateObj.toLocaleDateString('pt-BR', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });

                    const label = document.createElement('span');
                    label.textContent = formattedDate;
                    label.className = 'font-medium text-gray-800 dark:text-gray-200';
                    
                    const actions = document.createElement('div');
                    actions.className = 'space-x-2';
                    
                    const rcaBtn = document.createElement('button');
                    rcaBtn.dataset.date = date;
                    rcaBtn.className = 'quick-rca text-sm text-blue-600 hover:underline disabled:text-gray-400 disabled:cursor-not-allowed';
                    rcaBtn.textContent = 'Registrar RCA';
                    rcaBtn.disabled = !dom.servicoSelect.value;
                    rcaBtn.title = dom.servicoSelect.value ? '' : 'Selecione um serviço específico para registrar RCA.';


                    const semBtn = document.createElement('button');
                    semBtn.dataset.date = date;
                    semBtn.className = 'quick-sem text-sm text-green-600 hover:underline';
                    semBtn.textContent = 'Sem Ocorrência';
                    
                    actions.appendChild(rcaBtn);
                    actions.appendChild(semBtn);

                    item.appendChild(label);
                    item.appendChild(actions);
                    dom.timelineList.appendChild(item);
                    requestAnimationFrame(() => item.classList.add('timeline-item-enter-active'));
                });
                lucide.createIcons();
            };

            const handleQuickMark = async (date) => {
                const categoria = dom.categoriaSelect.value;
                const responsavel = dom.responsavelSelect.value;
                const selectedServico = dom.servicoSelect.value;

                const servicesToProcess = selectedServico ? [selectedServico] : [...new Set(state.initialData.filter(item => item.cr9ff_categoria === categoria && item.cr9ff_responsavel === responsavel).map(item => item.cr9ff_servico).filter(Boolean))];
                if (servicesToProcess.length === 0) servicesToProcess.push(null);

                let payloadParaEnviar = [];
                for (const servico of servicesToProcess) {
                    const registro = {
                        chave: `${categoria}#${servico || 'N/A'}#${responsavel}#${date}`,
                        componente: servico,
                        status: STATUS_CODES.SEM_OCORRENCIA,
                        imbativel: 0,
                        area: categoria,
                        inicio: null, fim: null, problemaNum: null, incidenteNum: null,
                        impacto: null, racional: null, critico: false, servicoCritico: null,
                        problemaDesc: null, causa: null, resolucao: null,
                        registradoPor: state.currentUserName
                    };
                    payloadParaEnviar.push(registro);
                }

                try {
                    const response = await fetch(API_ENDPOINTS.save, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payloadParaEnviar) });
                    if (!response.ok) throw new Error('API save failed');
                    showToast('Registro "Sem Ocorrência" gravado!');
                    const semBtn = dom.timelineList.querySelector(`.quick-sem[data-date="${date}"]`);
                    if (semBtn) {
                        const parent = semBtn.parentElement;
                        parent.innerHTML = `<span class="text-green-500 flex items-center text-sm"><i data-lucide="check-circle" class="h-4 w-4 mr-1"></i>Registrado</span>`;
                        lucide.createIcons();
                    }
                } catch (e) {
                    showToast('Falha ao registrar.', 'error');
                    console.error('QuickMark failed:', e);
                }
            };

            const fetchTimelineData = async () => {
                dom.timelineList.innerHTML = `<div class="flex justify-center items-center py-8">
                    <svg class="animate-spin -ml-1 mr-3 h-8 w-8 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <span class="text-lg font-medium text-gray-700 dark:text-gray-300">A carregar registros...</span>
                </div>`;
                const end = new Date();
                const start = new Date();
                start.setDate(end.getDate() - 6);
                const payload = {
                    startDate: toISODateString(start),
                    endDate: toISODateString(end),
                    categoria: dom.categoriaSelect.value,
                    responsavel: dom.responsavelSelect.value,
                    servico: dom.servicoSelect.value,
                };
                try {
                    const response = await fetch(API_ENDPOINTS.monthData, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
                    if (!response.ok) throw new Error('API fetch failed');
                    const data = await response.json();
                    state.dailyData = {};
                    // Criar entradas para os últimos 7 dias
                    for (let i=0; i<7; i++) {
                        const d = new Date();
                        d.setDate(d.getDate() - i);
                        state.dailyData[toISODateString(d)] = null;
                    }
                    (data || []).forEach(r => { state.dailyData[r.cr9ff_data] = r; });
                    renderTimelineView();
                } catch(e) {
                    dom.timelineList.innerHTML = '<p class="text-red-500 text-center">Erro ao carregar dados. Tente alterar os filtros ou contate o suporte.</p>';
                }
            };
            
            // --- LÓGICA DE MODAIS E AÇÕES ---

            /**
             * Abre o modal de ações e preenche com base na seleção atual.
             */
            const openActionsModal = () => {
                const range = getOrderedDateRange();
                if (!range) return;

                const isSingleDay = isSameDay(range.start, range.end);
                dom.actionsModal.imbativelSection.style.display = isSingleDay ? 'flex' : 'none';
                dom.actionsModal.imbativelCheckbox.checked = false;
                dom.actionsModal.semOcorrenciaRadio.checked = false;
                dom.actionsModal.rcaRadio.checked = false;

                // Ativa a opção RCA apenas se um serviço específico for selecionado
                const isServicoSelected = !!dom.servicoSelect.value;
                dom.actionsModal.rcaRadio.disabled = !isServicoSelected;
                dom.actionsModal.rcaOptionContainer.classList.toggle('opacity-50', !isServicoSelected);
                dom.actionsModal.rcaOptionContainer.classList.toggle('cursor-not-allowed', !isServicoSelected);
                dom.actionsModal.rcaOptionContainer.title = isServicoSelected ? '' : 'Selecione um Serviço no filtro inicial para registar um RCA.';

                // Se for um único dia, pré-seleciona as ações existentes
                if (isSingleDay) {
                    const markers = state.dailyMarkers[toISODateString(range.start)] || [];
                    dom.actionsModal.imbativelCheckbox.checked = markers.includes('imbativel');
                    if (markers.includes('sem_ocorrencia')) dom.actionsModal.semOcorrenciaRadio.checked = true;
                    if (markers.includes('rca')) dom.actionsModal.rcaRadio.checked = true;
                }
                toggleModal(dom.actionsModal.modal, true);
            };

            const closeActionsModal = () => toggleModal(dom.actionsModal.modal, false);
            
            /**
             * Aplica as ações selecionadas no modal (Imbatível, Sem Ocorrência).
             * O registro de RCA é delegado para a função do wizard.
             */
            const handleApplyActions = async () => {
                const ocorrenciaValue = document.querySelector('input[name="ocorrencia_tipo"]:checked')?.value;
                if (ocorrenciaValue === 'rca') {
                    closeActionsModal();
                    openRcaWizard();
                    return;
                }

                toggleButtonLoading(dom.actionsModal.applyBtn, true, 'A gravar...');
                const range = getOrderedDateRange();
                if (!range) {
                    toggleButtonLoading(dom.actionsModal.applyBtn, false, 'Aplicar');
                    return;
                }
                
                const applyImbativel = dom.actionsModal.imbativelCheckbox.checked;

                if (!ocorrenciaValue && !applyImbativel && isSameDay(range.start, range.end)) {
                    showToast("Nenhuma ação selecionada.", "error");
                    toggleButtonLoading(dom.actionsModal.applyBtn, false, 'Aplicar');
                    return;
                }
                
                let originalMarkers = JSON.parse(JSON.stringify(state.dailyMarkers)); // Backup
                let payloadParaEnviar = [];
                const categoria = dom.categoriaSelect.value;
                const responsavel = dom.responsavelSelect.value;
                const selectedServico = dom.servicoSelect.value;
                
                const servicesToProcess = selectedServico ? [selectedServico] : [...new Set(state.initialData.filter(item => item.cr9ff_categoria === categoria && item.cr9ff_responsavel === responsavel).map(item => item.cr9ff_servico).filter(Boolean))];
                if(servicesToProcess.length === 0) servicesToProcess.push(null); // Caso não haja serviço, enviar um registro genérico

                for (let day = new Date(range.start); day <= range.end; day.setDate(day.getDate() + 1)) {
                    const dayString = toISODateString(day);
                    for(const servico of servicesToProcess) {
                        const chave = `${categoria}#${servico || 'N/A'}#${responsavel}#${dayString}`;
                        let registro = { 
                            chave: chave, componente: servico, area: categoria, registradoPor: state.currentUserName,
                            status: null, imbativel: 0,
                            inicio: null, fim: null, problemaNum: null, incidenteNum: null,
                            impacto: null, racional: null, critico: false, servicoCritico: null,
                            problemaDesc: null, causa: null, resolucao: null,
                        };
                        
                        let markers = new Set(state.dailyMarkers[dayString] || []);
                        
                        if (ocorrenciaValue === 'sem_ocorrencia') {
                            registro.status = STATUS_CODES.SEM_OCORRENCIA;
                            markers.add('sem_ocorrencia');
                            markers.delete('rca');
                        }
                        
                        if (isSameDay(range.start, range.end)) {
                            registro.imbativel = applyImbativel ? 1 : 0;
                            if (applyImbativel) markers.add('imbativel');
                            else markers.delete('imbativel');
                        }

                        payloadParaEnviar.push(registro);
                        
                        if (markers.size > 0) { state.dailyMarkers[dayString] = [...markers]; }
                        else { delete state.dailyMarkers[dayString]; }
                    }
                }

                closeActionsModal();
                updateSelectionStyles(); // Atualiza a UI imediatamente

                if(payloadParaEnviar.length > 0) {
                     try {
                        const response = await fetch(API_ENDPOINTS.save, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(payloadParaEnviar)
                        });
                        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                        showToast('Dados gravados com sucesso!');
                    } catch (error) {
                        showToast('Falha ao gravar os dados.', 'error');
                        console.error("Falha ao gravar dados:", error);
                        state.dailyMarkers = originalMarkers; // Reverte o estado em caso de erro
                        renderDayGrid(); // Re-renderiza para mostrar o estado revertido
                    } finally {
                        toggleButtonLoading(dom.actionsModal.applyBtn, false, 'Aplicar');
                    }
                } else {
                    toggleButtonLoading(dom.actionsModal.applyBtn, false, 'Aplicar');
                }
            };

            // --- LÓGICA DO ASSISTENTE RCA ---

            const openRcaWizard = (specificDateStr = null) => {
                state.rcaCurrentStep = 1;
                dom.rcaWizard.form.reset();
                dom.rcaWizard.errorSummary.classList.add('hidden');
                dom.rcaWizard.form.querySelectorAll('.error-message').forEach(el => el.classList.add('hidden'));
                dom.rcaWizard.criticoToggle.checked = false;
                dom.rcaWizard.servicoCriticoSection.classList.add('hidden');
                updateRacionalImpactoOptions(null);
                
                let range = null;
                if (specificDateStr) {
                    const d = new Date(specificDateStr + 'T00:00:00');
                    range = { start: d, end: d };
                } else {
                    range = getOrderedDateRange();
                }
                if (range) {
                    dom.rcaWizard.modal.dataset.startDate = toISODateString(range.start);
                    dom.rcaWizard.modal.dataset.endDate = toISODateString(range.end);
                    const dateOptions = { day: '2-digit', month: '2-digit', year: 'numeric' };
                    document.getElementById('rca-inicio-date').textContent = range.start.toLocaleDateString('pt-BR', dateOptions);
                    document.getElementById('rca-fim-date').textContent = range.end.toLocaleDateString('pt-BR', dateOptions);
                    
                    document.getElementById('rca-inicio-time').value = '';
                    document.getElementById('rca-fim-time').value = '';
                }

                showRcaStep(state.rcaCurrentStep);
                toggleModal(dom.rcaWizard.modal, true);
            };

            const closeRcaWizard = () => toggleModal(dom.rcaWizard.modal, false);

            const triggerAutoresize = () => {
                dom.rcaWizard.form.querySelectorAll('textarea[data-autoresize]').forEach(textarea => {
                    textarea.style.height = 'auto';
                    textarea.style.height = `${textarea.scrollHeight}px`;
                });
            };

            const showRcaStep = (step) => {
                document.querySelectorAll('.rca-step').forEach(s => s.classList.add('hidden'));
                const currentStepEl = document.getElementById(`rca-step-${step}`);
                if (currentStepEl) currentStepEl.classList.remove('hidden');
                
                const stepIndicatorEl = dom.rcaWizard.stepIndicator;
                if (stepIndicatorEl) {
                    const rcaCurrentStepSpan = stepIndicatorEl.querySelector('span');
                    if (rcaCurrentStepSpan) rcaCurrentStepSpan.textContent = step;
                }
                
                dom.rcaWizard.prevBtn.classList.toggle('hidden', step === 1);
                dom.rcaWizard.nextBtn.classList.toggle('hidden', step === 2);
                dom.rcaWizard.saveBtn.classList.toggle('hidden', step !== 2);
                if (step === 2) {
                    triggerAutoresize();
                }
            };
            
            const validateRcaStep = (step) => {
                let isValid = true;
                let errors = [];
                const stepContainer = document.getElementById(`rca-step-${step}`);
                
                const toggleError = (input, show, message) => {
                    const fieldContainer = input.closest('div');
                    const errorMsg = fieldContainer.querySelector('.error-message');
                    if (errorMsg) {
                        errorMsg.textContent = message;
                        errorMsg.classList.toggle('hidden', !show);
                    }
                };

                stepContainer.querySelectorAll('input[required], select[required], textarea[required]').forEach(input => {
                    if (!input.closest('.hidden') && !input.value) {
                        isValid = false;
                        const labelElement = stepContainer.querySelector(`label[for="${input.id}"]`);
                        const label = labelElement ? labelElement.textContent.trim() : 'Este campo';
                        const errorText = `${label.replace('*','')} é obrigatório.`;
                        toggleError(input, true, errorText);
                        errors.push(errorText);
                    } else {
                        toggleError(input, false, '');
                    }
                });

                if (isValid && step === 1) { 
                    const problemaNumInput = document.getElementById('rca-problema-num');
                    if (problemaNumInput.value && !/^PRB\d{7}$/i.test(problemaNumInput.value)) { isValid = false; const msg = 'Formato inválido. Use PRB0123456.'; toggleError(problemaNumInput, true, msg); errors.push(msg); }
                    
                    const incidenteNumInput = document.getElementById('rca-incidente-num');
                    if (incidenteNumInput.value && !/^INC\d{7}$/i.test(incidenteNumInput.value)) { isValid = false; const msg = 'Formato inválido. Use INC0123456.'; toggleError(incidenteNumInput, true, msg); errors.push(msg); }
                    
                    const impactoValue = parseFloat(dom.rcaWizard.impactoInput.value);
                    if (dom.rcaWizard.impactoInput.value !== '' && (isNaN(impactoValue) || impactoValue < 0 || impactoValue > 100)) { isValid = false; const msg = 'Valor deve estar entre 0 e 100.'; toggleError(dom.rcaWizard.impactoInput, true, msg); errors.push(msg); }

                    const startTimeStr = document.getElementById('rca-inicio-time').value;
                    const endTimeStr = document.getElementById('rca-fim-time').value;
                    if (startTimeStr && endTimeStr) {
                         const inicio = new Date(`${dom.rcaWizard.modal.dataset.startDate}T${startTimeStr}`);
                         const fim = new Date(`${dom.rcaWizard.modal.dataset.endDate}T${endTimeStr}`);
                         if (fim < inicio) { isValid = false; const msg = 'A hora de fim não pode ser anterior à de início.'; toggleError(document.getElementById('rca-fim-time'), true, msg); errors.push(msg); }
                    }
                }

                dom.rcaWizard.errorSummary.innerHTML = errors.map(e => `<p class="text-sm">- ${e}</p>`).join('');
                dom.rcaWizard.errorSummary.classList.toggle('hidden', isValid);
                
                return isValid;
            };

            const handleRcaNext = () => { if (validateRcaStep(state.rcaCurrentStep)) { state.rcaCurrentStep++; showRcaStep(state.rcaCurrentStep); } };
            const handleRcaPrev = () => { state.rcaCurrentStep--; showRcaStep(state.rcaCurrentStep); };
            
            const handleRcaSave = async () => {
                if (!validateRcaStep(1) || !validateRcaStep(2)) return;
                
                toggleButtonLoading(dom.rcaWizard.saveBtn, true, 'A gravar...');
                const startStr = dom.rcaWizard.modal.dataset.startDate;
                const endStr = dom.rcaWizard.modal.dataset.endDate;
                if(!startStr || !endStr) {
                    toggleButtonLoading(dom.rcaWizard.saveBtn, false, 'Salvar RCA');
                    return;
                }
                const startDate = new Date(startStr + 'T00:00:00');
                const endDate = new Date(endStr + 'T00:00:00');

                const categoria = dom.categoriaSelect.value;
                const responsavel = dom.responsavelSelect.value;
                const servico = dom.servicoSelect.value;
                
                const rcaBaseData = {
                    status: STATUS_CODES.RCA, imbativel: 0, area: categoria, componente: servico,
                    problemaNum: document.getElementById('rca-problema-num').value,
                    incidenteNum: document.getElementById('rca-incidente-num').value,
                    impacto: dom.rcaWizard.impactoInput.value,
                    racional: dom.rcaWizard.racionalSelect.value,
                    critico: dom.rcaWizard.criticoToggle.checked,
                    servicoCritico: dom.rcaWizard.criticoToggle.checked ? dom.rcaWizard.servicoCriticoSelect.value : null,
                    problemaDesc: document.getElementById('rca-problema-desc').value,
                    causa: document.getElementById('rca-causa').value,
                    resolucao: document.getElementById('rca-resolucao').value,
                    registradoPor: state.currentUserName
                };

                let payloadParaEnviar = [];
                for (let day = new Date(startDate); day <= endDate; day.setDate(day.getDate() + 1)) {
                    const dayString = toISODateString(day);
                    const timeRange = getTimeRangeForDay(day, startDate, endDate, document.getElementById('rca-inicio-time').value, document.getElementById('rca-fim-time').value);
                    const chave = `${categoria}#${servico}#${responsavel}#${dayString}`;
                    const registro = { chave: chave, ...rcaBaseData, inicio: timeRange.inicio, fim: timeRange.fim };
                    payloadParaEnviar.push(registro);

                    let markers = new Set(state.dailyMarkers[dayString] || []);
                    markers.add('rca');
                    markers.delete('sem_ocorrencia');
                    state.dailyMarkers[dayString] = [...markers];
                    state.rcaDataStore[dayString] = rcaBaseData;
                }
                
                closeRcaWizard();
                renderDayGrid();

                try {
                    const response = await fetch(API_ENDPOINTS.save, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payloadParaEnviar)
                    });
                     if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); }
                     showToast("RCA gravado com sucesso!");
                } catch(error) {
                    showToast("Falha ao gravar o RCA.", 'error');
                    console.error("Falha ao gravar dados do RCA:", error);
                } finally {
                     toggleButtonLoading(dom.rcaWizard.saveBtn, false, 'Salvar RCA');
                }
            };
            
            const updateRacionalImpactoOptions = (impacto) => {
                dom.rcaWizard.racionalSelect.innerHTML = '';
                let options = [ 'Impacto Geográfico', 'Duração da Indisponibilidade', 'Impacto sobre Transações', 'Intermitência e Performance Degradada', 'Criticidade do Serviço para a Operação', 'Volume de Chamados Associados' ];
                
                if (impacto === 0) options = ['Sem impacto'];
                
                dom.rcaWizard.racionalSelect.appendChild(new Option('Selecione um racional...', ''));
                options.forEach(opt => dom.rcaWizard.racionalSelect.appendChild(new Option(opt, opt)));
                
                if (impacto === 0) dom.rcaWizard.racionalSelect.value = 'Sem impacto';
            };
            
            // --- FUNÇÕES UTILITÁRIAS ---
            const showToast = (message, type = 'success') => {
                dom.toast.message.textContent = message;
                dom.toast.notification.classList.remove('bg-green-500', 'bg-red-500');
                if (type === 'success') {
                    dom.toast.notification.classList.add('bg-green-500');
                    dom.toast.icon.innerHTML = `<i data-lucide="check-circle" class="h-5 w-5"></i>`;
                } else {
                    dom.toast.notification.classList.add('bg-red-500');
                    dom.toast.icon.innerHTML = `<i data-lucide="x-circle" class="h-5 w-5"></i>`;
                }
                lucide.createIcons();
                dom.toast.notification.classList.remove('opacity-0', 'translate-y-2');
                setTimeout(() => {
                    dom.toast.notification.classList.add('opacity-0', 'translate-y-2');
                }, 4000);
            };

            const toggleModal = (modal, show) => { if (show) { modal.classList.remove('hidden'); setTimeout(() => { modal.classList.add('opacity-100'); modal.querySelector('div:first-child').classList.remove('scale-95'); }, 10); } else { modal.classList.remove('opacity-100'); modal.querySelector('div:first-child').classList.add('scale-95'); setTimeout(() => modal.classList.add('hidden'), 300); }};
            const toISODateString = (date) => `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;
            const isSameDay = (d1, d2) => d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth() && d1.getDate() === d2.getDate();
            const getOrderedDateRange = () => { if (!state.selectionStartDate || !state.selectionEndDate) return null; const start = state.selectionStartDate < state.selectionEndDate ? state.selectionStartDate : state.selectionEndDate; const end = state.selectionStartDate > state.selectionEndDate ? state.selectionStartDate : state.selectionEndDate; return { start, end }; };
            const isDayInRange = (day, start, end) => { if (!start || !end) return false; const range = getOrderedDateRange(); if(!range) return false; const d = new Date(day); d.setHours(0,0,0,0); return d >= range.start && d <= range.end; };
            const getTimeRangeForDay = (day, startDay, endDay, startTime, endTime) => {
                const BUSINESS_START = "00:00";
                const BUSINESS_END = "23:59";
                const dateStr = toISODateString(day);

                if (isSameDay(startDay, endDay)) {
                    return { inicio: `${dateStr}T${startTime}`, fim: `${dateStr}T${endTime}` };
                }
                if (isSameDay(day, startDay)) {
                    return { inicio: `${dateStr}T${startTime}`, fim: `${dateStr}T${BUSINESS_END}` };
                }
                if (isSameDay(day, endDay)) {
                    return { inicio: `${dateStr}T${BUSINESS_START}`, fim: `${dateStr}T${endTime}` };
                }
                return { inicio: `${dateStr}T${BUSINESS_START}`, fim: `${dateStr}T${BUSINESS_END}` };
            };

            const populateSelect = (selectElement, options, key, placeholder) => {
                const currentValue = selectElement.value; // Guardar o valor atual
                selectElement.innerHTML = `<option value="">${placeholder}</option>`;
                const uniqueOptions = [...new Set(options.map(item => item[key]).filter(Boolean))].sort();
                uniqueOptions.forEach(optionText => {
                    const option = new Option(optionText, optionText);
                    // Restaurar a seleção se o valor ainda existir na nova lista
                    if (optionText === currentValue) {
                        option.selected = true;
                    }
                    selectElement.appendChild(option);
                });
            };

            const checkInitialFilters = () => {
                const isReady = dom.categoriaSelect.value && dom.responsavelSelect.value;
                dom.showTimelineBtn.disabled = !isReady;
                dom.initialFiltersError.classList.toggle('hidden', isReady);
            };

            const updateDependentFilters = (changedFilter) => {
                const selectedCategory = dom.categoriaSelect.value;

                if (changedFilter === 'categoria') {
                    const responsavelEnabled = !!selectedCategory;
                    dom.responsavelSelect.disabled = !responsavelEnabled;
                    dom.responsavelSelect.parentElement.classList.toggle('opacity-50', !responsavelEnabled);
                    const dataForResponsavel = responsavelEnabled ? state.initialData.filter(item => item.cr9ff_categoria === selectedCategory) : [];
                    populateSelect(dom.responsavelSelect, dataForResponsavel, 'cr9ff_responsavel', responsavelEnabled ? 'Selecione um Responsável' : 'Selecione uma Categoria');
                }

                const selectedResponsavel = dom.responsavelSelect.value;
                const servicoEnabled = !!selectedResponsavel;
                dom.servicoSelect.disabled = !servicoEnabled;
                dom.servicoSelect.parentElement.classList.toggle('opacity-50', !servicoEnabled);

                let dataForServico = [];
                if (servicoEnabled) {
                    dataForServico = state.initialData.filter(item => 
                        item.cr9ff_categoria === selectedCategory && 
                        item.cr9ff_responsavel === selectedResponsavel
                    );
                }
                populateSelect(dom.servicoSelect, dataForServico, 'cr9ff_servico', servicoEnabled ? 'Todos os Serviços' : 'Selecione um Responsável');
                
                checkInitialFilters();
            };
            
            async function main() {
                dom.loadingIndicator.classList.remove('hidden');
                dom.mappingForm.classList.add('hidden');
                
                try {
                    const Xrm = parent.Xrm;
                    if (typeof Xrm !== "undefined" && Xrm.Utility) {
                        state.currentUserName = Xrm.Utility.getGlobalContext().userSettings.userName;
                    }
                } catch(e) {
                    console.warn("Não foi possível obter o contexto do Power Apps. Usando utilizador padrão.");
                }

                try {
                    const response = await fetch(API_ENDPOINTS.initialData, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({})
                    });
                    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                    
                    const data = await response.json();
                    state.initialData = data.value || []; 
                    
                    populateSelect(dom.categoriaSelect, state.initialData, 'cr9ff_categoria', 'Selecione uma Categoria');
                    updateDependentFilters(); // Set initial state for dependent filters

                } catch (error) {
                    console.error("Falha ao carregar dados iniciais:", error);
                    dom.loadingIndicator.innerHTML = '<p class="text-red-500 text-center">Falha ao carregar dados. Por favor, tente novamente mais tarde.</p>';
                    return;
                }

                dom.loadingIndicator.classList.add('hidden');
                dom.mappingForm.classList.remove('hidden');
                lucide.createIcons();
            }

            const initializeCalendar = () => { 
                const theme = localStorage.getItem('calendarTheme') || (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'); 
                applyTheme(theme); 
                renderCalendar(); 
                renderLegend();
                fetchAndDisplayMonthData();
            };

            const toggleButtonLoading = (button, isLoading, text) => {
                button.disabled = isLoading;
                const originalText = button.querySelector('span:last-child')?.textContent || 'Ação';
                if (isLoading) {
                    button.dataset.originalText = button.innerHTML;
                    button.innerHTML = `<svg class="animate-spin -ml-1 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg><span>${text}</span>`;
                } else {
                    button.innerHTML = button.dataset.originalText || originalText;
                }
            };

            const fetchAndDisplayMonthData = async () => {
                dom.calendarLoadingOverlay.classList.remove('hidden');

                const firstDay = new Date(state.currentDate.getFullYear(), state.currentDate.getMonth(), 1);
                const lastDay = new Date(state.currentDate.getFullYear(), state.currentDate.getMonth() + 1, 0);

                const payload = {
                    startDate: toISODateString(firstDay),
                    endDate: toISODateString(lastDay),
                    categoria: dom.categoriaSelect.value,
                    responsavel: dom.responsavelSelect.value,
                    servico: dom.servicoSelect.value,
                };
                
                try {
                    const response = await fetch(API_ENDPOINTS.monthData, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });
                    if (!response.ok) throw new Error(`HTTP Error: ${response.status}`);
                    
                    const data = await response.json();
                    state.dailyMarkers = {}; // Limpa os marcadores existentes
                    (data || []).forEach(record => {
                        const date = record.cr9ff_data;
                        if(!state.dailyMarkers[date]) state.dailyMarkers[date] = new Set();

                        if (record.cr9ff_validacao === STATUS_CODES.RCA) state.dailyMarkers[date].add('rca');
                        if (record.cr9ff_validacao === STATUS_CODES.SEM_OCORRENCIA) state.dailyMarkers[date].add('sem_ocorrencia');
                        if (record.cr9ff_imbativel) state.dailyMarkers[date].add('imbativel');
                    });
                     // Converte Sets para Arrays para o resto da aplicação
                    Object.keys(state.dailyMarkers).forEach(key => {
                        state.dailyMarkers[key] = [...state.dailyMarkers[key]];
                    });

                } catch (error) {
                    console.error("Falha ao carregar dados de eventos:", error);
                    showToast("Falha ao carregar eventos do mês.", "error");
                } finally {
                    dom.calendarLoadingOverlay.classList.add('hidden');
                    renderCalendar();
                }
            };
            
            const applyTheme = (theme) => { if (theme === 'dark') document.documentElement.classList.add('dark'); else document.documentElement.classList.remove('dark'); localStorage.setItem('calendarTheme', theme); updateThemeIcon(); };
            const updateThemeIcon = () => { const isDark = document.documentElement.classList.contains('dark'); dom.themeIcon.setAttribute('data-lucide', isDark ? 'moon' : 'sun'); lucide.createIcons(); };

            // --- EVENT LISTENERS ---
            
            // Navegação Calendário
            dom.prevMonthBtn.addEventListener('click', () => { state.currentDate.setMonth(state.currentDate.getMonth() - 1); fetchAndDisplayMonthData(); });
            dom.nextMonthBtn.addEventListener('click', () => { state.currentDate.setMonth(state.currentDate.getMonth() + 1); fetchAndDisplayMonthData(); });
            dom.todayBtn.addEventListener('click', () => { state.currentDate = new Date(); state.selectionStartDate = new Date(); state.selectionStartDate.setHours(0,0,0,0); state.selectionEndDate = state.selectionStartDate; state.currentView = 'days'; fetchAndDisplayMonthData(); });
            dom.monthYearTitle.addEventListener('click', () => { if (state.currentView === 'days') state.currentView = 'months'; else if (state.currentView === 'months') state.currentView = 'years'; else if (state.currentView === 'years') state.currentView = 'days'; renderCalendar(); });
            dom.prevYearChunkBtn.addEventListener('click', () => { state.yearViewStart -= 12; renderYearView(); updateTitle(); });
            dom.nextYearChunkBtn.addEventListener('click', () => { state.yearViewStart += 12; renderYearView(); updateTitle(); });
            dom.themeToggleBtn.addEventListener('click', () => { const isDark = document.documentElement.classList.contains('dark'); applyTheme(isDark ? 'light' : 'dark'); });

            // Drag/Seleção no Calendário
            dom.calendarGrid.addEventListener('mousedown', e => {
                const cell = e.target.closest('[data-date]');
                if (!cell) return;
                state.isDragging = true;
                const date = new Date(cell.dataset.date + 'T00:00:00');
                state.selectionStartDate = date;
                state.selectionEndDate = date;
                updateSelectionStyles();
            });
            dom.calendarGrid.addEventListener('mouseover', e => {
                if (state.isDragging) {
                    const cell = e.target.closest('[data-date]');
                    if (!cell) return;
                    state.selectionEndDate = new Date(cell.dataset.date + 'T00:00:00');
                    updateSelectionStyles();
                }
            });
            window.addEventListener('mouseup', () => {
                if (state.isDragging) {
                    state.isDragging = false;
                    openActionsModal();
                }
            });
            
            // --- FILTROS INICIAIS ---
            dom.showTimelineBtn.addEventListener('click', () => {
                if(dom.showTimelineBtn.disabled) return;
                dom.initialMappingScreen.classList.add('hidden');
                dom.timelineContainer.classList.remove('hidden');
                dom.activeFiltersContainer.classList.remove('hidden');

                dom.filterTags.innerHTML = '';
                const filters = {
                    'Categoria': dom.categoriaSelect.value,
                    'Responsável': dom.responsavelSelect.value,
                    'Serviço': dom.servicoSelect.value
                };

                const userTag = document.createElement('span');
                userTag.className = 'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';
                userTag.innerHTML = `<i data-lucide="user-circle" class="h-4 w-4 mr-1.5"></i>${state.currentUserName}`;
                dom.filterTags.appendChild(userTag);

                Object.entries(filters).forEach(([key, value]) => {
                    if(value) {
                        const tag = document.createElement('span');
                        tag.className = 'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300';
                        tag.textContent = `${key}: ${value}`;
                        dom.filterTags.appendChild(tag);
                    }
                });
                lucide.createIcons();
                fetchTimelineData();
            });

            dom.categoriaSelect.addEventListener('change', () => updateDependentFilters('categoria'));
            dom.responsavelSelect.addEventListener('change', () => updateDependentFilters('responsavel'));

            const returnToFilterScreen = () => {
                dom.initialMappingScreen.classList.remove('hidden');
                dom.calendarContainer.classList.add('hidden');
                dom.timelineContainer.classList.add('hidden');
                dom.activeFiltersContainer.classList.add('hidden');
            };

            dom.changeFiltersBtn.addEventListener('click', returnToFilterScreen);
            dom.timelineChangeFiltersBtn.addEventListener('click', returnToFilterScreen);

            dom.showTimelineViewBtn.addEventListener('click', () => {
                dom.calendarContainer.classList.add('hidden');
                dom.timelineContainer.classList.remove('hidden');
                fetchTimelineData();
            });

            dom.viewCalendarBtn.addEventListener('click', () => {
                state.currentView = 'days';
                dom.timelineContainer.classList.add('hidden');
                dom.calendarContainer.classList.remove('hidden');
                initializeCalendar();
            });

            dom.timelineList.addEventListener('click', (e) => {
                const rcaBtn = e.target.closest('.quick-rca');
                const semBtn = e.target.closest('.quick-sem');
                if (rcaBtn && !rcaBtn.disabled) {
                    const date = rcaBtn.dataset.date;
                    openRcaWizard(date);
                } else if (semBtn) {
                    const date = semBtn.dataset.date;
                    handleQuickMark(date);
                }
            });
            
            // Modal de Ações
            dom.actionsModal.applyBtn.addEventListener('click', handleApplyActions);
            dom.actionsModal.cancelBtn.addEventListener('click', closeActionsModal);

            // Assistente RCA
            dom.rcaWizard.nextBtn.addEventListener('click', handleRcaNext);
            dom.rcaWizard.prevBtn.addEventListener('click', handleRcaPrev);
            dom.rcaWizard.saveBtn.addEventListener('click', handleRcaSave);
            dom.rcaWizard.cancelBtn.addEventListener('click', closeRcaWizard);
            dom.rcaWizard.impactoInput.addEventListener('input', (e) => updateRacionalImpactoOptions(parseFloat(e.target.value)));
            dom.rcaWizard.criticoToggle.addEventListener('change', async (e) => {
                const isChecked = e.target.checked;
                dom.rcaWizard.servicoCriticoSection.classList.toggle('hidden', !isChecked);
                dom.rcaWizard.servicoCriticoSelect.required = isChecked;
                if (!isChecked) {
                    dom.rcaWizard.servicoCriticoSelect.innerHTML = '<option value="">Selecione um serviço...</option>';
                } else {
                    dom.rcaWizard.servicoCriticoSelect.innerHTML = '<option value="">A carregar...</option>';
                    try {
                        const response = await fetch(API_ENDPOINTS.servicosCriticos, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({}) });
                        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                        const data = await response.json();
                        populateSelect(dom.rcaWizard.servicoCriticoSelect, data.value || [], 'cr9ff_itpf', 'Selecione um serviço crítico...');
                   } catch (error) {
                       console.error("Falha ao carregar serviços críticos:", error);
                       dom.rcaWizard.servicoCriticoSelect.innerHTML = '<option value="">Erro ao carregar</option>';
                   }
                }
            });
            dom.rcaWizard.form.addEventListener('input', (e) => {
                if (e.target.matches('[data-autoresize]')) {
                    triggerAutoresize();
                }
            });

            // --- INICIALIZAÇÃO ---
            main();
        });
    </script>
</body>
</html>
