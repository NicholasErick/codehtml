<!doctype html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dashboard Estratégico de Gestão de Mudanças</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      darkMode: 'class'
    }
  </script>
  <script src="https://unpkg.com/lucide@latest"></script>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  <style>
    body {
      font-family: 'Inter', sans-serif;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }
    .tab {
      transition: all 0.2s ease-in-out;
    }
    .tab.active {
      border-color: #2563eb; /* blue-600 */
      background-color: #eff6ff; /* blue-50 */
      color: #1e40af; /* blue-800 */
    }
    .dark .tab.active {
        background-color: #1e3a8a; /* dark:blue-800 */
        color: #dbeafe; /* dark:blue-200 */
    }
    .kpi-card {
      position: relative; 
      border-left-width: 4px;
      transition: all 0.2s ease-in-out;
    }
    .kpi-card.kpi-clickable {
      cursor: pointer;
    }
    .kpi-card.kpi-clickable:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
    }
    .dark .kpi-card.kpi-clickable:hover {
        box-shadow: 0 4px 6px -1px rgb(255 255 255 / 0.1), 0 2px 4px -2px rgb(255 255 255 / 0.1);
    }
    .kpi-card.active-filter {
        border-width: 2px;
        border-color: #2563eb;
        box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
    }
    .change-card {
        border-left-width: 4px;
        transition: all 0.2s ease-in-out;
    }
    .change-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
    }
    details > summary {
      list-style: none;
    }
    details > summary::-webkit-details-marker {
      display: none;
    }
    details summary .arrow {
      transition: transform 0.2s;
    }
    details[open] summary .arrow {
      transform: rotate(90deg);
    }
    .micro-chart-bar {
        display: flex;
        height: 8px;
        border-radius: 4px;
        overflow: hidden;
        background-color: #e2e8f0;
    }
    .dark .micro-chart-bar {
        background-color: #4b5563;
    }
    .micro-chart-segment {
        height: 100%;
    }
    .tooltip-container {
      position: relative;
      display: inline-block;
    }
    .tooltip-text {
      visibility: hidden;
      width: 220px;
      background-color: #1e293b;
      color: #fff;
      text-align: center;
      border-radius: 6px;
      padding: 8px;
      position: absolute;
      z-index: 50;
      top: 120%;
      left: 50%;
      transform: translateX(-50%);
      opacity: 0;
      transition: opacity 0.3s;
      font-size: 12px;
      font-weight: 500;
      pointer-events: none;
    }
    .tooltip-text::after {
      content: "";
      position: absolute;
      bottom: 100%;
      left: 50%;
      margin-left: -5px;
      border-width: 5px;
      border-style: solid;
      border-color: transparent transparent #1e293b transparent;
    }
    .tooltip-container:hover .tooltip-text {
      visibility: visible;
      opacity: 1;
    }
    .modal-backdrop {
        transition: opacity 0.3s ease;
    }
    .modal-content {
        transition: opacity 0.3s ease, transform 0.3s ease;
    }
    .breakdown-label {
        cursor: pointer;
    }
    .breakdown-label.active {
        font-weight: 700;
        color: #2563eb;
    }
    .dark .breakdown-label.active {
        color: #60a5fa;
    }
    #global-search::-webkit-search-cancel-button {
        -webkit-appearance: none;
        height: 1rem;
        width: 1rem;
        margin-left: .25rem;
        background-image: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%239CA3AF'><path d='M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z'/></svg>");
        cursor: pointer;
    }
  </style>
</head>
<body class="bg-slate-100 dark:bg-gray-900 text-slate-800 dark:text-slate-200 transition-colors duration-300">

  <div class="min-h-screen">
    <!-- CABEÇALHO -->
    <header class="bg-white dark:bg-slate-800 shadow-sm sticky top-0 z-20 transition-colors duration-300">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-3">
        <div class="flex justify-between items-center gap-4">
            <div class="flex-shrink-0">
                <h1 class="text-xl sm:text-2xl font-bold text-slate-900 dark:text-white">Dashboard de Gestão de Mudanças</h1>
                <p id="user-greeting" class="text-xs text-slate-500 dark:text-slate-400"></p>
            </div>
            <div class="relative flex-grow max-w-md">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <i data-lucide="search" class="h-5 w-5 text-slate-400"></i>
                </div>
                <input type="search" id="global-search" placeholder="Buscar por nº, descrição, gerente..." class="w-full pl-10 pr-4 py-2 border border-slate-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-slate-700 dark:border-slate-600 dark:placeholder-slate-400 transition">
            </div>
            <div class="flex items-center gap-2 flex-shrink-0">
                <div id="last-updated-container" class="text-right hidden sm:block">
                    <p class="text-xs text-slate-500 dark:text-slate-400">Última Atualização</p>
                    <p class="text-sm font-semibold text-slate-700 dark:text-slate-300" id="last-updated-timestamp">--/--/---- --:--</p>
                </div>
                <button id="theme-toggle-btn" class="p-2 rounded-full text-slate-500 dark:text-slate-400 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors">
                    <!-- Ícone será inserido pelo JS -->
                </button>
            </div>
        </div>
      </div>
    </header>

    <!-- NAVEGAÇÃO POR ABAS -->
    <nav class="bg-white dark:bg-slate-800 border-b border-slate-200 dark:border-slate-700 sticky top-[81px] sm:top-[85px] z-10 transition-colors duration-300">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex -mb-px items-center">
          <button data-tab="aprovadas" class="tab active text-sm font-semibold py-3 px-4 border-b-2 border-transparent text-slate-600 dark:text-slate-300 hover:bg-slate-50 dark:hover:bg-slate-700">
            Aprovadas
          </button>
          <div class="tooltip-container">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-slate-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
            <span class="tooltip-text">Classificação: 'Report'</span>
          </div>

          <button data-tab="previa" class="tab text-sm font-semibold py-3 px-4 ml-4 border-b-2 border-transparent text-slate-600 dark:text-slate-300 hover:bg-slate-50 dark:hover:bg-slate-700">
            Prévia do Comitê
          </button>
            <div class="tooltip-container">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-slate-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
            <span class="tooltip-text">Classificação: 'Comite'</span>
          </div>

          <button data-tab="temporal" class="tab text-sm font-semibold py-3 px-4 ml-4 border-b-2 border-transparent text-slate-600 dark:text-slate-300 hover:bg-slate-50 dark:hover:bg-slate-700">
            Ativas
          </button>
            <div class="tooltip-container">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-slate-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
            <span class="tooltip-text">Classificação: 'Execução'</span>
          </div>

          <button data-tab="superadas" class="tab text-sm font-semibold py-3 px-4 ml-4 border-b-2 border-transparent text-slate-600 dark:text-slate-300 hover:bg-slate-50 dark:hover:bg-slate-700">
            Superadas
          </button>
            <div class="tooltip-container">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-slate-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
            <span class="tooltip-text">Classificação: 'Superado'</span>
          </div>
        </div>
      </div>
    </nav>

    <!-- CONTEÚDO PRINCIPAL -->
    <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      
      <!-- SEÇÃO DE CONTEÚDO DOS PAINÉIS -->
      <section id="panels-section">
        <!-- PAINEL: APROVADAS -->
        <div id="panel-aprovadas" class="panel-content">
          <div id="kpi-aprovadas" class="grid grid-cols-1 md:grid-cols-3 gap-5 mb-8"></div>
          <div id="content-aprovadas" class="space-y-4"></div>
        </div>

        <!-- PAINEL: PRÉVIA -->
        <div id="panel-previa" class="panel-content hidden">
          <div id="kpi-previa" class="grid grid-cols-1 md:grid-cols-3 gap-5 mb-8"></div>
          <div id="content-previa" class="space-y-4"></div>
        </div>

        <!-- PAINEL: VISÃO TEMPORAL -->
        <div id="panel-temporal" class="panel-content hidden">
          <div id="kpi-temporal" class="grid grid-cols-2 lg:grid-cols-5 gap-5 mb-8"></div>
          <div id="content-temporal" class="space-y-4"></div>
        </div>

        <!-- PAINEL: SUPERADAS -->
        <div id="panel-superadas" class="panel-content hidden">
          <div id="kpi-superadas" class="grid grid-cols-1 md:grid-cols-3 gap-5 mb-8"></div>
          <div id="content-superadas" class="space-y-4"></div>
        </div>
      </section>

    </main>

    <!-- MODAL DE DETALHES DA MUDANÇA -->
    <div id="details-modal" class="fixed inset-0 bg-black/60 z-50 flex justify-center items-center p-4 transition-opacity opacity-0 pointer-events-none modal-backdrop">
        <div id="modal-content" class="bg-white dark:bg-slate-800 rounded-lg shadow-xl w-full max-w-2xl transform transition-all scale-95 opacity-0 modal-content">
            <!-- O conteúdo será inserido aqui pelo JavaScript -->
        </div>
    </div>
  </div>

  <script>
  // IIFE para encapsular o código e evitar poluição do escopo global
  (function() {
    // URLs e constantes
    const URL_MUDANCAS = 'https://f9de0ae4d0f6e2fd9223eb9d948f40.0e.environment.api.powerplatform.com:443/powerautomate/automations/direct/workflows/1371f4c89025411fac91fb7b8dd6ee79/triggers/manual/paths/invoke?api-version=1&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=MtxkUjXxGdY0zKsTi5opzjqcFx2oG5hM3vuBz1Zgdjk';
    const URL_CHECKLIST = 'https://f9de0ae4d0f6e2fd9223eb9d948f40.0e.environment.api.powerplatform.com:443/powerautomate/automations/direct/workflows/67e54359b5e2415daa9fe5ad5cb320ec/triggers/manual/paths/invoke?api-version=1&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=FR58ReEbp4PaixTewkDTNR_6uS1scgD5o3q_ThKUqik';
    
    // --- ESTADO DA APLICAÇÃO ---
    const state = {
        isDataLoaded: false,
        masterData: { mudancas: [], checklist: [] },
        activeFilters: {
            aprovadas: { type: 'all', value: null },
            previa: { type: 'all', value: null },
            temporal: { type: 'all', value: null },
            superadas: { type: 'all', value: null }
        },
        classificationInfo: null,
        globalSearchTerm: ''
    };

    const DIACRITICS_REGEX = new RegExp('[\\u0300-\\u036f]', 'g');

    const TAB_CLASSIFICATION_LABELS = {
        aprovadas: ['Report'],
        previa: ['Comite'],
        temporal: ['Execução'],
        superadas: ['Superado']
    };

    const NORMALIZED_TAB_CLASSIFICATION_LABELS = Object.fromEntries(
        Object.entries(TAB_CLASSIFICATION_LABELS).map(([tab, labels]) => [
            tab,
            new Set(labels.map(label => normalizeClassification(label)))
        ])
    );

    const KNOWN_CLASSIFICATIONS = (() => {
        const known = new Set();
        Object.values(NORMALIZED_TAB_CLASSIFICATION_LABELS).forEach(set => {
            set.forEach(value => known.add(value));
        });
        return known;
    })();

    function safeCreateIcons(context = 'renderização padrão') {
        if (window.lucide?.createIcons) {
            try {
                window.lucide.createIcons();
            } catch (error) {
                console.warn(`Não foi possível renderizar os ícones do Lucide (${context}).`, error);
            }
        } else {
            console.warn(`Biblioteca Lucide indisponível; ícones não serão renderizados (${context}).`);
        }
    }

    // --- INICIALIZAÇÃO ---
    document.addEventListener('DOMContentLoaded', () => {
        const tabs = document.querySelectorAll('.tab');
        const panelsSection = document.getElementById('panels-section');
        const themeToggleBtn = document.getElementById('theme-toggle-btn');
        const modal = document.getElementById('details-modal');
        const searchInput = document.getElementById('global-search');

        const switchTab = (tabId) => {
            const panels = document.querySelectorAll('.panel-content');
            tabs.forEach(tab => tab.classList.toggle('active', tab.dataset.tab === tabId));
            panels.forEach(panel => panel.classList.toggle('hidden', panel.id !== `panel-${tabId}`));
            loadDataAndRender(tabId);
        };

        tabs.forEach(tab => tab.addEventListener('click', () => switchTab(tab.dataset.tab)));
        themeToggleBtn.addEventListener('click', toggleTheme);
        
        searchInput.addEventListener('input', (e) => {
            state.globalSearchTerm = e.target.value;
            const activeTabId = document.querySelector('.tab.active').dataset.tab;
            if(state.isDataLoaded) {
                renderPanel(activeTabId);
            }
        });

        modal.addEventListener('click', (e) => {
            if (e.target === modal || e.target.closest('[data-action="close-modal"]')) {
                toggleModal(false);
            }
        });

        panelsSection.addEventListener('click', (e) => {
            const kpiCard = e.target.closest('.kpi-clickable');
            const breakdownLabel = e.target.closest('.breakdown-label[data-filter-type]');
            const detailsButton = e.target.closest('[data-action="view-details"]');
            const activeTabId = document.querySelector('.tab.active').dataset.tab;

            if (breakdownLabel) {
                state.activeFilters[activeTabId] = {
                    type: breakdownLabel.dataset.filterType,
                    value: breakdownLabel.dataset.filterValue
                };
                renderPanel(activeTabId);
            } else if (kpiCard) {
                state.activeFilters[activeTabId] = JSON.parse(kpiCard.dataset.filter);
                renderPanel(activeTabId);
            } else if (detailsButton) {
                const card = detailsButton.closest('.change-card');
                const changeData = card.changeData; 
                renderModalContent(changeData);
                toggleModal(true);
            }
        });
        
        initTheme();
        getUserContext();
        switchTab('aprovadas'); // Inicia na primeira aba
    });

    // --- LÓGICA DE CARREGAMENTO E RENDERIZAÇÃO ---
    async function loadDataAndRender(tabId) {
        if (state.isDataLoaded) {
            renderPanel(tabId);
            return;
        }

        const contentContainer = document.getElementById(`content-${tabId}`);
        contentContainer.innerHTML = `<p class="text-center text-slate-500 dark:text-slate-400">Carregando dados...</p>`;
        document.getElementById('last-updated-timestamp').textContent = 'Carregando...';

        try {
            const [mainResponse, checklistResponse] = await Promise.all([
                fetch(URL_MUDANCAS, { method: 'POST' }),
                fetch(URL_CHECKLIST, { method: 'POST' })
            ]);

            if (!mainResponse.ok || !checklistResponse.ok) throw new Error(`Falha na rede`);
            
            const mainDataJson = await mainResponse.json();
            const checklistData = await checklistResponse.json();

            const extractArrayFromResponse = (payload, fallbackKeys = []) => {
                if (Array.isArray(payload)) {
                    return payload;
                }
                const candidates = [ payload?.body?.value, payload?.body, payload?.value ];
                fallbackKeys.forEach(key => {
                    candidates.push(payload?.[key]?.value, payload?.[key], payload?.body?.[key]?.value, payload?.body?.[key], payload?.body?.value?.[key]?.value, payload?.body?.value?.[key], payload?.value?.[key]?.value, payload?.value?.[key]);
                });
                for (const candidate of candidates) {
                    if (Array.isArray(candidate)) return candidate;
                }
                return [];
            };

            const mudancasFromApi = extractArrayFromResponse(mainDataJson);
            const checklistFromApi = extractArrayFromResponse(checklistData, ['registros']);

            state.masterData = {
                mudancas: mudancasFromApi,
                checklist: checklistFromApi
            };
            state.classificationInfo = catalogClassificationLabels(mudancasFromApi);
            logClassificationCatalog(state.classificationInfo);
            state.isDataLoaded = true;
            document.getElementById('last-updated-timestamp').textContent = new Date().toLocaleString('pt-BR');
            renderPanel(tabId);

        } catch (error) {
            const errorContainer = document.getElementById(`content-${tabId}`);
            if (errorContainer) {
                errorContainer.innerHTML = `<p class="text-center text-red-600">Erro ao carregar dados: ${error.message}</p>`;
            }
        }
    }
    
    function getChangesForTab(mudancas, tabId) {
        if (!Array.isArray(mudancas) || mudancas.length === 0) return [];
        const tabClassificationSet = NORMALIZED_TAB_CLASSIFICATION_LABELS[tabId];
        if (!tabClassificationSet || tabClassificationSet.size === 0) return [];
        return mudancas.filter(mudanca => classificationMatchesTab(tabId, mudanca.cr9ff_classificao));
    }

    function applySearchFilter(changes, term) {
        if (!term || term.trim() === '') {
            return changes;
        }
        const lowerCaseTerm = term.toLowerCase();
        return changes.filter(change => {
            return (
                change.cr9ff_nmero?.toLowerCase().includes(lowerCaseTerm) ||
                change.cr9ff_descrioresumida?.toLowerCase().includes(lowerCaseTerm) ||
                change.cr9ff_gerente?.toLowerCase().includes(lowerCaseTerm) ||
                change.cr9ff_coordenador?.toLowerCase().includes(lowerCaseTerm) ||
                change.cr9ff_departamento?.toLowerCase().includes(lowerCaseTerm) ||
                change.cr9ff_solicitante?.toLowerCase().includes(lowerCaseTerm)
            );
        });
    }

    function renderPanel(tabId) {
        const { masterData, activeFilters, classificationInfo, globalSearchTerm } = state;
        const activeFilter = activeFilters[tabId];
        const kpiContainer = document.getElementById(`kpi-${tabId}`);
        const contentContainer = document.getElementById(`content-${tabId}`);

        if (!kpiContainer || !contentContainer) return;

        kpiContainer.innerHTML = '';
        contentContainer.innerHTML = '';

        const tabSpecificChanges = getChangesForTab(masterData.mudancas, tabId);
        
        let transformedChanges = transformApiData(tabSpecificChanges);
        let allChangesForTab = mergeChangeDataWithChecklist(transformedChanges, masterData.checklist);

        let searchedChanges = applySearchFilter(allChangesForTab, globalSearchTerm);
        
        let filteredChanges = searchedChanges;
        if (activeFilter.type !== 'all') {
            filteredChanges = applyActiveFilter(searchedChanges, activeFilter);
        }

        const unmatchedClassifications = classificationInfo ? classificationInfo.unmatched : {};
        const showUnmatchedNotice = unmatchedClassifications && Object.keys(unmatchedClassifications).length > 0;

        if (tabId === 'aprovadas' || tabId === 'previa' || tabId === 'superadas') {
            renderAprovadasPreviaPanel(
                kpiContainer,
                contentContainer,
                allChangesForTab, // KPIs are based on all data for the tab
                filteredChanges,  // The list is based on filtered data
                tabId,
                { unmatchedClassifications, showUnmatchedNotice }
            );
        } else if (tabId === 'temporal') {
            const mudancasProcessadas = processAtivasData(allChangesForTab);
            const filteredProcessed = processAtivasData(filteredChanges);
            renderTemporalPanel(
                kpiContainer,
                contentContainer,
                mudancasProcessadas,
                filteredProcessed,
                tabId,
                { unmatchedClassifications, showUnmatchedNotice }
            );
        }
    }

    function renderAprovadasPreviaPanel(kpiContainer, contentContainer, allChanges, filteredChanges, tabId, options = {}) {
        const { unmatchedClassifications = null, showUnmatchedNotice = false } = options;
        if (showUnmatchedNotice) {
            appendUnmatchedClassificationsNotice(contentContainer, unmatchedClassifications);
        }

        const groupedByHierarchy = groupData(filteredChanges, 'cr9ff_departamento', 'cr9ff_gerente');

        const priorityCounts = countBy(allChanges, m => getPriorityStyle(m.cr9ff_prioridade).text);
        const monthlyCounts = countBy(allChanges, m => getMonthlyCategory(m.createdon));
        const checklistCounts = countBy(allChanges, m => m.checklist ? 'Com Checklist' : 'Sem Checklist');

        const kpis = [
            { label: 'Total de Mudanças', value: allChanges.length, filter: {type: 'all'}, color: 'border-blue-500', tooltip: 'Total de mudanças. Clique para limpar filtros.', breakdown: {
                'Este Mês': { value: monthlyCounts['Este Mês'] || 0, color: '#3b82f6', filter: {type: 'month', value: 'Este Mês'} },
                'Mês Passado': { value: monthlyCounts['Mês Passado'] || 0, color: '#60a5fa', filter: {type: 'month', value: 'Mês Passado'} },
                'Anteriores': { value: monthlyCounts['Anteriores'] || 0, color: '#93c5fd', filter: {type: 'month', value: 'Anteriores'} }
            }},
            { label: 'Status do Checklist', value: allChanges.length, filter: {type: 'all'}, color: 'border-indigo-500', tooltip: 'Status de preenchimento do checklist de prontidão.', breakdown: {
                'Com Checklist': { value: checklistCounts['Com Checklist'] || 0, color: '#22c55e', filter: {type: 'checklist', value: 'Com Checklist'} },
                'Sem Checklist': { value: checklistCounts['Sem Checklist'] || 0, color: '#ef4444', filter: {type: 'checklist', value: 'Sem Checklist'} }
            }},
            { label: 'Prioridade Crítica', value: priorityCounts['Crítica'] || 0, filter: {type: 'priority', value: 'Crítica'}, color: 'border-red-500', tooltip: 'Mudanças com a maior prioridade. Clique para filtrar.' }
        ];

        kpis.forEach(kpi => kpiContainer.appendChild(createKpiCard(kpi.label, kpi.value, kpi.color, kpi.filter, tabId, kpi.breakdown, kpi.tooltip)));
        
        if (filteredChanges.length === 0) {
            const emptyState = document.createElement('p');
            emptyState.className = 'text-center text-slate-500 dark:text-slate-400 mt-8';
            emptyState.textContent = 'Nenhuma mudança encontrada para os filtros selecionados.';
            contentContainer.appendChild(emptyState);
            return;
        }

        for (const departmentName in groupedByHierarchy) {
            const departmentData = groupedByHierarchy[departmentName];
            const departmentAccordion = createAccordion('manager', departmentName, departmentData.count);
            const departmentContent = departmentAccordion.querySelector('.accordion-content');

            for (const superiorName in departmentData.secondaryGroups) {
                const superiorData = departmentData.secondaryGroups[superiorName];
                const superiorAccordion = createAccordion('coordinator', superiorName, superiorData.count);
                const superiorContent = superiorAccordion.querySelector('.accordion-content');
                
                superiorData.changes.forEach(m => superiorContent.appendChild(createChangeCard(m)));
                departmentContent.appendChild(superiorAccordion);
            }
            contentContainer.appendChild(departmentAccordion);
        }
    }

    function renderTemporalPanel(kpiContainer, contentContainer, allChanges, filteredChanges, tabId, options = {}) {
        const { unmatchedClassifications = null, showUnmatchedNotice = false } = options;
        if (showUnmatchedNotice) {
            appendUnmatchedClassificationsNotice(contentContainer, unmatchedClassifications);
        }

        const now = new Date();
        const groupedByHierarchy = groupData(filteredChanges, 'cr9ff_departamento', 'cr9ff_gerente');
        
        const monthlyCounts = countBy(allChanges, m => getMonthlyCategory(m.createdon));
        const checklistCounts = countBy(allChanges, m => m.checklist ? 'Com Checklist' : 'Sem Checklist');
        const kpiGroups = { 'Atrasadas': [], 'Futuras': [], 'Em Andamento': [], 'Sem Data': [] };
        
        allChanges.forEach(m => {
            const category = getTemporalCategory(m, now);
            if (category === 'Atrasadas') {
                kpiGroups['Atrasadas'].push(m);
            }
            else if (category === 'Em Andamento') kpiGroups['Em Andamento'].push(m);
            else if (category === 'Sem Data') kpiGroups['Sem Data'].push(m);
            else if (['Amanhã', 'Esta Semana', 'Próxima Semana', 'Futuras'].includes(category)) {
                kpiGroups['Futuras'].push(m);
            }
        });

        const kpiBreakdownData = {
            'Total de Mudanças': {
                'Este Mês': { value: monthlyCounts['Este Mês'] || 0, color: '#3b82f6', filter: {type: 'month', value: 'Este Mês'} },
                'Mês Passado': { value: monthlyCounts['Mês Passado'] || 0, color: '#60a5fa', filter: {type: 'month', value: 'Mês Passado'} },
                'Anteriores': { value: monthlyCounts['Anteriores'] || 0, color: '#93c5fd', filter: {type: 'month', value: 'Anteriores'} }
            },
            'Status do Checklist': {
                'Com Checklist': { value: checklistCounts['Com Checklist'] || 0, color: '#22c55e', filter: {type: 'checklist', value: 'Com Checklist'} },
                'Sem Checklist': { value: checklistCounts['Sem Checklist'] || 0, color: '#ef4444', filter: {type: 'checklist', value: 'Sem Checklist'} }
            }
        };

        const kpis = [
              { label: 'Total de Mudanças', value: allChanges.length, filter: {type: 'all'}, color: 'border-slate-500', breakdown: kpiBreakdownData['Total de Mudanças'], tooltip: 'Total de mudanças ativas. Clique para limpar filtros.'},
              { label: 'Status do Checklist', value: checklistCounts['Com Checklist'] || 0, filter: {type: 'checklist', value: 'Com Checklist'}, color: 'border-indigo-500', breakdown: kpiBreakdownData['Status do Checklist'], tooltip: 'Status de preenchimento do checklist. Clique em uma legenda para filtrar.'},
              { label: 'Atrasadas', value: kpiGroups.Atrasadas.length, filter: {type: 'temporal', value: 'Atrasadas'}, color: 'border-red-500', tooltip: 'Mudanças com 7 ou mais dias de atraso. Clique para filtrar.'},
              { label: 'Futuras', value: kpiGroups.Futuras.length, filter: {type: 'temporal', value: 'Futuras'}, color: 'border-green-500', tooltip: 'Mudanças planejadas para iniciar. Clique para filtrar.'},
              { label: 'Em Andamento', value: kpiGroups['Em Andamento'].length, filter: {type: 'temporal', value: 'Em Andamento'}, color: 'border-blue-500', tooltip: 'Mudanças na janela de execução ou que terminaram há menos de 7 dias. Clique para filtrar.'},
        ];

        kpis.forEach(kpi => kpiContainer.appendChild(createKpiCard(kpi.label, kpi.value, kpi.color, kpi.filter, tabId, kpi.breakdown, kpi.tooltip)));

        if (filteredChanges.length === 0) {
            const emptyState = document.createElement('p');
            emptyState.className = 'text-center text-slate-500 dark:text-slate-400 mt-8';
            emptyState.textContent = 'Nenhuma mudança encontrada para os filtros selecionados.';
            contentContainer.appendChild(emptyState);
            return;
        }
        
        for (const departmentName in groupedByHierarchy) {
            const departmentData = groupedByHierarchy[departmentName];
            const departmentAccordion = createAccordion('manager', departmentName, departmentData.count);
            const departmentContent = departmentAccordion.querySelector('.accordion-content');

            for (const superiorName in departmentData.secondaryGroups) {
                const superiorData = departmentData.secondaryGroups[superiorName];
                const superiorAccordion = createAccordion('coordinator', superiorName, superiorData.count);
                const superiorContent = superiorAccordion.querySelector('.accordion-content');

                superiorData.changes.forEach(m => superiorContent.appendChild(createChangeCard(m, true)));
                departmentContent.appendChild(superiorAccordion);
            }
            contentContainer.appendChild(departmentAccordion);
        }
    }

    function appendUnmatchedClassificationsNotice(container, unmatchedClassifications) {
        if (!container || !unmatchedClassifications) return;
        const entries = Object.entries(unmatchedClassifications)
            .sort((a, b) => a[0].localeCompare(b[0], 'pt-BR'));
        if (entries.length === 0) return;

        const notice = document.createElement('div');
        notice.className = 'mb-4 rounded-lg border border-amber-300 bg-amber-50 px-4 py-3 text-sm text-amber-800 dark:border-amber-500 dark:bg-amber-900/30 dark:text-amber-100';

        const title = document.createElement('p');
        title.className = 'font-semibold';
        title.textContent = 'Classificações sem aba associada';
        notice.appendChild(title);

        const description = document.createElement('p');
        description.className = 'mt-1';
        description.textContent = 'Registros com as classificações abaixo não serão exibidos até que sejam mapeados para uma aba. Consulte o console para o catálogo completo.';
        notice.appendChild(description);

        const list = document.createElement('ul');
        list.className = 'mt-2 list-disc list-inside space-y-1';
        entries.forEach(([label, count]) => {
            const item = document.createElement('li');
            item.textContent = `${label} (${count})`;
            list.appendChild(item);
        });
        notice.appendChild(list);

        container.appendChild(notice);
    }

    function catalogClassificationLabels(mudancas) {
        if (!Array.isArray(mudancas) || mudancas.length === 0) {
            return { counts: {}, unmatched: {} };
        }

        const counts = {};
        mudancas.forEach(change => {
            const rawLabel = typeof change.cr9ff_classificao === 'string' ? change.cr9ff_classificao.trim() : '';
            const label = rawLabel || 'Não informado';
            counts[label] = (counts[label] || 0) + 1;
        });

        const unmatched = {};
        Object.entries(counts).forEach(([label, count]) => {
            if (!isClassificationMapped(label)) {
                unmatched[label] = count;
            }
        });

        return { counts, unmatched };
    }

    function logClassificationCatalog(info) {
        if (!info || typeof console === 'undefined') return;
        const { counts, unmatched } = info;
        const groupLabel = 'Classificações encontradas (cr9ff_classificao)';
        const hasConsoleGroups = typeof console.groupCollapsed === 'function';
        if (hasConsoleGroups) {
            console.groupCollapsed(groupLabel);
        } else {
            console.log(groupLabel);
        }

        if (typeof console.table === 'function') {
            console.table(counts);
        } else {
            Object.entries(counts).forEach(([label, count]) => console.log(`${label}: ${count}`));
        }

        const unmatchedEntries = Object.entries(unmatched)
            .sort((a, b) => a[0].localeCompare(b[0], 'pt-BR'));
        if (unmatchedEntries.length > 0) {
            const warningMessage = 'Classificações sem correspondência de aba detectadas:';
            const unmatchedMap = Object.fromEntries(unmatchedEntries);
            if (typeof console.warn === 'function') {
                console.warn(warningMessage, unmatchedMap);
            } else {
                console.log(warningMessage, unmatchedMap);
            }
        }

        if (hasConsoleGroups) {
            console.groupEnd();
        }
    }

    function classificationMatchesTab(tabId, classification) {
        if (!classification) return false;
        const normalizedValue = normalizeClassification(classification);
        if (!normalizedValue) return false;
        const tabClassificationSet = NORMALIZED_TAB_CLASSIFICATION_LABELS[tabId];
        if (!tabClassificationSet) return false;
        return tabClassificationSet.has(normalizedValue);
    }

    function isClassificationMapped(classification) {
        const normalizedValue = normalizeClassification(classification);
        if (!normalizedValue) return false;
        return KNOWN_CLASSIFICATIONS.has(normalizedValue);
    }

    function normalizeClassification(label) {
        if (!label || typeof label !== 'string') return '';
        const trimmed = label.trim();
        if (!trimmed) return '';
        return trimmed
            .normalize('NFD')
            .replace(DIACRITICS_REGEX, '')
            .replace(/[^a-z0-9]/gi, '')
            .toLowerCase();
    }
    
    // --- FUNÇÕES DE CRIAÇÃO DE ELEMENTOS ---
    function createKpiCard(label, value, colorClass, filter, tabId, breakdown = null, tooltip = '') {
        const card = document.createElement('div');
        const isClickable = filter !== null;
        const isActive = state.activeFilters[tabId].type === filter.type && state.activeFilters[tabId].value === filter.value;
        
        card.className = `kpi-card bg-white dark:bg-slate-800 rounded-lg shadow p-5 ${colorClass} ${isClickable ? 'kpi-clickable' : ''} ${isActive ? 'active-filter' : ''} tooltip-container`;
        if (isClickable) {
            card.dataset.filter = JSON.stringify(filter);
        }

        let breakdownHtml = '';
        if (breakdown) {
            const totalBreakdown = Object.values(breakdown).reduce((sum, item) => sum + item.value, 0);
            if (totalBreakdown > 0) {
                const microChartSegments = Object.values(breakdown).map(item => {
                    const percentage = (item.value / totalBreakdown) * 100;
                    return `<div class="micro-chart-segment" style="width: ${percentage}%; background-color: ${item.color};" title="${item.value}"></div>`;
                }).join('');

                const breakdownLabels = Object.entries(breakdown).map(([key, item]) => {
                    const isSegmentActive = state.activeFilters[tabId].type === item.filter?.type && state.activeFilters[tabId].value === item.filter?.value;
                    const filterAttrs = item.filter ? `data-filter-type="${item.filter.type}" data-filter-value="${item.filter.value}"` : '';
                    return `<span class="breakdown-label ${isSegmentActive ? 'active' : ''}" ${filterAttrs}><span class="inline-block w-2 h-2 rounded-full mr-1" style="background-color: ${item.color};"></span>${key}</span>`;
                }).join('');

                breakdownHtml = `
                    <div class="mt-2 space-y-1">
                        <div class="micro-chart-bar">${microChartSegments}</div>
                        <div class="flex flex-wrap justify-between text-xs text-slate-500 dark:text-slate-400 gap-x-2">${breakdownLabels}</div>
                    </div>`;
            }
        }

        card.innerHTML = `
            <div class="flex justify-between items-start">
                <div>
                    <p class="text-sm text-slate-500 dark:text-slate-400">${label}</p>
                    <p class="text-3xl font-bold text-slate-900 dark:text-white">${value}</p>
                </div>
            </div>
            ${breakdownHtml}
            ${tooltip ? `<span class="tooltip-text">${tooltip}</span>` : ''}
        `;
        return card;
    }

    function createChangeCard(m, isTemporalView = false) {
        const card = document.createElement('div');
        card.className = 'change-card bg-white dark:bg-slate-800 rounded-lg shadow overflow-hidden relative';
        card.changeData = m;

        const now = new Date();
        const prioridade = getPriorityStyle(m.cr9ff_prioridade);
        const temporalCategoryName = getTemporalCategory(m, now);
        
        const categoryStyles = {
            'Atrasadas': { color: '#D32F2F', label: 'Atrasada' },
            'Em Andamento': { color: '#1976D2', label: 'Em Andamento' }, 
            'Amanhã': { color: '#388E3C', label: 'Amanhã' }, 
            'Esta Semana': { color: '#4CAF50', label: 'Esta Semana' },
            'Próxima Semana': { color: '#8BC34A', label: 'Próxima Semana' }, 
            'Futuras': { color: '#0097A7', label: 'Futura' }, 
            'Sem Data': { color: '#616161', label: 'Sem Data' }, 
            'Indefinida': { color: '#616161', label: 'Indefinida' }
        };
        
        const cardStyle = isTemporalView && categoryStyles[temporalCategoryName] ? categoryStyles[temporalCategoryName] : prioridade;
        card.style.borderLeftColor = cardStyle.borderColor || cardStyle.color;

        const statusHtml = isTemporalView && cardStyle.label
            ? `<div class="absolute top-3 right-3 text-xs font-bold text-white rounded-full px-2 py-1" style="background-color: ${cardStyle.color};">${cardStyle.label}</div>`
            : '';

        const priorityHtml = !isTemporalView 
            ? `<p class="text-sm font-semibold" style="color: ${prioridade.tagColor};">Prioridade: ${prioridade.text}</p>` 
            : '';
        
        card.innerHTML = `
            ${statusHtml}
            <div class="p-5 flex flex-col h-full">
                <div class="pb-3 mb-4">
                    <p class="text-xs text-slate-500 dark:text-slate-400">${m.cr9ff_nmero || 'N/A'}</p>
                    <h3 class="font-bold text-slate-800 dark:text-white">${m.cr9ff_descrioresumida || 'Descrição não disponível'}</h3>
                    ${priorityHtml}
                </div>
                <div class="grid grid-cols-2 gap-4 text-sm">
                    <div><p class="font-semibold text-slate-600 dark:text-slate-300">Período Planejado</p><p class="text-slate-800 dark:text-slate-200">${m['cr9ff_datadeincioplanejada@OData.Community.Display.V1.FormattedValue'] || 'N/A'} a<br>${m['cr9ff_datadetrminoplanejada@OData.Community.Display.V1.FormattedValue'] || 'N/A'}</p></div>
                    <div><p class="font-semibold text-slate-600 dark:text-slate-300">Solicitante</p><p class="text-slate-800 dark:text-slate-200">${m.cr9ff_solicitante || 'N/A'}</p></div>
                </div>
                <div class="mt-auto pt-4 text-right">
                    <button data-action="view-details" class="text-sm font-semibold text-blue-600 dark:text-blue-400 hover:underline">Ver Detalhes</button>
                </div>
            </div>`;
        return card;
    }

    function createAccordion(type, title, count) {
        const details = document.createElement('details');
        const bgClass = type === 'manager' ? 'bg-white dark:bg-slate-800 shadow-sm' : 'bg-slate-50 dark:bg-slate-700/50';
        const titleClass = type === 'manager' ? 'text-lg font-bold text-slate-800 dark:text-white' : 'font-semibold text-slate-700 dark:text-slate-200';
        const countBg = type === 'manager' ? 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200' : 'bg-slate-200 text-slate-600 dark:bg-slate-600 dark:text-slate-200';
        const countText = type === 'manager' ? `${count} mudanças` : `${count}`;
        const contentLayout = type === 'manager' ? 'space-y-4' : 'grid grid-cols-1 lg:grid-cols-2 gap-6';

        details.className = `${bgClass} rounded-lg`;
        if (type === 'manager') details.open = true;

        details.innerHTML = `
            <summary class="p-4 cursor-pointer flex justify-between items-center">
                <div class="flex items-center">
                    <svg class="arrow w-5 h-5 text-slate-500 dark:text-slate-400 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path></svg>
                    <h2 class="${titleClass}">${title}</h2>
                </div>
                <span class="text-sm font-bold ${countBg} rounded-full px-2.5 py-1">${countText}</span>
            </summary>
            <div class="accordion-content p-4 border-t border-slate-200 dark:border-slate-700 ${contentLayout}"></div>
        `;
        return details;
    }

    // --- FUNÇÕES DE PROCESSAMENTO DE DADOS (Helpers) ---
    function transformApiData(mudancas) {
      if (!Array.isArray(mudancas)) return [];
      return mudancas.map(m => {
        const newChange = { ...m };
        newChange.cr9ff_gerente = m['_cr9ff_gerente_1_value@OData.Community.Display.V1.FormattedValue'] ?? m['_cr9ff_gerente_2_value@OData.Community.Display.V1.FormattedValue'];
        newChange.cr9ff_coordenador = m['_cr9ff_coordenador_value@OData.Community.Display.V1.FormattedValue'];
        newChange.cr9ff_departamento = m['_cr9ff_departamento_value@OData.Community.Display.V1.FormattedValue'];
        newChange.cr9ff_solicitante = m.cr9ff_abertopor;
        return newChange;
      });
    }

    function getUserContext() {
        const userGreeting = document.getElementById('user-greeting');
        let currentUserName = 'Usuário Convidado';
        try {
            if (parent && parent.Xrm && parent.Xrm.Utility) {
                currentUserName = parent.Xrm.Utility.getGlobalContext().userSettings.userName;
            }
        } catch (e) {
            console.warn("Contexto externo não encontrado, usando nome de convidado.");
        }
        userGreeting.textContent = `Bem-vindo(a), ${currentUserName.split(' ')[0]}`;
    }

    function initTheme() {
        const themeToggleBtn = document.getElementById('theme-toggle-btn');
        const theme = localStorage.getItem('theme') || 'light';
        document.documentElement.classList.toggle('dark', theme === 'dark');
        const iconName = theme === 'dark' ? 'sun' : 'moon';
        themeToggleBtn.innerHTML = `<i data-lucide="${iconName}" class="h-5 w-5"></i>`;
        safeCreateIcons('atualização do tema');
    }
    
    function toggleTheme() {
        const isDark = document.documentElement.classList.contains('dark');
        localStorage.setItem('theme', isDark ? 'light' : 'dark');
        initTheme();
    }

    function groupData(data, primaryKey, secondaryKey) {
        const grouped = {};
        data.forEach(item => {
            const primaryGroup = item[primaryKey] || 'Departamento não especificado';
            if (!grouped[primaryGroup]) {
                grouped[primaryGroup] = { count: 0, secondaryGroups: {} };
            }

            const secondaryGroup = item[secondaryKey] || 'Superior não especificado';
            if (!grouped[primaryGroup].secondaryGroups[secondaryGroup]) {
                grouped[primaryGroup].secondaryGroups[secondaryGroup] = { count: 0, changes: [] };
            }
            
            grouped[primaryGroup].secondaryGroups[secondaryGroup].count++;
            grouped[primaryGroup].secondaryGroups[secondaryGroup].changes.push(item);
            grouped[primaryGroup].count++;
        });
        return grouped;
    }
    
    function mergeChangeDataWithChecklist(changes, checklistData) {
        if (!checklistData || checklistData.length === 0) return changes;
        const checklistMap = new Map(checklistData.map(item => [item['_cr9ff_numero_value@OData.Community.Display.V1.FormattedValue'], item]));
        return changes.map(change => {
            const checklist = checklistMap.get(change.cr9ff_nmero);
            if (checklist) {
                return { ...change, checklist };
            }
            return change;
        });
    }

    function getPriorityStyle(priorityText) {
      const p = (priorityText || '4').charAt(0);
      const styleMap = {
        '1': { text: 'Crítica', borderColor: '#D32F2F', tagColor: '#D32F2F' }, '2': { text: 'Alta', borderColor: '#FB8C00', tagColor: '#FB8C00' },
        '3': { text: 'Moderada', borderColor: '#1976D2', tagColor: '#1976D2' }, 'default': { text: 'Baixa', borderColor: '#388E3C', tagColor: '#388E3C' }
      };
      return styleMap[p] || styleMap['default'];
    }

    function parseDate(dateString) {
        if (!dateString || typeof dateString !== 'string') return null;
        const parts = dateString.match(/(\d{2})\/(\d{2})\/(\d{4})\s*(\d{2})?:?(\d{2})?/);
        if (!parts) return null;
        const day = parseInt(parts[1], 10), month = parseInt(parts[2], 10) - 1, year = parseInt(parts[3], 10);
        const hours = parts[4] ? parseInt(parts[4], 10) : 0, minutes = parts[5] ? parseInt(parts[5], 10) : 0;
        const date = new Date(year, month, day, hours, minutes);
        if (isNaN(date.getTime()) || date.getDate() !== day || date.getMonth() !== month) return null;
        return date;
    }

    function processAtivasData(mudancas) {
        if (!mudancas || !Array.isArray(mudancas)) return [];
        return mudancas.map(m => ({
            ...m,
            startDateObject: parseDate(m['cr9ff_datadeincioplanejada@OData.Community.Display.V1.FormattedValue']),
            endDateObject: parseDate(m['cr9ff_datadetrminoplanejada@OData.Community.Display.V1.FormattedValue'])
        }));
    }

    function diffInDays(date1, date2) {
        return Math.ceil(Math.abs(date2 - date1) / (1000 * 60 * 60 * 24));
    }

    function getTemporalCategory(mudanca, now) {
        const { startDateObject, endDateObject } = mudanca;
        if (!startDateObject || !endDateObject) return 'Sem Data';

        // Prioridade 1: Tarefas futuras
        if (now < startDateObject) {
            const nowDay = new Date(now.getFullYear(), now.getMonth(), now.getDate());
            const startDay = new Date(startDateObject.getFullYear(), startDateObject.getMonth(), startDateObject.getDate());
            const tomorrow = new Date(nowDay); tomorrow.setDate(tomorrow.getDate() + 1);
            if (startDay.getTime() === tomorrow.getTime()) return 'Amanhã';
            const endOfWeek = new Date(nowDay); endOfWeek.setDate(nowDay.getDate() + (6 - nowDay.getDay()));
            if (startDay <= endOfWeek) return 'Esta Semana';
            const endOfNextWeek = new Date(endOfWeek); endOfNextWeek.setDate(endOfWeek.getDate() + 7);
            if (startDay <= endOfNextWeek) return 'Próxima Semana';
            return 'Futuras';
        }

        // Prioridade 2: Tarefas que já passaram da data de término
        if (now > endDateObject) {
            const daysLate = diffInDays(now, endDateObject);
            if (daysLate >= 7) {
                return 'Atrasadas';
            }
        }
        
        // Prioridade 3: Tarefas dentro da janela de execução ou no período de "graça" (atraso < 7 dias)
        if (now >= startDateObject) {
            return 'Em Andamento';
        }
        
        return 'Indefinida';
    }
    
    function getMonthlyCategory(dateString) {
        if (!dateString) return 'Anteriores';
        const changeDate = new Date(dateString);
        const now = new Date();
        if (changeDate.getFullYear() === now.getFullYear() && changeDate.getMonth() === now.getMonth()) {
            return 'Este Mês';
        }
        const lastMonth = new Date();
        lastMonth.setMonth(lastMonth.getMonth() - 1);
        if (changeDate.getFullYear() === lastMonth.getFullYear() && changeDate.getMonth() === lastMonth.getMonth()) {
            return 'Mês Passado';
        }
        return 'Anteriores';
    }

    function countBy(data, keyGetter) {
        return data.reduce((acc, item) => {
            const key = keyGetter(item);
            acc[key] = (acc[key] || 0) + 1;
            return acc;
        }, {});
    }

    function applyActiveFilter(allChanges, activeFilter) {
        const now = new Date();
        return allChanges.filter(m => {
            switch (activeFilter.type) {
                case 'priority':
                    return getPriorityStyle(m.cr9ff_prioridade).text === activeFilter.value;
                case 'temporal':
                    const category = getTemporalCategory(processAtivasData([m])[0], now);
                    if (activeFilter.value === 'Atrasadas') return category === 'Atrasadas';
                    if (activeFilter.value === 'Futuras') return ['Amanhã', 'Esta Semana', 'Próxima Semana', 'Futuras'].includes(category);
                    return category === activeFilter.value;
                case 'checklist':
                    const hasChecklist = !!m.checklist;
                    return (activeFilter.value === 'Com Checklist') ? hasChecklist : !hasChecklist;
                case 'month':
                    return getMonthlyCategory(m.createdon) === activeFilter.value;
                default:
                    return true;
            }
        });
    }

    // --- FUNÇÕES DO MODAL ---
    function toggleModal(show) {
        const modal = document.getElementById('details-modal');
        const modalContent = document.getElementById('modal-content');
        if (show) {
            modal.classList.remove('opacity-0', 'pointer-events-none');
            modalContent.classList.remove('opacity-0', 'scale-95');
        } else {
            modal.classList.add('opacity-0');
            modalContent.classList.add('opacity-0', 'scale-95');
            setTimeout(() => modal.classList.add('pointer-events-none'), 300);
        }
    }

    function renderChecklistItem(label, value) {
        let iconHtml = '';
        let colorClass = 'text-slate-500 dark:text-slate-400';
        if (value === 'Sim') {
            iconHtml = `<i data-lucide="check-circle-2" class="h-5 w-5 text-green-500"></i>`;
            colorClass = 'text-slate-700 dark:text-slate-200';
        } else if (value === 'Não') {
            iconHtml = `<i data-lucide="x-circle" class="h-5 w-5 text-red-500"></i>`;
            colorClass = 'text-slate-700 dark:text-slate-200';
        } else {
            iconHtml = `<i data-lucide="minus-circle" class="h-5 w-5 text-slate-400"></i>`;
        }
        return `<div class="flex items-center gap-2"><div class="flex-shrink-0">${iconHtml}</div> <span class="${colorClass}">${label}</span></div>`;
    }

    function renderModalContent(change) {
        const modalContent = document.getElementById('modal-content');
        const checklist = change.checklist || {};
        
        const checklistItems = [
            { label: 'Plano de Implementação', value: checklist['cr9ff_planodeimplementacao@OData.Community.Display.V1.FormattedValue'] },
            { label: 'Plano de Rollback', value: checklist['cr9ff_planoderollback@OData.Community.Display.V1.FormattedValue'] },
            { label: 'Roteiro de Teste', value: checklist['cr9ff_roteirodeteste@OData.Community.Display.V1.FormattedValue'] },
            { label: 'Evidências de Teste', value: checklist['cr9ff_evidenciasdoteste@OData.Community.Display.V1.FormattedValue'] },
            { label: 'Aprovação da Homologação', value: checklist['cr9ff_aprovacaodahomologacao@OData.Community.Display.V1.FormattedValue'] },
            { label: 'Aprovação do Teste Realizado', value: checklist['cr9ff_aprovacaodotesterealizado@OData.Community.Display.V1.FormattedValue'] }
        ];

        const checklistHtml = checklistItems.map(item => renderChecklistItem(item.label, item.value)).join('');
        const qualidade = checklist['cr9ff_qualidadedainformacao@OData.Community.Display.V1.FormattedValue'] || 'N/A';
        const qualidadeColors = { 'Boa': 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200', 'Regular': 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200', 'Excelente': 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200', 'N/A': 'bg-slate-100 text-slate-800 dark:bg-slate-700 dark:text-slate-200' };

        modalContent.innerHTML = `
            <div class="p-6 border-b border-slate-200 dark:border-slate-700 flex justify-between items-start">
                <div>
                    <p class="text-sm text-slate-500 dark:text-slate-400">${change.cr9ff_nmero || 'N/A'}</p>
                    <h2 class="text-xl font-semibold text-slate-800 dark:text-white">${change.cr9ff_descrioresumida}</h2>
                </div>
                <button data-action="close-modal" class="p-2 rounded-full hover:bg-slate-100 dark:hover:bg-slate-700">
                    <i data-lucide="x" class="h-5 w-5 text-slate-500 dark:text-slate-400"></i>
                </button>
            </div>
            <div class="p-6 max-h-[70vh] overflow-y-auto space-y-6">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6 text-sm">
                    <div>
                        <h4 class="font-semibold text-slate-600 dark:text-slate-300 mb-2">Detalhes Principais</h4>
                        <div class="space-y-2">
                            <p><strong>Solicitante:</strong> ${change.cr9ff_solicitante || 'N/A'}</p>
                            <p><strong>Superior Imediato:</strong> ${change.cr9ff_gerente || 'N/A'}</p>
                            <p><strong>Coordenador:</strong> ${change.cr9ff_coordenador || 'N/A'}</p>
                            <p><strong>Departamento:</strong> ${change.cr9ff_departamento || 'N/A'}</p>
                            <p><strong>Item de Configuração:</strong> ${change.cr9ff_itemdeconfigurao || 'N/A'}</p>
                            <p><strong>Período:</strong> ${change['cr9ff_datadeincioplanejada@OData.Community.Display.V1.FormattedValue'] || 'N/A'} - ${change['cr9ff_datadetrminoplanejada@OData.Community.Display.V1.FormattedValue'] || 'N/A'}</p>
                        </div>
                    </div>
                    <div>
                        <h4 class="font-semibold text-slate-600 dark:text-slate-300 mb-2">Checklist de Prontidão</h4>
                        <div class="grid grid-cols-1 sm:grid-cols-2 gap-2">
                           ${checklistHtml}
                        </div>
                        <div class="mt-3">
                            <span class="text-xs font-medium mr-2">Qualidade da Info:</span>
                            <span class="px-2 py-0.5 rounded-full text-xs font-semibold ${qualidadeColors[qualidade] || qualidadeColors['N/A']}">${qualidade}</span>
                        </div>
                    </div>
                </div>
                <div class="text-sm">
                       <h4 class="font-semibold text-slate-600 dark:text-slate-300 mb-2">Descrição Completa</h4>
                       <p class="text-slate-700 dark:text-slate-300 whitespace-pre-wrap">${checklist.cr9ff_descricao || change.cr9ff_anlisederiscoeimpacto || 'Não informada.'}</p>
                </div>
            </div>
        `;
        safeCreateIcons('conteúdo do modal de detalhes');
    }
  })();
  </script>
</body>
</html>

