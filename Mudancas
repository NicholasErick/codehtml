<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Editor de Comunicados Avançado</title>
    <!-- Inclusão do Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Biblioteca para gerar XLSX -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>

    <!-- Fontes -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .selected-card {
            box-shadow: 0 0 0 2px #2563eb;
            border-color: #2563eb;
        }
        .control-panel::-webkit-scrollbar, .preview-area::-webkit-scrollbar {
            display: none;
        }
        .control-panel, .preview-area {
            -ms-overflow-style: none;  /* IE and Edge */
            scrollbar-width: none;  /* Firefox */
        }
        #email-preview-frame {
            width: 100%;
            height: 100%;
            border: none;
            border-radius: 0.5rem; /* rounded-lg */
            background-color: white;
        }
        .toolbar-button {
            width: 2.25rem; height: 2.25rem; display: flex; align-items: center; justify-content: center;
            border: 1px solid transparent; border-radius: 0.375rem; transition: background-color 0.2s;
            color: #d1d5db; background-color: #1f2937;
        }
        .toolbar-button:hover { background-color: #374151; }
        .toolbar-button.active { background-color: #2563eb; color: white; }
        
        .recipient-tag {
            background-color: #e0e7ff; color: #3730a3; padding: 0.25rem 0.75rem;
            border-radius: 9999px; display: inline-flex; align-items: center;
            font-size: 0.875rem; font-weight: 500; margin: 0.25rem;
        }
        .recipient-tag button { margin-left: 0.5rem; color: #4338ca; background: none; border: none; cursor: pointer; }
        .recipient-tag button:hover { color: #312e81; }
    </style>
</head>
<body class="bg-gray-100 text-gray-800">

    <div class="flex h-screen bg-gray-50">
        
        <!-- PAINEL DE CONTROLE (ESQUERDA) -->
        <aside class="control-panel w-full md:w-2/5 lg:w-1/3 h-screen flex flex-col bg-white border-r border-gray-200 p-6 overflow-y-auto">
            
            <header class="mb-6">
                <h1 class="text-2xl font-bold text-gray-900">Editor de Comunicados</h1>
                <p class="mt-1 text-sm text-gray-600">Selecione, edite e envie seu comunicado via Power Automate.</p>
            </header>

            <!-- Passo 1: Seleção de Template -->
            <section class="mb-6">
                <h2 class="text-lg font-semibold text-gray-700 mb-3">1. Escolha um Template</h2>
                <div id="template-cards-container" class="grid grid-cols-1 gap-3">
                    <!-- Cards de Template serão inseridos aqui pelo JS -->
                </div>
            </section>

            <!-- Seções dinâmicas que aparecem após seleção -->
            <div id="dynamic-content-area" class="hidden flex-grow flex flex-col">
                <section id="editor-section" class="flex-grow flex flex-col">
                    <h2 class="text-lg font-semibold text-gray-700 mb-3">2. Edite o Conteúdo</h2>
                    <div class="mb-4">
                        <label for="email-subject" class="block text-sm font-medium text-gray-700 mb-1">Assunto do E-mail</label>
                        <input type="text" id="email-subject" class="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 transition">
                    </div>
                    
                    <div class="mb-4 p-3 border rounded-md bg-gray-50">
                        <label for="toggle-observation-card" class="flex items-center justify-between cursor-pointer">
                            <span class="text-sm font-medium text-gray-700">Adicionar Observação Pontual?</span>
                            <div class="relative">
                                <input type="checkbox" id="toggle-observation-card" class="sr-only peer">
                                <div class="w-11 h-6 bg-gray-200 rounded-full peer peer-focus:ring-4 peer-focus:ring-blue-300 peer-checked:bg-blue-600"></div>
                                <div class="absolute top-[2px] left-[2px] bg-white border-gray-300 border rounded-full h-5 w-5 transition-all peer-checked:translate-x-full peer-checked:border-white"></div>
                            </div>
                        </label>
                    </div>

                    <div id="template-specific-options" class="mb-4"></div>

                    <div id="recipients-panel" class="mt-4">
                        <h2 class="text-lg font-semibold text-gray-700 mb-3">3. Destinatários e Anexos</h2>
                        <div class="rounded-md bg-gray-50 p-4 border">
                            <button id="manage-recipients-button" class="w-full mb-2 bg-gray-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-gray-700 transition-colors duration-300">Gerenciar Destinatários Fixos (Para)</button>
                            <div id="fixed-recipients-display" class="mt-2 text-sm text-gray-700">Nenhum destinatário fixo carregado.</div>
                            <div id="cc-recipients-display" class="mt-2 text-sm text-gray-700">Nenhum destinatário em cópia.</div>
                            
                            <div id="attachment-section">
                                <label id="attachment-label" for="attachment-input" class="block text-sm font-medium text-gray-700 mt-4">Anexar Arquivo (Opcional)</label>
                                <input type="file" id="attachment-input" class="mt-1 text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"/>
                            </div>
                             <div id="auto-attachment-section" class="hidden mt-4 text-sm">
                                 <p class="font-medium text-gray-700">Anexo Automático:</p>
                                 <div class="mt-1 flex items-center gap-2 text-green-700 bg-green-50 p-2 rounded-md border border-green-200">
                                     <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" /></svg>
                                     <span id="auto-attachment-filename" class="font-semibold"></span>
                                 </div>
                                 <p id="auto-attachment-note" class="mt-2 text-xs text-gray-600">Caso necessário, anexe um arquivo CSV manual acima para substituir este anexo automático.</p>
                                 <p id="auto-attachment-override" class="hidden mt-2 text-xs text-blue-700">CSV manual selecionado: <span id="csv-override-filename" class="font-semibold"></span>. Ele substituirá o anexo automático ao enviar.</p>
                             </div>
                        </div>
                    </div>

                    <div class="mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                        <p class="text-sm text-blue-800">
                            <strong class="font-semibold">Dica:</strong> Para editar, clique diretamente na área de visualização. Para formatar, selecione o texto desejado.
                        </p>
                    </div>
                </section>

                <section id="send-section" class="mt-6">
                    <h2 class="text-lg font-semibold text-gray-700 mb-3">4. Enviar Comunicado</h2>
                    <div class="rounded-md bg-gray-50 p-4 border">
                        <label for="test-mode-toggle" class="flex items-center cursor-pointer">
                            <input type="checkbox" id="test-mode-toggle" class="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500">
                            <span class="ml-2 text-sm font-semibold text-gray-700">Ativar Modo de Teste</span>
                        </label>
                    </div>
                    
                    <input type="hidden" id="power-automate-url" value="https://prod-76.westus.logic.azure.com:443/workflows/416859d347cd42e9bdae001d2f3caf04/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=gLZgIP7uqIjB0SYJlDCgLezyn_xpHr_prU_9roVsSgw">

                    <div class="flex items-center gap-4 mt-4">
                        <button id="send-button" class="w-full bg-blue-600 text-white font-bold py-2.5 px-4 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-300 disabled:bg-gray-400">
                            Enviar Comunicado
                        </button>
                    </div>
                    <div id="status-message" class="mt-3 text-sm font-medium text-center"></div>
                </section>
            </div>
        </aside>

        <!-- ÁREA DE PRÉ-VISUALIZAÇÃO (DIREITA) -->
        <main class="preview-area flex-grow h-screen p-6 overflow-y-auto flex items-center justify-center">
             <div class="w-full h-full max-w-3xl mx-auto shadow-lg relative">
                 <iframe id="email-preview-frame"></iframe>
             </div>
        </main>
    </div>
    
    <!-- Mini Toolbar para Edição de Texto -->
    <div id="text-format-toolbar" class="absolute hidden bg-gray-900 rounded-lg shadow-xl p-1 flex items-center gap-1 z-50 transition-opacity duration-150">
        <button data-command="bold" class="toolbar-button" title="Negrito"><svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M15.6 10.79c.97-.67 1.65-1.77 1.65-2.79 0-2.26-1.75-4-4-4H7v14h7.04c2.09 0 3.71-1.7 3.71-3.79 0-1.52-.86-2.82-2.15-3.42zM10 6.5h3c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-3v-3zm3.5 9H10v-3h3.5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5z"/></svg></button>
        <button data-command="italic" class="toolbar-button" title="Itálico"><svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M10 4v3h2.21l-3.42 8H6v3h8v-3h-2.21l3.42-8H18V4z"/></svg></button>
        <button data-command="underline" class="toolbar-button" title="Sublinhado"><svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M12 17c3.31 0 6-2.69 6-6V3h-2.5v8c0 1.93-1.57 3.5-3.5 3.5S8.5 12.93 8.5 11V3H6v8c0 3.31 2.69 6 6 6zm-7 2v2h14v-2H5z"/></svg></button>
        <button data-command="insertUnorderedList" class="toolbar-button" title="Lista (Marcadores)"><svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M4 10.5c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5zm0-6c-.83 0-1.5.67-1.5 1.5S3.17 7.5 4 7.5 5.5 6.83 5.5 6 4.83 4.5 4 4.5zm0 12c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5zM7 19h14v-2H7v2zm0-6h14v-2H7v2zm0-8v2h14V5H7z"/></svg></button>
    </div>

    <!-- Modais -->
    <div id="test-email-modal" class="fixed inset-0 bg-gray-800 bg-opacity-75 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-md">
            <h3 class="text-lg font-bold text-gray-900">Enviar E-mail de Teste</h3>
            <p class="text-sm text-gray-600 mt-2">Digite o(s) e-mail(s) de destino, separados por vírgula.</p>
            <input type="text" id="test-email-input" class="w-full p-2 border border-gray-300 rounded-md mt-4" placeholder="email1@exemplo.com">
            <div class="mt-6 flex justify-end gap-3">
                <button id="cancel-test-email" class="bg-gray-200 text-gray-700 font-bold py-2 px-4 rounded-lg hover:bg-gray-300">Cancelar</button>
                <button id="confirm-test-email" class="bg-blue-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-700">Enviar Teste</button>
            </div>
        </div>
    </div>
    
    <div id="confirm-send-modal" class="fixed inset-0 bg-gray-800 bg-opacity-75 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-md">
            <h3 id="confirm-send-title" class="text-lg font-bold text-gray-900">Confirmar Envio</h3>
            <p id="confirm-send-message" class="text-sm text-gray-600 mt-2"></p>
            <div class="mt-6 flex justify-end gap-3">
                <button id="cancel-send-btn" class="bg-gray-200 text-gray-700 font-bold py-2 px-4 rounded-lg hover:bg-gray-300">Cancelar</button>
                <button id="confirm-send-btn" class="bg-blue-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-700">Confirmar</button>
            </div>
        </div>
    </div>

    <div id="fixed-recipients-modal" class="fixed inset-0 bg-gray-800 bg-opacity-75 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-2xl">
            <h3 class="text-lg font-bold text-gray-900">Gerenciar Destinatários Fixos (Para)</h3>
            <div class="mt-4 p-3 border rounded-md min-h-[128px] max-h-64 overflow-y-auto bg-gray-50" id="recipient-tags-container"></div>
            <div class="mt-4">
                <label for="add-recipient-input" class="block text-sm font-medium text-gray-700">Adicionar novo e-mail</label>
                <div class="mt-1 flex gap-2">
                    <input type="email" id="add-recipient-input" class="flex-grow p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500" placeholder="nome@exemplo.com">
                    <button id="add-recipient-btn" class="bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-blue-700">Adicionar</button>
                </div>
                <p id="recipient-error-message" class="text-red-600 text-sm mt-1 h-4"></p>
            </div>
            <div class="mt-6 flex justify-between items-center">
                <button id="load-default-recipients-btn" class="text-sm text-blue-600 hover:underline">Carregar lista padrão</button>
                <div class="flex gap-3">
                    <button id="cancel-edit-recipients" class="bg-gray-200 text-gray-700 font-bold py-2 px-4 rounded-lg hover:bg-gray-300">Cancelar</button>
                    <button id="save-recipients-btn" class="bg-blue-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-700">Salvar</button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Loading Overlay -->
    <div id="loading-overlay" class="fixed inset-0 bg-gray-800 bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="flex items-center space-x-3 bg-white p-4 rounded-lg shadow-lg">
            <svg class="animate-spin h-5 w-5 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            <span class="text-gray-700 font-semibold">Carregando dados...</span>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // ===================================================================================
            // CONSTANTES E CONFIGURAÇÕES GLOBAIS
            // ===================================================================================
            const DEFAULT_EMAILS_APROVADAS = 'mara.lassabia@assai.com.br;fernando.mazzei@assai.com.br;fabio.benevento@assai.com.br;nelson.alves@assai.com.br;eduardo.nader@assai.com.br;tiago.pichelli@assai.com.br;elcio.kamei@assai.com.br;felipe.nemeth@assai.com.br;laercio.junior@assai.com.br;raphael.fusco@assai.com.br;marilia.scatena@assai.com.br;dennys.araujo@assai.com.br;claudia.lima@assai.com.br;denis.paiotti@assai.com.br;fabricio.rosa@assai.com.br;gabriela.graciano@assai.com.br;daniel.ribeiro@assai.com.br;luis.ramalho@assai.com.br;silas.souza@assai.com.br;carlos.negron@assai.com.br;yam.trigueiro@assai.com.br;leonardo.filho@assai.com.br;paulo.ribeiro@assai.com.br;magno.silva@assai.com.br;francisco.neto@assai.com.br;washington.santos@assai.com.br;joao.filho2@assai.com.br;michele.silva2@assai.com.br;paulo.rodrigues@assai.com.br;elisabete.brandao@assai.com.br;luis.silva@assai.com.br;renato.yamamoto@assai.com.br;tiago.bello@assai.com.br;elaine.silva2@assai.com.br;marcela.silva2@assai.com.br;maria.dias@assai.com.br;renato.viana@assai.com.br;sandra.santos@assai.com.br;celso.motta@assai.com.br;gilberto.caray@assai.com.br;cassio.rodrigues@assai.com.br;ti.qualidade@assai.com.br;valdinei.ribeiro@assai.com.br;jhonatas.rabelo@assai.com.br;elton.nascimento@assai.com.br;eduardo.silva@assai.com.br;bruno.mota@assai.com.br;raphael.toniolo@assai.com.br;bruno.zanardo@assai.com.br;kevin.faria@assai.com.br;gabriel.guarriero@assai.com.br;abdiel.silva@assai.com.br;rafael.ueti@assai.com.br;jefferson.souza1@assai.com.br;mateus.silva@assai.com.br';
            const DEFAULT_EMAILS_PREVIA = '"Eduardo Nader" <eduardo.nader@assai.com.br>; "TIAGO PICHELLI" <tiago.pichelli@assai.com.br>; "Elcio Mitsuo Kamei" <elcio.kamei@assai.com.br>; "FELIPE FERNANDES NEMETH" <felipe.nemeth@assai.com.br>; "LAERCIO RODRIGUES DE QUEIROZ JUNIOR" <laercio.junior@assai.com.br>; "Raphael Fusco Martins" <raphael.fusco@assai.com.br>; "Marilia Gonzalez Ferreira Scatena" <marilia.scatena@assai.com.br>; "CLAUDIA CORDEIRO DE LIMA" <claudia.lima@assai.com.br>; "GABRIELA GRACIANO" <gabriela.graciano@assai.com.br>; "DANIEL ESTEVES RIBEIRO" <daniel.ribeiro@assai.com.br>; "YAM DOS SANTOS TRIGUEiro" <yam.trigueiro@assai.com.br>; "LEONARDO SANTINI MORETO FILHO" <leonardo.filho@assai.com.br>; "MICHELE APARECIDA MENDONCA DA SILVA" <michele.silva2@assai.com.br>; "ELISABETE BORGES BRANDAO" <elisabete.brandao@assai.com.br>; "LUIS FABIANO BERNARDES DA SILVA" <luis.silva@assai.com.br>; "RENATO MASAHICO YAMAMOTO" <renato.yamamoto@assai.com.br>; "Elaine Talita Domiciano Da Silva" <elaine.silva2@assai.com.br>; "MARCELA FELIX LUNA DA SILVA" <marcela.silva2@assai.com.br>; "CASSIO PAIVA RODRIGUES" <cassio.rodrigues@assai.com.br>; "TI Qualidade" <ti.qualidade@assai.com.br>;valdinei.ribeiro@assai.com.br;jhonatas.rabelo@assai.com.br;elton.nascimento@assai.com.br;eduardo.silva@assai.com.br;bruno.mota@assai.com.br;raphael.toniolo@assai.com.br;bruno.zanardo@assai.com.br;kevin.faria@assai.com.br;gabriel.guarriero@assai.com.br;abdiel.silva@assai.com.br;rafael.ueti@assai.com.br;jefferson.souza1@assai.com.br;mateus.silva@assai.com.br';
            
            // Objeto principal que define os templates disponíveis na aplicação.
            const templates = {
                // ===================================================================================
                // TEMPLATE 1: RELATÓRIO DE ATRASOS POR HIERARQUIA
                // ===================================================================================
                 'relatorio-atrasos-hierarquia': {
                    id: 'relatorio-atrasos-hierarquia',
                    title: "Relatório de Atrasos por Hierarquia",
                    description: "Análise de mudanças atrasadas em execução, com KPIs, agrupada por Departamento e Superior.",
                    bannerUrl: "https://i.ibb.co/kVxkMxQ4/7.png",
                    emailTitle: "Análise de Mudanças Atrasadas por Hierarquia",
                    subject: "Relatório Semanal: Atrasos por Hierarquia (em Execução)",
                    apiUrl: 'https://f9de0ae4d0f6e2fd9223eb9d948f40.0e.environment.api.powerplatform.com:443/powerautomate/automations/direct/workflows/1371f4c89025411fac91fb7b8dd6ee79/triggers/manual/paths/invoke?api-version=1&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=MtxkUjXxGdY0zKsTi5opzjqcFx2oG5hM3vuBz1Zgdjk',
                    // Função principal que orquestra a busca, processamento e geração do conteúdo.
                    async generate() {
                        const todasAsMudancas = await fetchApiData(this.apiUrl);
                        const { mudancasAtrasadas, metricas, gruposHierarquicos, emailsDosSuperiores, emailsCc } = processarDadosDeAtraso(todasAsMudancas);
                        const htmlBody = generateAtrasosHtmlBody(gruposHierarquicos, metricas);
                        const attachment = generateAtrasosXLSX(mudancasAtrasadas);
                        const subject = `${this.subject} - ${metricas.totalAtrasadas} Mudanças Atrasadas`;
                        return { htmlBody, attachment, subject, emailsDosSuperiores: Array.from(emailsDosSuperiores), emailsCc: Array.from(emailsCc) };
                    },
                },
                // ===================================================================================
                // TEMPLATE 2: RELATÓRIO DE MUDANÇAS APROVADAS (REPORT)
                // ===================================================================================
                'relatorio-aprovadas': {
                    id: 'relatorio-aprovadas',
                    title: "Relatório - Mudanças Aprovadas (Report)",
                    description: "Gera o relatório de mudanças aprovadas, com base no status 'Report'.",
                    bannerUrl: "https://i.ibb.co/35WhXyGF/6.png",
                    emailTitle: "Relatório de Mudanças Aprovadas",
                    subject: "Relatório de Mudanças Aprovadas",
                    apiUrl: 'https://f9de0ae4d0f6e2fd9223eb9d948f40.0e.environment.api.powerplatform.com:443/powerautomate/automations/direct/workflows/1371f4c89025411fac91fb7b8dd6ee79/triggers/manual/paths/invoke?api-version=1&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=MtxkUjXxGdY0zKsTi5opzjqcFx2oG5hM3vuBz1Zgdjk',
                    defaultEmails: DEFAULT_EMAILS_APROVADAS,
                    async generate() {
                        const todasAsMudancas = await fetchApiData(this.apiUrl);
                        const mudancasFiltradas = todasAsMudancas.filter(m => m.cr9ff_classificao === 'Report');
                        const { gruposHierarquicos, emailsDosSuperiores, emailsCc } = processarDadosGenerico(mudancasFiltradas);
                        const htmlBody = generateComiteHtmlBody(gruposHierarquicos, { tipo: 'aprovadas' });
                        const attachment = generateGenericXLSX(mudancasFiltradas, "Mudancas_Aprovadas.xlsx");
                        const subject = `${this.subject} - ${mudancasFiltradas.length} Mudanças`;
                        
                        const defaultEmails = cleanEmailString(this.defaultEmails);
                        const finalEmailsPara = new Set([...defaultEmails, ...emailsDosSuperiores]);

                        return { htmlBody, attachment, subject, emailsDosSuperiores: Array.from(finalEmailsPara), emailsCc: Array.from(emailsCc) };
                    }
                },
                // ===================================================================================
                // TEMPLATE 3: PRÉVIA DO COMITÊ
                // ===================================================================================
                'previa-comite': {
                    id: 'previa-comite',
                    title: "Prévia do Comitê de Mudanças",
                    description: "Gera a prévia para o comitê, com base no status 'Comite'.",
                    bannerUrl: "https://i.ibb.co/NdQL5fTW/8.png",
                    emailTitle: "Prévia do Comitê de Mudanças",
                    subject: "Prévia do Comitê de Mudanças",
                    apiUrl: 'https://f9de0ae4d0f6e2fd9223eb9d948f40.0e.environment.api.powerplatform.com:443/powerautomate/automations/direct/workflows/1371f4c89025411fac91fb7b8dd6ee79/triggers/manual/paths/invoke?api-version=1&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=MtxkUjXxGdY0zKsTi5opzjqcFx2oG5hM3vuBz1Zgdjk',
                    needsTeamsUrl: true, // Flag para a UI
                    defaultEmails: DEFAULT_EMAILS_PREVIA,
                    async generate() {
                        const todasAsMudancas = await fetchApiData(this.apiUrl);
                        const mudancasFiltradas = todasAsMudancas.filter(m => m.cr9ff_classificao === 'Comite');
                        const { gruposHierarquicos, emailsDosSuperiores, emailsCc } = processarDadosGenerico(mudancasFiltradas);
                        const htmlBody = generateComiteHtmlBody(gruposHierarquicos, { tipo: 'previa' });
                        const attachment = generateGenericXLSX(mudancasFiltradas, "Previa_Comite.xlsx");
                        const subject = `${this.subject} - ${mudancasFiltradas.length} Mudanças para Análise`;
                        
                        const defaultEmails = cleanEmailString(this.defaultEmails);
                        const finalEmailsPara = new Set([...defaultEmails, ...emailsDosSuperiores]);
                        
                        return { htmlBody, attachment, subject, emailsDosSuperiores: Array.from(finalEmailsPara), emailsCc: Array.from(emailsCc) };
                    }
                },
            };
            
            // --- Variáveis de Estado e Seletores de DOM ---
            const dynamicContentArea = document.getElementById('dynamic-content-area');
            const templateCardsContainer = document.getElementById('template-cards-container');
            const emailSubjectInput = document.getElementById('email-subject');
            const sendButton = document.getElementById('send-button');
            const statusMessage = document.getElementById('status-message');
            const previewFrame = document.getElementById('email-preview-frame');
            const toolbar = document.getElementById('text-format-toolbar');
            const attachmentInput = document.getElementById('attachment-input');
            const attachmentLabel = document.getElementById('attachment-label');
            const attachmentSection = document.getElementById('attachment-section');
            const autoAttachmentSection = document.getElementById('auto-attachment-section');
            const autoAttachmentFilename = document.getElementById('auto-attachment-filename');
            const autoAttachmentNote = document.getElementById('auto-attachment-note');
            const autoAttachmentOverride = document.getElementById('auto-attachment-override');
            const csvOverrideFilename = document.getElementById('csv-override-filename');
            const defaultAttachmentLabel = attachmentLabel ? attachmentLabel.textContent : '';
            const autoAttachmentNoteDefault = autoAttachmentNote ? autoAttachmentNote.textContent : '';
            const testModeToggle = document.getElementById('test-mode-toggle');
            const loadingOverlay = document.getElementById('loading-overlay');
            const templateSpecificOptionsContainer = document.getElementById('template-specific-options');
            const toggleObservationCard = document.getElementById('toggle-observation-card');
            
            // Modais
            const testEmailModal = document.getElementById('test-email-modal');
            const testEmailInput = document.getElementById('test-email-input');
            const cancelTestEmailBtn = document.getElementById('cancel-test-email');
            const confirmTestEmailBtn = document.getElementById('confirm-test-email');
            const confirmSendModal = document.getElementById('confirm-send-modal');
            const confirmSendTitle = document.getElementById('confirm-send-title');
            const confirmSendMessage = document.getElementById('confirm-send-message');
            const cancelSendBtn = document.getElementById('cancel-send-btn');
            const fixedRecipientsModal = document.getElementById('fixed-recipients-modal');
            const fixedRecipientsDisplay = document.getElementById('fixed-recipients-display');
            const ccRecipientsDisplay = document.getElementById('cc-recipients-display');
            
            let selectedTemplateCard = null;
            let fixedRecipients = new Set();
            let ccRecipients = new Set();
            let generatedAttachment = null;
            let csvOverrideActive = false;
            let tempFixedRecipients = new Set();

            // --- Inicialização ---
            Object.keys(templates).forEach(id => {
                const template = templates[id];
                const card = document.createElement('div');
                card.className = "template-card bg-white p-4 rounded-lg border border-gray-200 cursor-pointer hover:border-blue-500 transition-all duration-200";
                card.dataset.templateId = id;
                card.innerHTML = `<h3 class="font-bold text-md text-gray-800">${template.title}</h3><p class="text-sm text-gray-500 mt-1">${template.description}</p>`;
                card.addEventListener('click', handleTemplateSelection);
                templateCardsContainer.appendChild(card);
            });

            previewFrame.srcdoc = `<body style="font-family: Inter, sans-serif; display: flex; align-items: center; justify-content: center; height: 100%; color: #9ca3af; text-align: center; padding: 2rem;">Selecione um template para iniciar.</body>`;
            sendButton.addEventListener('click', prepareSendConfirmation);
            toolbar.addEventListener('mousedown', handleToolbarClick);
            cancelTestEmailBtn.addEventListener('click', () => testEmailModal.classList.add('hidden'));
            confirmTestEmailBtn.addEventListener('click', handleConfirmTestEmail);
            cancelSendBtn.addEventListener('click', () => confirmSendModal.classList.add('hidden'));
            toggleObservationCard.addEventListener('change', handleToggleObservation);
            attachmentInput.addEventListener('change', handleAttachmentInputChange);
            updateAutoAttachmentIndicator();


            // --- Lógica Principal ---
            function isCsvFile(file) {
                return !!file && /\.csv$/i.test(file.name);
            }

            function readFileAsBase64(file) {
                return new Promise((resolve, reject) => {
                    const reader = new FileReader();
                    reader.onload = () => {
                        const result = reader.result;
                        if (typeof result === 'string') {
                            const [, base64Content = ''] = result.split(',');
                            if (base64Content) {
                                resolve(base64Content);
                                return;
                            }
                        }
                        reject(new Error('Erro ao processar o arquivo selecionado.'));
                    };
                    reader.onerror = () => reject(reader.error || new Error('Falha ao ler o arquivo selecionado.'));
                    reader.readAsDataURL(file);
                });
            }

            function updateAutoAttachmentIndicator() {
                if (!autoAttachmentSection) return;

                if (!generatedAttachment) {
                    autoAttachmentSection.classList.add('hidden');
                    if (autoAttachmentNote) autoAttachmentNote.classList.add('hidden');
                    if (autoAttachmentOverride) autoAttachmentOverride.classList.add('hidden');
                    if (csvOverrideFilename) csvOverrideFilename.textContent = '';
                    if (attachmentLabel) attachmentLabel.textContent = defaultAttachmentLabel;
                    csvOverrideActive = false;
                    if (autoAttachmentNote && autoAttachmentNoteDefault) {
                        autoAttachmentNote.textContent = autoAttachmentNoteDefault;
                    }
                    return;
                }

                autoAttachmentFilename.textContent = generatedAttachment.filename;
                autoAttachmentSection.classList.remove('hidden');

                if (attachmentLabel) {
                    attachmentLabel.textContent = 'Substituir anexo automático por CSV (Opcional)';
                }

                if (csvOverrideActive) {
                    if (autoAttachmentNote) autoAttachmentNote.classList.add('hidden');
                    if (autoAttachmentOverride) autoAttachmentOverride.classList.remove('hidden');
                } else {
                    if (autoAttachmentOverride) autoAttachmentOverride.classList.add('hidden');
                    if (csvOverrideFilename) csvOverrideFilename.textContent = '';
                    if (autoAttachmentNote) {
                        autoAttachmentNote.textContent = autoAttachmentNoteDefault;
                        autoAttachmentNote.classList.remove('hidden');
                    }
                }
            }

            function handleAttachmentInputChange() {
                const file = attachmentInput.files[0];
                const csvSelected = isCsvFile(file);

                if (generatedAttachment && csvSelected) {
                    csvOverrideActive = true;
                    if (csvOverrideFilename) csvOverrideFilename.textContent = file.name;
                } else {
                    if (csvOverrideFilename && csvOverrideActive) {
                        csvOverrideFilename.textContent = '';
                    }
                    csvOverrideActive = false;
                }

                if (autoAttachmentNote && autoAttachmentNoteDefault) {
                    autoAttachmentNote.textContent = autoAttachmentNoteDefault;
                }

                updateAutoAttachmentIndicator();
            }

            async function handleTemplateSelection(event) {
                const card = event.currentTarget;
                if (selectedTemplateCard) selectedTemplateCard.classList.remove('selected-card');
                card.classList.add('selected-card');
                selectedTemplateCard = card;
                
                const templateId = card.dataset.templateId;
                const template = templates[templateId];

                // Reset e UI updates
                dynamicContentArea.classList.remove('hidden');
                attachmentInput.value = '';
                toggleObservationCard.checked = false;
                generatedAttachment = null;
                csvOverrideActive = false;
                handleAttachmentInputChange();
                attachmentSection.classList.remove('hidden');
                emailSubjectInput.value = template.subject;
                fixedRecipients = new Set();
                ccRecipients = new Set();
                updateFixedRecipientsDisplay();
                updateCcRecipientsDisplay();
                updateTemplateSpecificOptions(template);
                
                showStatus('Carregando template...', 'loading');
                
                if (typeof template.generate === 'function') {
                    loadingOverlay.classList.remove('hidden');
                    try {
                        const result = await template.generate();
                        updatePreview(result.htmlBody);
                        emailSubjectInput.value = result.subject;
                        
                        if (result.emailsDosSuperiores && Array.isArray(result.emailsDosSuperiores)) {
                            fixedRecipients = new Set(result.emailsDosSuperiores);
                            updateFixedRecipientsDisplay();
                        }

                        if (result.emailsCc && Array.isArray(result.emailsCc)) {
                            ccRecipients = new Set(result.emailsCc);
                            updateCcRecipientsDisplay();
                        }
                        
                        if (result.attachment) {
                            generatedAttachment = result.attachment;
                            csvOverrideActive = false;
                            updateAutoAttachmentIndicator();
                        }
                        showStatus('Template carregado. Pronto para editar.', 'success');
                    } catch (error) {
                        const errorMessage = `Erro ao gerar relatório: ${error.message}`;
                        updatePreview(`<div style="text-align:center; color:#dc2626; padding:40px;">${errorMessage}</div>`);
                        showStatus(errorMessage, 'error');
                    } finally {
                        loadingOverlay.classList.add('hidden');
                    }
                } else {
                    updatePreview(template.body);
                    showStatus('Template carregado. Pronto para editar.', 'success');
                }
            }
            
            function updateTemplateSpecificOptions(template) {
                templateSpecificOptionsContainer.innerHTML = '';
                if (template.needsTeamsUrl) {
                    templateSpecificOptionsContainer.innerHTML = `
                        <div class="mb-4">
                            <label for="teams-url-input" class="block text-sm font-medium text-gray-700 mb-1">URL da Reunião do Teams</label>
                            <input type="url" id="teams-url-input" class="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 transition" placeholder="https://teams.microsoft.com/...">
                        </div>`;
                }
            }
            
            function updateFixedRecipientsDisplay() {
                fixedRecipientsDisplay.textContent = fixedRecipients.size === 0
                    ? 'Nenhum destinatário (Para) definido.'
                    : `${fixedRecipients.size} destinatário(s) em 'Para' definido(s).`;
            }

            function updateCcRecipientsDisplay() {
                ccRecipientsDisplay.textContent = ccRecipients.size === 0
                    ? 'Nenhum destinatário em cópia (Cc).'
                    : `${ccRecipients.size} destinatário(s) em 'Cc' adicionado(s) automaticamente.`;
            }

            function updatePreview(initialBody) {
                let bodyContent = initialBody;
                if (!bodyContent && previewFrame.contentWindow.document.getElementById('email-body-content')) {
                    bodyContent = previewFrame.contentWindow.document.getElementById('email-body-content').innerHTML;
                }
                previewFrame.srcdoc = buildEmailHtml(bodyContent || '', true);
                previewFrame.onload = setupIframeEditor;
            }

            function setupIframeEditor() {
                const doc = previewFrame.contentWindow.document;
                if (!doc) return;
                doc.addEventListener('selectionchange', handleTextSelection);
                doc.addEventListener('blur', () => { if (!toolbar.matches(':hover')) toolbar.classList.add('hidden'); });

                const observationCard = doc.getElementById('additional-observation-card');
                if (observationCard) {
                    const placeholderText = `<p style="margin:0; font-family: 'Segoe UI', Arial, sans-serif; color: #9ca3af;">Clique aqui para adicionar sua observação...</p>`;
                    
                    observationCard.addEventListener('focus', () => {
                        if (observationCard.innerHTML.trim() === placeholderText) {
                            observationCard.innerHTML = '<p><br></p>'; 
                        }
                    });

                    observationCard.addEventListener('blur', () => {
                        if (observationCard.innerHTML.trim() === '' || observationCard.innerHTML.trim() === '<p><br></p>') {
                            observationCard.innerHTML = placeholderText;
                        }
                    });
                }
            }

            function handleToggleObservation() {
                const doc = previewFrame.contentWindow.document;
                if (!doc) return;
                const observationCard = doc.getElementById('additional-observation-card');
                if (!observationCard) return;

                if (toggleObservationCard.checked) {
                    observationCard.style.display = 'block';
                    observationCard.focus();
                } else {
                    observationCard.style.display = 'none';
                }
            }


            function handleTextSelection() {
                const selection = previewFrame.contentWindow.getSelection();
                if (!selection || selection.isCollapsed) {
                    toolbar.classList.add('hidden');
                    return;
                }
                updateToolbarState();
                const range = selection.getRangeAt(0);
                const rect = range.getBoundingClientRect();
                const frameRect = previewFrame.getBoundingClientRect();
                toolbar.style.top = `${frameRect.top + rect.top - toolbar.offsetHeight - 8 + window.scrollY}px`;
                toolbar.style.left = `${frameRect.left + rect.left + (rect.width - toolbar.offsetWidth) / 2 + window.scrollX}px`;
                toolbar.classList.remove('hidden');
            }

            function updateToolbarState() {
                const doc = previewFrame.contentWindow.document;
                toolbar.querySelectorAll('button[data-command]').forEach(button => {
                    button.classList.toggle('active', doc.queryCommandState(button.dataset.command));
                });
            }

            function handleToolbarClick(e) {
                e.preventDefault();
                const button = e.target.closest('button');
                if (!button) return;
                previewFrame.contentWindow.document.execCommand(button.dataset.command, false, null);
                updateToolbarState();
            }

            function buildEmailHtml(bodyContent, isEditable = false) {
                 if (!selectedTemplateCard) return '';
                const templateId = selectedTemplateCard.dataset.templateId;
                const template = templates[templateId];
                const editableAttribute = isEditable ? `contenteditable="true"` : '';
                
                // Construção do HTML do e-mail usando tabelas para máxima compatibilidade (Outlook).
                return `<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><meta name="viewport" content="width=device-width, initial-scale=1.0"/><title>${template.emailTitle}</title><!--[if mso]><xml><o:OfficeDocumentSettings><o:AllowPNG/><o:PixelsPerInch>96</o:PixelsPerInch></o:OfficeDocumentSettings></xml><![endif]--><style type="text/css">table { border-collapse: collapse; mso-table-lspace: 0pt; mso-table-rspace: 0pt; } td, a, span { font-family: 'Segoe UI', Arial, sans-serif !important; } [contenteditable] { outline: none; }</style></head><body width="100%" style="margin: 0; padding: 0 !important; mso-line-height-rule: exactly; background-color: #F8F8F8;"><center style="width: 100%; background-color: #F8F8F8;"><!--[if mso | IE]><table role="presentation" border="0" cellpadding="0" cellspacing="0" width="600" align="center" style="width:600px;"><tr><td style="line-height:0px;font-size:0px;mso-line-height-rule:exactly;"><![endif]--><div style="max-width:600px;margin:0 auto;"><table role="presentation" border="0" cellpadding="0" cellspacing="0" width="100%" align="center" style="background-color:#FFFFFF;"><tr><td align="center"><img alt="Banner" src="${template.bannerUrl}" width="600" style="width:100%; max-width:600px; display:block; border:0; height: auto;"></td></tr><tr><td style="padding: 32px;"><table role="presentation" border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td><h2 style="margin:0 0 24px 0;font-size:22px;color:#333333;font-weight:700; font-family: 'Segoe UI', Arial, sans-serif;" ${editableAttribute}>${template.emailTitle}</h2><div id="email-body-content" ${editableAttribute}>${bodyContent}</div></td></tr></table></td></tr><tr><td style="background-color:#F0F0F0; text-align:center; padding:16px 20px;"><p style="font-size:11px;color:#777777;margin:0; font-family: 'Segoe UI', Arial, sans-serif;">Esta é uma comunicação automática.</p></td></tr></table></div><!--[if mso | IE]></td></tr></table><![endif]--></center></body></html>`;
            }

            function generateFinalHtml() {
                toolbar.classList.add('hidden');
                const doc = previewFrame.contentWindow.document;
                const bodyClone = doc.getElementById('email-body-content').cloneNode(true);

                const observationCard = bodyClone.querySelector('#additional-observation-card');
                if (observationCard) {
                    const placeholderText = "Clique aqui para adicionar sua observação...";
                    if (toggleObservationCard.checked && observationCard.textContent.trim() !== placeholderText && observationCard.textContent.trim() !== "") {
                        const observationContent = observationCard.innerHTML;
                        const observationHtml = `<table role="presentation" border="0" cellpadding="0" cellspacing="0" width="100%" style="margin-bottom: 24px;"><tr><td style="background-color: #eff6ff; border-left: 4px solid #3b82f6; padding: 16px; border-radius: 4px;"><p style="margin: 0; font-size: 13px; font-family: 'Segoe UI', Arial, sans-serif; color: #1e3a8a; line-height: 1.6;"><strong style="color: #1d4ed8;">Mensagem Adicional:</strong><br>${observationContent}</p></td></tr></table>`;
                        const tempDiv = document.createElement('div');
                        tempDiv.innerHTML = observationHtml;
                        observationCard.parentNode.replaceChild(tempDiv.firstChild, observationCard);
                    } else {
                        observationCard.parentNode.removeChild(observationCard);
                    }
                }
                
                let finalBodyContent = bodyClone.innerHTML;

                const templateId = selectedTemplateCard.dataset.templateId;
                if(templates[templateId].needsTeamsUrl) {
                    const teamsUrlInput = document.getElementById('teams-url-input');
                    const teamsUrl = teamsUrlInput ? teamsUrlInput.value.trim() : '';
                    const teamsButtonHtml = teamsUrl ? generateTeamsButtonHtml(teamsUrl) : '';
                    finalBodyContent = finalBodyContent.replace('%%TEAMS_BUTTON%%', teamsButtonHtml);
                }

                const finalTitle = doc.querySelector('h2').innerHTML;
                const finalHtml = buildEmailHtml(finalBodyContent, false);
                return finalHtml.replace(/<h2[^>]*>.*?<\/h2>/, `<h2 style="margin:0 0 24px 0;font-size:22px;color:#333333;font-weight:700; font-family: 'Segoe UI', Arial, sans-serif;">${finalTitle}</h2>`);
            }
            
            function prepareSendConfirmation() {
                const toCount = fixedRecipients.size;
                const ccCount = ccRecipients.size;
                if (testModeToggle.checked) {
                    confirmSendTitle.textContent = "Enviar E-mail de Teste";
                    confirmSendMessage.textContent = "Insira os e-mails de teste no próximo passo.";
                } else {
                    confirmSendTitle.textContent = "Confirmar Envio Oficial";
                    confirmSendMessage.textContent = `Você está prestes a enviar para ${toCount} destinatário(s) em 'Para' e ${ccCount} em 'Cópia'. Confirma?`;
                }
                confirmSendModal.classList.remove('hidden');
                const currentBtn = document.getElementById('confirm-send-btn');
                const newBtn = currentBtn.cloneNode(true);
                currentBtn.parentNode.replaceChild(newBtn, currentBtn);
                newBtn.addEventListener('click', handleConfirmSend);
            }

            function handleConfirmSend() {
                confirmSendModal.classList.add('hidden');
                
                // Validação da URL do Teams para ambos os modos
                const templateId = selectedTemplateCard.dataset.templateId;
                const template = templates[templateId];
                if (template.needsTeamsUrl) {
                    const teamsUrlInput = document.getElementById('teams-url-input');
                    const teamsUrl = teamsUrlInput ? teamsUrlInput.value.trim() : '';
                    if (!teamsUrl || !teamsUrl.startsWith('https://teams.microsoft.com')) {
                         showStatus('Para enviar a Prévia do Comitê, a URL da reunião do Teams é obrigatória.', 'error');
                         return; 
                    }
                }

                if (testModeToggle.checked) {
                    testEmailModal.classList.remove('hidden');
                    testEmailInput.focus();
                } else {
                    if (fixedRecipients.size === 0) { 
                        showStatus('Adicione ao menos um destinatário (Para).', 'error'); 
                        return; 
                    }
                    executeSend(Array.from(fixedRecipients).join(';'), Array.from(ccRecipients).join(';'));
                }
            }
            
            function handleConfirmTestEmail() {
                const testEmails = testEmailInput.value;
                if (testEmails.includes('@')) {
                    executeSend(testEmails, '');
                    testEmailModal.classList.add('hidden');
                } else { showStatus('Por favor, insira um e-mail de teste válido.', 'error'); }
            }

            async function executeSend(destinatariosPara, destinatariosCopia) {
                sendButton.disabled = true;
                showStatus('Preparando para enviar...', 'loading');
                const manualFile = attachmentInput.files[0];
                const manualIsCsv = isCsvFile(manualFile);
                let attachmentContent = null, attachmentName = null;

                if (manualFile && manualIsCsv) {
                    attachmentContent = await readFileAsBase64(manualFile);
                    attachmentName = manualFile.name;
                } else if (generatedAttachment) {
                    attachmentContent = generatedAttachment.content;
                    attachmentName = generatedAttachment.filename;
                } else if (manualFile) {
                    attachmentContent = await readFileAsBase64(manualFile);
                    attachmentName = manualFile.name;
                }

                if (generatedAttachment && manualIsCsv !== csvOverrideActive) {
                    csvOverrideActive = manualIsCsv;
                    updateAutoAttachmentIndicator();
                }

                const payload = { htmlParaEnviar: generateFinalHtml(), assuntoParaEnviar: emailSubjectInput.value, destinatariosFixos: destinatariosPara, destinatariosDinamicos: destinatariosCopia, attachmentName, attachmentContent };
                showStatus('Enviando...', 'loading');
                try {
                    const response = await fetch(document.getElementById('power-automate-url').value, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
                    if (response.ok) showStatus('Comunicado enviado com sucesso!', 'success');
                    else throw new Error(`Erro: ${response.status}`);
                } catch (error) { showStatus(`Falha no envio: ${error.message}`, 'error');
                } finally { sendButton.disabled = false; }
            }
            function showStatus(message, type = 'info') {
                statusMessage.textContent = message;
                const colors = { success: 'text-green-600', error: 'text-red-600', loading: 'text-blue-600', info: 'text-gray-600' };
                statusMessage.className = `mt-3 text-sm font-medium text-center ${colors[type]}`;
            }
            // --- Lógica do Modal de Destinatários ---
            document.getElementById('manage-recipients-button').addEventListener('click', () => { tempFixedRecipients = new Set(fixedRecipients); renderRecipientTags(); fixedRecipientsModal.classList.remove('hidden'); });
            document.getElementById('cancel-edit-recipients').addEventListener('click', () => fixedRecipientsModal.classList.add('hidden'));
            document.getElementById('save-recipients-btn').addEventListener('click', () => { fixedRecipients = new Set(tempFixedRecipients); updateFixedRecipientsDisplay(); fixedRecipientsModal.classList.add('hidden'); });
            document.getElementById('add-recipient-btn').addEventListener('click', addRecipient);
            document.getElementById('add-recipient-input').addEventListener('keydown', (e) => { if(e.key==='Enter') addRecipient(); });
            document.getElementById('load-default-recipients-btn').addEventListener('click', loadDefaultRecipients);
            function addRecipient() {
                const input = document.getElementById('add-recipient-input');
                if (input.value.includes('@')) { tempFixedRecipients.add(input.value.trim()); renderRecipientTags(); input.value = ''; }
            }
            function renderRecipientTags() {
                const container = document.getElementById('recipient-tags-container');
                container.innerHTML = '';
                tempFixedRecipients.forEach(email => {
                    const tag = document.createElement('div');
                    tag.className = 'recipient-tag';
                    tag.innerHTML = `<span>${email}</span><button>&times;</button>`;
                    tag.querySelector('button').onclick = () => { tempFixedRecipients.delete(email); renderRecipientTags(); };
                    container.appendChild(tag);
                });
            }
            function loadDefaultRecipients() {
                const templateId = selectedTemplateCard.dataset.templateId;
                const defaultList = templates[templateId].defaultEmails || '';
                cleanEmailString(defaultList).forEach(e => tempFixedRecipients.add(e));
                renderRecipientTags();
            }

            // --- FUNÇÕES UTILITÁRIAS GLOBAIS ---
            function cleanEmailString(emailString) {
                if (!emailString || typeof emailString !== 'string') return new Set();
                const emailArray = emailString.split(/[;,]/)
                    .map(entry => {
                        const match = entry.match(/<([^>]+)>/);
                        return match ? match[1].trim().toLowerCase() : entry.trim().toLowerCase();
                    })
                    .filter(email => email && email.includes('@'));
                return new Set(emailArray);
            }

            async function fetchApiData(url) {
                try {
                    const response = await fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' } });
                    if (!response.ok) throw new Error(`API Error: ${response.status}`);
                    const data = await response.json();
                    if (Array.isArray(data)) return data;
                    const list = data.value || (data.body && data.body.value);
                    if (Array.isArray(list)) return list;
                    throw new Error("Unexpected API response format.");
                } catch (error) {
                    console.error("Fetch API data failed:", error);
                    throw error;
                }
            }

            /**
             * Parses a date string from the API (DD/MM/YYYY HH:mm) using the São Paulo timezone.
             * @param {string} dateString - The date string from the API.
             * @returns {Date|null} A Date object or null if invalid.
             */
            function parseApiDate(dateString) {
                if (!dateString) return null;
                const match = dateString.match(/(\d{2})\/(\d{2})\/(\d{4})(?: (\d{2}):(\d{2}))?/);
                if (!match) return null;

                const day = match[1];
                const month = match[2];
                const year = match[3];
                const hour = match[4] || '00';
                const minute = match[5] || '00';

                // Interpret the date as being in the São Paulo timezone (-03:00)
                const isoString = `${year}-${month}-${day}T${hour}:${minute}:00-03:00`;
                const parsedDate = new Date(isoString);

                if (!isNaN(parsedDate.getTime())) {
                    return parsedDate;
                }

                // Fallback in case the environment cannot parse the ISO string with offset
                const offsetMinutes = 3 * 60; // São Paulo is UTC-3 (no DST at present)
                const timestamp = Date.UTC(Number(year), Number(month) - 1, Number(day), Number(hour), Number(minute)) + offsetMinutes * 60 * 1000;
                return new Date(timestamp);
            }

            /**
             * Formats a Date object into a localized string (pt-BR).
             * @param {Date} date - The date object to format.
             * @returns {string} The formatted date string.
             */
            function formatLocalDate(date, options = {}) {
                if (!date || isNaN(date.getTime())) return 'N/A';
                const defaultOptions = {
                    day: '2-digit',
                    month: '2-digit',
                    year: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit',
                    timeZone: 'America/Sao_Paulo' // Explicitly set to Brazil's timezone
                };
                return date.toLocaleString('pt-BR', {...defaultOptions, ...options});
            }
            
            // Lógica para Atrasos
            function processarDadosDeAtraso(todasAsMudancas) {
                const now = new Date();
                const oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
                const mudancasEmExecucao = todasAsMudancas.filter(m => m.cr9ff_classificao === 'Execução');

                const mudancasAtrasadas = mudancasEmExecucao.map(m => {
                    const endDateStr = m['cr9ff_datadetrminoplanejada@OData.Community.Display.V1.FormattedValue'];
                    const endDate = parseApiDate(endDateStr);
                    if (!endDate || endDate >= now) return null;
                    const daysLate = Math.ceil((now - endDate) / (1000 * 60 * 60 * 24));
                    if (daysLate <= 7) return null;
                    m.daysLate = daysLate;
                    return m;
                }).filter(Boolean);

                const { emailsDosSuperiores, emailsCc } = extrairEmails(mudancasAtrasadas);

                const gruposHierarquicos = mudancasAtrasadas.reduce((acc, m) => {
                    const departamento = m.cr9ff_departamento_2 || 'Departamento não especificado';
                    const superior = m.cr9ff_gerente_1 || 'Superior não correlacionado';
                    const categoria = m.daysLate > 30 ? 'critico' : 'atrasadas';
                    if (!acc[departamento]) acc[departamento] = {};
                    if (!acc[departamento][superior]) acc[departamento][superior] = { critico: [], atrasadas: [] };
                    acc[departamento][superior][categoria].push(m);
                    return acc;
                }, {});

                const metricas = {
                    totalAtrasadas: mudancasAtrasadas.length,
                    totalCriticas: mudancasAtrasadas.filter(m => m.daysLate > 30).length,
                    previousWeekTotal: mudancasAtrasadas.filter(m => parseApiDate(m['cr9ff_datadetrminoplanejada@OData.Community.Display.V1.FormattedValue']) < oneWeekAgo).length,
                    topOffenders: getTopOffenders(gruposHierarquicos, (categorias) => categorias.critico.length + categorias.atrasadas.length)
                };
                
                return { mudancasAtrasadas, metricas, gruposHierarquicos, emailsDosSuperiores, emailsCc };
            }
            
            function generateAtrasosHtmlBody(grupos, metricas) {
                const editableObservationCard = `<div id="additional-observation-card" contenteditable="true" style="display: none; border: 1px dashed #cbd5e1; padding: 16px; margin-bottom: 24px; border-radius: 4px; background-color: #f8fafc;"><p style="margin:0; font-family: 'Segoe UI', Arial, sans-serif; color: #9ca3af;">Clique aqui para adicionar sua observação...</p></div>`;
                let trendText = 'estável';
                if (metricas.previousWeekTotal > 0 && metricas.totalAtrasadas !== metricas.previousWeekTotal) {
                    const change = ((metricas.totalAtrasadas - metricas.previousWeekTotal) / metricas.previousWeekTotal) * 100;
                    if (change > 5) trendText = `<span style="color: #b91c1c;">aumentou ${change.toFixed(0)}%</span>`;
                    else if (change < -5) trendText = `<span style="color: #166534;">diminuiu ${Math.abs(change).toFixed(0)}%</span>`;
                }

                const noticeHtml = `<table role="presentation" border="0" cellpadding="0" cellspacing="0" width="100%" style="margin-bottom: 24px;"><tr><td style="background-color: #f8fafc; border-left: 4px solid #64748b; padding: 16px; border-radius: 4px;"><p style="margin: 0; font-size: 13px; font-family: 'Segoe UI', Arial, sans-serif; color: #334155; line-height: 1.6;"><strong style="color: #1e293b;">Observação:</strong> Caso sejam identificadas divergências entre o Solicitante e o Coordenador, é necessário solicitar a correção no cadastro do ServiceNow, que serve como base para a geração deste relatório.</p></td></tr></table>`;
                const highlightsHtml = `<table role="presentation" border="0" cellpadding="0" cellspacing="0" width="100%" style="margin-bottom: 24px;"><tr><td style="background-color: #fef2f2; border: 1px solid #fecaca; border-radius: 8px; padding: 16px;"><h3 style="margin: 0 0 12px 0; font-size: 16px; font-family: 'Segoe UI', Arial, sans-serif; color: #1e293b;">Destaques da Semana</h3><p style="font-size: 14px; font-family: 'Segoe UI', Arial, sans-serif; color: #475569; margin: 0 0 12px;">O total de mudanças atrasadas ${trendText} em relação à semana passada (de ${metricas.previousWeekTotal} para ${metricas.totalAtrasadas}).</p><h4 style="margin: 0 0 8px; font-size: 14px; font-family: 'Segoe UI', Arial, sans-serif; color: #1e293b;">Superiores com mais atrasos:</h4><table role="presentation" border="0" cellpadding="0" cellspacing="0" style="width: 100%; font-size: 14px; font-family: 'Segoe UI', Arial, sans-serif; color: #475569;">${metricas.topOffenders.map(([name, count]) => `<tr><td style="padding: 4px 0;">${name}</td><td style="padding: 4px 0; text-align: right;"><strong>${count} mudanças</strong></td></tr>`).join('')}</table></td></tr></table>`;
                const kpisHtml = `<table role="presentation" border="0" cellpadding="0" cellspacing="0" width="100%" style="margin-bottom: 24px;"><tr><td width="49%" valign="top"><div style="background-color: #fef2f2; border-radius: 5px; text-align: center; padding: 16px 10px;"><p style="margin: 0; font-size: 28px; font-weight: 700; font-family: 'Segoe UI', Arial, sans-serif; color: #b91c1c;">${metricas.totalCriticas}</p><p style="margin: 4px 0 0 0; font-size: 12px; font-family: 'Segoe UI', Arial, sans-serif; color: #991b1b; text-transform: uppercase;">Atraso Crítico (>30d)</p></div></td><td width="2%"></td><td width="49%" valign="top"><div style="background-color: #f3f4f6; border-radius: 5px; text-align: center; padding: 16px 10px;"><p style="margin: 0; font-size: 28px; font-weight: 700; font-family: 'Segoe UI', Arial, sans-serif; color: #4b5563;">${metricas.totalAtrasadas}</p><p style="margin: 4px 0 0 0; font-size: 12px; font-family: 'Segoe UI', Arial, sans-serif; color: #4b5563; text-transform: uppercase;">Total Atrasadas (>7d)</p></div></td></tr></table>`;
                
                let body = editableObservationCard + noticeHtml + kpisHtml + highlightsHtml;
                Object.keys(grupos).sort().forEach(departamento => {
                    let superioresHtml = '';
                    Object.keys(grupos[departamento]).sort().forEach(superior => {
                        const { critico, atrasadas } = grupos[departamento][superior];
                        critico.sort((a, b) => b.daysLate - a.daysLate);
                        atrasadas.sort((a, b) => b.daysLate - a.daysLate);
                        const createList = (items, color) => items.map(m => `<tr><td style="padding: 8px 0; border-bottom: 1px solid #f3f4f6;"><p style="margin:0;font-weight:600; font-family: 'Segoe UI', Arial, sans-serif; color:${color};">${m.cr9ff_nmero} (${m.daysLate}d)</p><p style="margin:2px 0;font-size:12px; font-family: 'Segoe UI', Arial, sans-serif;">${m.cr9ff_descrioresumida}</p><p style="margin:2px 0;font-size:11px; font-family: 'Segoe UI', Arial, sans-serif; color:#6b7280;">Solicitante: ${m.cr9ff_abertopor} (${m.cr9ff_iddousurio})</p></td></tr>`).join('');
                        superioresHtml += `<table role="presentation" border="0" cellpadding="0" cellspacing="0" width="100%" style="margin-top: 16px; border: 1px solid #e5e7eb; border-radius: 8px;"><tr><td style="background-color: #f9fafb; padding: 12px; border-bottom: 1px solid #e5e7eb;"><h4 style="margin:0; font-size: 14px; font-family: 'Segoe UI', Arial, sans-serif;">${superior} - ${critico.length + atrasadas.length} Atrasada(s)</h4></td></tr><tr><td style="padding: 0 16px;"><table role="presentation" border="0" cellpadding="0" cellspacing="0" width="100%">${createList(critico, '#b91c1c')}${createList(atrasadas, '#f59e0b')}</table></td></tr></table>`;
                    });
                    body += `<table role="presentation" border="0" cellpadding="0" cellspacing="0" width="100%" style="background-color: #ffffff; border: 1px solid #e2e8f0; border-radius: 12px; margin-bottom: 24px;"><tr><td style="padding: 20px;"><h3 style="margin: 0 0 16px; font-size: 18px; font-family: 'Segoe UI', Arial, sans-serif; border-bottom: 1px solid #e5e7eb; padding-bottom: 12px;">${departamento}</h3>${superioresHtml}</td></tr></table>`;
                });
                return body;
            }
            function generateAtrasosXLSX(mudancasAtrasadas) {
                const dataForSheet = mudancasAtrasadas.map(m => ({
                    'Departamento': m.cr9ff_departamento_2 || 'N/A', 
                    'Superior Imediato': m.cr9ff_gerente_1 || 'N/A', 
                    'Nº Mudança': m.cr9ff_nmero || 'N/A', 
                    'Descrição': m.cr9ff_descrioresumida || 'N/A', 
                    'Solicitante': m.cr9ff_abertopor || 'N/A', 
                    'ID Solicitante': m.cr9ff_iddousurio || 'N/A', 
                    'Data Fim Planejada': formatLocalDate(parseApiDate(m['cr9ff_datadetrminoplanejada@OData.Community.Display.V1.FormattedValue']), {hour: undefined, minute: undefined}), 
                    'Dias de Atraso': m.daysLate, 
                    'Categoria Atraso': m.daysLate > 30 ? 'Crítico' : 'Atrasada', 
                    'Classificação': m.cr9ff_classificao 
                }));
                const worksheet = XLSX.utils.json_to_sheet(dataForSheet);
                const workbook = XLSX.utils.book_new();
                XLSX.utils.book_append_sheet(workbook, worksheet, "Atrasos por Hierarquia");
                const wbout = XLSX.write(workbook, { bookType: 'xlsx', type: 'base64' });
                return { filename: 'Relatorio_Atrasos_Hierarquia.xlsx', content: wbout };
            }
            
            // Lógica para Aprovadas e Comitê
            function processarDadosGenerico(mudancas) {
                const { emailsDosSuperiores, emailsCc } = extrairEmails(mudancas);
                const gruposHierarquicos = mudancas.reduce((acc, m) => {
                    const departamento = m.cr9ff_departamento || 'Departamento não especificado';
                    const superior = m.cr9ff_gerente_1 || 'Superior Imediato não correlacionado';
                    if (!acc[departamento]) acc[departamento] = {};
                    if (!acc[departamento][superior]) acc[departamento][superior] = [];
                    acc[departamento][superior].push(m);
                    return acc;
                }, {});
                return { gruposHierarquicos, emailsDosSuperiores, emailsCc };
            }

            function generateComiteHtmlBody(grupos, options) {
                const editableObservationCard = `<div id="additional-observation-card" contenteditable="true" style="display: none; border: 1px dashed #cbd5e1; padding: 16px; margin-bottom: 24px; border-radius: 4px; background-color: #f8fafc;"><p style="margin:0; font-family: 'Segoe UI', Arial, sans-serif; color: #9ca3af;">Clique aqui para adicionar sua observação...</p></div>`;
                const dataFormatada = new Date().toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit' });
                const saudacao = "Prezados(as),";
                let textoIntro;

                if (options.tipo === 'aprovadas') {
                    textoIntro = `Seguem abaixo as mudanças submetidas e aprovadas na reunião do Comitê de Mudanças (CAB), realizada em ${dataFormatada}.`;
                } else {
                    textoIntro = `Para sua ciência e preparação, seguem as mudanças que serão submetidas para análise e aprovação na próxima reunião do Comitê de Mudanças (CAB).`;
                }
                
                let kpis = { total: 0, gerentes: 0, criticas: 0};
                Object.values(grupos).forEach(superiores => {
                    kpis.gerentes += Object.keys(superiores).length;
                    Object.values(superiores).forEach(m_array => {
                        kpis.total += m_array.length;
                        m_array.forEach(m => {
                            if(m.cr9ff_prioridade && m.cr9ff_prioridade.startsWith('1')) kpis.criticas++;
                        });
                    });
                });

                const noticeHtml = `<table role="presentation" border="0" cellpadding="0" cellspacing="0" width="100%" style="margin-bottom: 24px;"><tr><td style="background-color: #f8fafc; border-left: 4px solid #64748b; padding: 16px; border-radius: 4px;"><p style="margin: 0; font-size: 13px; font-family: 'Segoe UI', Arial, sans-serif; color: #334155; line-height: 1.6;"><strong style="color: #1e293b;">Observação:</strong> Caso sejam identificadas divergências entre o Solicitante e o Coordenador, é necessário solicitar a correção no cadastro do ServiceNow, que serve como base para a geração deste relatório.</p></td></tr></table>`;

                const kpisHtml = options.tipo === 'aprovadas' ?
                    `<table role="presentation" border="0" cellpadding="0" cellspacing="0" width="100%" style="margin-bottom:30px;"><tr><td align="center" width="33.33%" style="padding:0 10px;"><p style="margin:0;font-size:28px;color:#A0A0A0;font-weight:700;">${kpis.total}</p><p style="margin:0;font-size:12px;color:#777777;text-transform:uppercase;">Total</p></td><td align="center" width="33.33%" style="padding:0 10px;border-left:1px solid #D1D1D1;border-right:1px solid #D1D1D1;"><p style="margin:0;font-size:28px;color:#A0A0A0;font-weight:700;">${kpis.gerentes}</p><p style="margin:0;font-size:12px;color:#777777;text-transform:uppercase;">Superiores</p></td><td align="center" width="33.33%" style="padding:0 10px;"><p style="margin:0;font-size:28px;color:#D32F2F;font-weight:700;">${kpis.criticas}</p><p style="margin:0;font-size:12px;color:#777777;text-transform:uppercase;">Críticas</p></td></tr></table>` :
                    `<table role="presentation" border="0" cellpadding="0" cellspacing="0" width="100%" style="margin-bottom:30px;"><tr><td align="center" width="50%" style="padding:0 10px;border-right:1px solid #D1D1D1;"><p style="margin:0;font-size:28px;color:#A0A0A0;font-weight:700;">${kpis.total}</p><p style="margin:0;font-size:12px;color:#777777;text-transform:uppercase;">Total</p></td><td align="center" width="50%" style="padding:0 10px;"><p style="margin:0;font-size:28px;color:#A0A0A0;font-weight:700;">${kpis.gerentes}</p><p style="margin:0;font-size:12px;color:#777777;text-transform:uppercase;">Superiores</p></td></tr></table>`;
                
                let cardsHtml = '';
                Object.keys(grupos).sort().forEach(departamento => {
                    let superioresHtml = '';
                    Object.keys(grupos[departamento]).sort().forEach(superior => {
                        const mudancas = grupos[departamento][superior];
                        mudancas.sort((a,b) => (a.cr9ff_nmero || '').localeCompare(b.cr9ff_nmero || ''));
                        
                        const mudancasHtml = mudancas.map(m => {
                            const prioridade = getPriorityStyle(m.cr9ff_prioridade);
                            const inicioFmt = formatLocalDate(parseApiDate(m['cr9ff_datadeincioplanejada@OData.Community.Display.V1.FormattedValue']));
                            const fimFmt = formatLocalDate(parseApiDate(m['cr9ff_datadetrminoplanejada@OData.Community.Display.V1.FormattedValue']));
                            const duracao = calcularDuracao(
                                m['cr9ff_datadeincioplanejada@OData.Community.Display.V1.FormattedValue'],
                                m['cr9ff_datadetrminoplanejada@OData.Community.Display.V1.FormattedValue']
                            );
                            return `<table role="presentation" width="100%" border="0" cellspacing="0" cellpadding="0" style="margin-top:16px; border: 1px solid #D1D1D1; border-top: 4px solid ${prioridade.borderColor}; border-radius: 6px;">
                                        <tr><td style="padding:16px 20px;">
                                            <table width="100%" border="0" cellspacing="0" cellpadding="0">
                                                <!-- CABEÇALHO DO CARD -->
                                                <tr><td colspan="2" style="padding-bottom:12px;border-bottom:1px solid #D1D1D1;">
                                                    <table width="100%" border="0" cellspacing="0" cellpadding="0">
                                                        <tr>
                                                            <td>
                                                                <p style="margin:0 0 4px;font-size:13px;color:#777777;">${m.cr9ff_nmero || 'N/A'}</p>
                                                                <h3 style="margin:0;font-size:16px;color:#5A5A5A;font-weight:700;line-height:1.4;">${m.cr9ff_descrioresumida || 'Descrição não disponível'}</h3>
                                                            </td>
                                                            <td width="100" align="right" valign="top">
                                                                <span style="display:inline-block;padding:4px 10px;font-size:11px;font-weight:600;color:${prioridade.tagColor};border:1px solid ${prioridade.borderColor};border-radius:4px;">${prioridade.text}</span>
                                                            </td>
                                                        </tr>
                                                    </table>
                                                </td></tr>
                                                <tr><td colspan="2" height="16"></td></tr>
                                                <!-- DETALHES EM DUAS COLUNAS -->
                                                <tr>
                                                    <td width="50%" valign="top" style="padding-right:12px;font-size:13px;color:#2C2C2C;line-height:1.5;">
                                                        <strong style="color:#555;">Período Planejado:</strong><br>
                                                        ${inicioFmt} a<br>
                                                        ${fimFmt}<br><br>
                                                        <strong style="color:#555;">Duração Estimada:</strong><br>
                                                        ${duracao}
                                                    </td>
                                                    <td width="50%" valign="top" style="padding-left:12px;font-size:13px;color:#2C2C2C;line-height:1.5;">
                                                        <strong style="color:#555;">Solicitante:</strong><br>
                                                        ${m.cr9ff_abertopor || 'N/A'} (${m.cr9ff_iddousurio || 'N/A'})<br><br>
                                                        <strong style="color:#555;">Item de Configuração:</strong><br>
                                                        ${m.cr9ff_itemdeconfigurao || 'N/A'}
                                                    </td>
                                                </tr>
                                                <tr><td colspan="2" height="16"></td></tr>
                                                <!-- ANÁLISE DE RISCO -->
                                                <tr>
                                                    <td colspan="2" style="background-color: #F8F8F8; border-left: 4px solid ${prioridade.borderColor}; padding: 12px 16px; border-radius: 4px;">
                                                        <p style="margin: 0; font-size: 13px; color: #2C2C2C; line-height: 1.5;">
                                                            <strong style="color: #555555;">Análise de Risco e Impacto:</strong><br>
                                                            ${m.cr9ff_anlisederiscoeimpacto || 'Não informada.'}
                                                        </p>
                                                    </td>
                                                </tr>
                                            </table>
                                        </td></tr>
                                    </table>`;
                        }).join('');

                        superioresHtml += `<h2 style="margin:24px 0 8px 0;font-size:18px;color:#2C2C2C;font-weight:700;border-bottom:1px solid #D1D1D1;padding-bottom:8px;">${superior}</h2>${mudancasHtml}`;
                    });

                    cardsHtml += `<div style="background-color: #ffffff; border: 1px solid #e2e8f0; border-radius: 12px; margin-bottom: 24px;"><div style="padding: 20px;"><h3 style="margin: 0 0 16px; font-size: 18px; font-family: 'Segoe UI', Arial, sans-serif; border-bottom: 1px solid #e5e7eb; padding-bottom: 12px;">${departamento}</h3>${superioresHtml}</div></div>`;
                });
                
                const teamsButtonPlaceholder = options.tipo === 'previa' ? '<div style="text-align:center; padding-bottom: 25px;">%%TEAMS_BUTTON%%</div>' : '';

                return `<p style="font-size:15px;color:#2C2C2C;line-height:1.6;padding-bottom:20px;">${saudacao}<br><br>${textoIntro}</p>${editableObservationCard}${noticeHtml}${teamsButtonPlaceholder}${kpisHtml}${cardsHtml}`;
            }

            function generateGenericXLSX(mudancas, filename) {
                const dataForSheet = mudancas.map(m => ({
                    'Departamento': m.cr9ff_departamento || 'N/A',
                    'Superior Imediato': m.cr9ff_gerente_1 || 'N/A',
                    'Nº Mudança': m.cr9ff_nmero || 'N/A',
                    'Descrição': m.cr9ff_descrioresumida || 'N/A',
                    'Solicitante': m.cr9ff_abertopor || 'N/A',
                    'ID Solicitante': m.cr9ff_iddousurio || 'N/A',
                    'Classificação': m.cr9ff_classificao,
                    'Prioridade': getPriorityStyle(m.cr9ff_prioridade).text,
                    'Data Início Planejada': formatLocalDate(parseApiDate(m['cr9ff_datadeincioplanejada@OData.Community.Display.V1.FormattedValue'])),
                    'Data Fim Planejada': formatLocalDate(parseApiDate(m['cr9ff_datadetrminoplanejada@OData.Community.Display.V1.FormattedValue'])),
                    'Duração Estimada': calcularDuracao(
                        m['cr9ff_datadeincioplanejada@OData.Community.Display.V1.FormattedValue'],
                        m['cr9ff_datadetrminoplanejada@OData.Community.Display.V1.FormattedValue']
                    )
                }));
                const worksheet = XLSX.utils.json_to_sheet(dataForSheet);
                const workbook = XLSX.utils.book_new();
                XLSX.utils.book_append_sheet(workbook, worksheet, "Mudanças");
                const wbout = XLSX.write(workbook, { bookType: 'xlsx', type: 'base64' });
                return { filename: filename, content: wbout };
            }

            function getPriorityStyle(priorityText) {
                const p = (priorityText || '4').charAt(0);
                const styleMap = {'1':{t:'Crítica',b:'#D32F2F'},'2':{t:'Alta',b:'#FB8C00'},'3':{t:'Moderada',b:'#1976D2'},'d':{t:'Baixa',b:'#388E3C'}};
                const s = styleMap[p] || styleMap['d'];
                return { text: s.t, borderColor: s.b, tagColor: s.b };
            }
            
            function generateTeamsButtonHtml(url) {
                return `<table border="0" cellspacing="0" cellpadding="0" align="center"><tr><td align="center" style="background-color:#464EB8;border-radius:4px;"><a href="${url}" target="_blank" style="padding:12px 25px;font-family:'Segoe UI',Arial,sans-serif;font-size:16px;color:#ffffff;text-decoration:none;display:inline-block;font-weight:600;">Acessar Reunião do Teams</a></td></tr></table>`;
            }

            function extrairEmails(mudancas) {
                const emailsDosSuperiores = new Set();
                const emailsCc = new Set();
                mudancas.forEach(m => {
                    if (m.cr9ff_email_1 && m.cr9ff_email_1.includes('@')) emailsDosSuperiores.add(m.cr9ff_email_1.trim());
                    if (m.cr9ff_email && m.cr9ff_email.includes('@')) emailsCc.add(m.cr9ff_email.trim());
                });
                return { emailsDosSuperiores, emailsCc };
            }

            function getTopOffenders(grupos, countFn) {
                const counts = {};
                Object.entries(grupos).forEach(([dep, superiores]) => {
                    Object.entries(superiores).forEach(([superior, data]) => {
                        counts[superior] = (counts[superior] || 0) + countFn(data);
                    });
                });
                return Object.entries(counts).sort((a, b) => b[1] - a[1]).slice(0, 3);
            }
            
            function calcularDuracao(inicioStr, fimStr) {
                const inicio = parseApiDate(inicioStr);
                const fim = parseApiDate(fimStr);

                if (!inicio || !fim || fim < inicio) return 'N/A';

                let diffMs = fim - inicio;
                const dias = Math.floor(diffMs / (1000 * 60 * 60 * 24));
                diffMs -= dias * (1000 * 60 * 60 * 24);
                const horas = Math.floor(diffMs / (1000 * 60 * 60));
                diffMs -= horas * (1000 * 60 * 60);
                const minutos = Math.floor(diffMs / (1000 * 60));
                
                let parts = [];
                if (dias > 0) parts.push(`${dias}d`);
                if (horas > 0) parts.push(`${horas}h`);
                if (minutos > 0 && dias === 0) parts.push(`${minutos}m`); 

                return parts.length > 0 ? parts.join(' ') : '< 1m';
            }
        });
    </script>
</body>
</html>
