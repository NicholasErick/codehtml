<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gerador de ATA de Reunião com Envio</title>
    <!-- Inclusão do Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Fontes -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Segoe+UI:wght@400;600;700&display=swap" rel="stylesheet">
    
    <style>
        body {
            font-family: 'Inter', sans-serif;
            --color-border: #e5e7eb; /* gray-200 */
            --color-bg-panel: #ffffff; /* white */
            --color-bg-page: #f9fafb;  /* gray-50 */
            --color-accent: #2563eb;   /* blue-600 */
            --color-accent-hover: #1d4ed8; /* blue-700 */
        }
        .control-panel::-webkit-scrollbar, .preview-area::-webkit-scrollbar, #regional-controls::-webkit-scrollbar, #ti-controls::-webkit-scrollbar {
            display: none;
        }
        .control-panel, .preview-area, #regional-controls, #ti-controls {
            -ms-overflow-style: none;  /* IE and Edge */
            scrollbar-width: none;  /* Firefox */
        }
        #email-preview-frame {
            width: 100%;
            height: 100%;
            border: none;
            border-radius: 0.5rem; /* rounded-lg */
            background-color: white;
        }
        .toolbar-button {
            width: 2.25rem; height: 2.25rem; display: flex; align-items: center; justify-content: center;
            border: 1px solid transparent; border-radius: 0.375rem; transition: background-color 0.2s, border-color 0.2s;
            color: #d1d5db; background-color: #1f2937;
        }
        .toolbar-button:hover { background-color: #374151; }
        .toolbar-button.active { background-color: var(--color-accent); color: white; }
        .recipient-tag {
            background-color: #e0e7ff; color: #3730a3; padding: 0.25rem 0.75rem; border-radius: 9999px;
            display: inline-flex; align-items: center; font-size: 0.875rem; font-weight: 500; margin: 0.25rem;
        }
        .recipient-tag button { margin-left: 0.5rem; color: #4338ca; background: none; border: none; cursor: pointer; }
        .recipient-tag button:hover { color: #312e81; }
        .status-btn.active { box-shadow: 0 0 0 2px #2563eb; }
    </style>
</head>
<body class="bg-gray-100 text-gray-800">

    <div class="flex h-screen bg-[var(--color-bg-page)]">
        
        <!-- PAINEL DE CONTROLE (ESQUERDA) -->
        <aside class="control-panel w-full md:w-2/5 lg:w-1/3 h-screen flex flex-col bg-[var(--color-bg-panel)] border-r border-[var(--color-border)] p-6 overflow-y-auto">
            
            <header class="mb-6">
                <h1 class="text-2xl font-bold text-gray-900">Gerador de ATA de Reunião</h1>
                <p class="mt-1 text-sm text-gray-600">Crie e envie a ATA da sua reunião em um único lugar.</p>
            </header>

            <!-- SEÇÃO DO GERADOR DE ATA -->
            <section class="space-y-6">
                <div>
                    <h2 class="text-lg font-semibold text-gray-700 mb-3">1. Dados da Reunião</h2>
                    <div class="space-y-4 rounded-md bg-gray-50 p-4 border">
                        <div>
                            <label for="meeting-title-input" class="block text-sm font-medium text-gray-700">Assunto do E-mail / Título da Reunião</label>
                            <input type="text" id="meeting-title-input" class="mt-1 w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500" placeholder="Ex: ATA da Reunião Semanal de Gestores de TI">
                        </div>
                         <div>
                            <label for="meeting-theme-input" class="block text-sm font-medium text-gray-700">Tema da Reunião</label>
                            <input type="text" id="meeting-theme-input" class="mt-1 w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500" placeholder="Ex: Alinhamento sobre Projeto X">
                        </div>
                        <div>
                            <label for="attendance-report-input" class="block text-sm font-medium text-gray-700">Relatório de Presença do Teams (.csv)</label>
                            <div class="flex items-center gap-2 mt-1">
                                <input type="file" id="attendance-report-input" accept=".csv" class="text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100 w-full"/>
                            </div>
                            <button id="process-report-button" class="mt-2 w-full bg-blue-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors" disabled>Processar Participantes</button>
                            <p id="file-status" class="text-xs text-gray-500 mt-2 h-4"></p>
                        </div>
                    </div>
                </div>

                <div>
                    <h2 class="text-lg font-semibold text-gray-700 mb-3">2. Resumo da Reunião (Copilot)</h2>
                     <div class="space-y-4 rounded-md bg-gray-50 p-4 border">
                        <label for="copilot-summary-input" class="block text-sm font-medium text-gray-700">Cole o resumo gerado pela IA aqui</label>
                        <textarea id="copilot-summary-input" rows="6" class="mt-1 w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500" placeholder="Cole o texto do Copilot..."></textarea>
                        <button id="process-summary-button" class="w-full bg-indigo-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-indigo-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors" disabled>Popular ATA com Resumo</button>
                        <p id="summary-status" class="text-xs text-gray-500 mt-2 h-4"></p>
                    </div>
                </div>

                <div>
                    <h2 class="text-lg font-semibold text-gray-700 mb-3">3. Opções da ATA</h2>
                    <div class="space-y-4 rounded-md bg-gray-50 p-4 border">
                        <label for="toggle-representatives" class="flex items-center cursor-pointer">
                            <input type="checkbox" id="toggle-representatives" class="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500" checked>
                            <span class="ml-2 text-sm text-gray-700">Incluir presença de representantes</span>
                        </label>
                        <label for="toggle-action-plan" class="flex items-center cursor-pointer">
                            <input type="checkbox" id="toggle-action-plan" class="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500">
                            <span class="ml-2 text-sm text-gray-700">Incluir Plano de Ação</span>
                        </label>
                    </div>
                </div>

                <div id="representatives-sections">
                    <div>
                        <h2 class="text-lg font-semibold text-gray-700 mb-3">4. Presença dos representantes das Regionais</h2>
                        <div id="regional-controls" class="space-y-3 rounded-md bg-gray-50 p-4 border max-h-48 overflow-y-auto"></div>
                    </div>

                    <div>
                        <h2 class="text-lg font-semibold text-gray-700 mb-3">5. Presença dos Representantes de TI</h2>
                        <div id="ti-controls" class="space-y-3 rounded-md bg-gray-50 p-4 border max-h-48 overflow-y-auto"></div>
                    </div>
                </div>
            </section>

            <!-- SEÇÃO DE DESTINATÁRIOS E ENVIO -->
            <section id="recipients-and-send-section" class="mt-6 pt-6 border-t">
                <div id="recipients-panel" class="mt-4">
                    <h2 class="text-lg font-semibold text-gray-700 mb-3">6. Destinatários</h2>
                    <div class="rounded-md bg-gray-50 p-4 border">
                        <button id="manage-recipients-button" class="w-full mb-2 bg-gray-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-gray-700 transition-colors duration-300">Gerenciar Destinatários (Para / Cc)</button>
                        <div id="fixed-recipients-display" class="mt-2 text-sm text-gray-700">Nenhum destinatário principal (Para) carregado.</div>
                        <div id="cc-recipients-log" class="w-full text-sm text-gray-700 mt-2"></div>
                    </div>
                </div>

                <div id="send-section" class="mt-6">
                    <h2 class="text-lg font-semibold text-gray-700 mb-3">7. Enviar Comunicado</h2>
                    <div class="rounded-md bg-gray-50 p-4 border">
                        <label for="test-mode-toggle" class="flex items-center cursor-pointer">
                            <input type="checkbox" id="test-mode-toggle" class="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500">
                            <span class="ml-2 text-sm font-semibold text-gray-700">Ativar Modo de Teste</span>
                        </label>
                    </div>
                    <input type="hidden" id="power-automate-url" value="https://prod-76.westus.logic.azure.com:443/workflows/416859d347cd42e9bdae001d2f3caf04/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=gLZgIP7uqIjB0SYJlDCgLezyn_xpHr_prU_9roVsSgw">
                    <div class="flex items-center gap-4 mt-4">
                        <button id="send-button" class="w-full bg-[var(--color-accent)] text-white font-bold py-2.5 px-4 rounded-lg hover:bg-[var(--color-accent-hover)] transition-colors duration-300">
                            Enviar ATA
                        </button>
                    </div>
                    <div id="status-message" class="mt-3 text-sm font-medium text-center"></div>
                </div>
            </section>
        </aside>

        <!-- ÁREA DE PRÉ-VISUALIZAÇÃO (DIREITA) -->
        <main class="preview-area flex-grow h-screen p-6 overflow-y-auto flex items-center justify-center">
             <div class="w-full h-full max-w-3xl mx-auto shadow-lg relative">
                 <iframe id="email-preview-frame"></iframe>
             </div>
        </main>
    </div>
    
    <!-- MODAIS -->
    <div id="test-email-modal" class="fixed inset-0 bg-gray-800 bg-opacity-75 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-md">
            <h3 class="text-lg font-bold text-gray-900">Enviar E-mail de Teste</h3>
            <p class="text-sm text-gray-600 mt-2">Digite o(s) e-mail(s) de destino para este teste, separados por vírgula.</p>
            <input type="text" id="test-email-input" class="w-full p-2 border border-gray-300 rounded-md mt-4" placeholder="email1@exemplo.com, email2@exemplo.com">
            <p id="test-email-error" class="text-red-600 text-sm mt-1 h-4"></p>
            <div class="mt-6 flex justify-end gap-3">
                <button id="cancel-test-email" class="bg-gray-200 text-gray-700 font-bold py-2 px-4 rounded-lg hover:bg-gray-300">Cancelar</button>
                <button id="confirm-test-email" class="bg-blue-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-700">Enviar Teste</button>
            </div>
        </div>
    </div>
    <div id="confirm-send-modal" class="fixed inset-0 bg-gray-800 bg-opacity-75 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-md">
            <h3 id="confirm-send-title" class="text-lg font-bold text-gray-900">Confirmar Envio</h3>
            <p id="confirm-send-message" class="text-sm text-gray-600 mt-2">Você tem certeza que deseja enviar este comunicado?</p>
            <div class="mt-6 flex justify-end gap-3">
                <button id="cancel-send-btn" class="bg-gray-200 text-gray-700 font-bold py-2 px-4 rounded-lg hover:bg-gray-300">Cancelar</button>
                <button id="confirm-send-btn" class="bg-blue-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-700">Confirmar</button>
            </div>
        </div>
    </div>
    <div id="recipients-modal" class="fixed inset-0 bg-gray-800 bg-opacity-75 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-2xl">
            <h3 id="recipients-modal-title" class="text-lg font-bold text-gray-900">Gerenciar Destinatários</h3>
            <p class="text-sm text-gray-600 mt-2">Adicione ou remova e-mails da lista. Os e-mails do relatório de presença já foram adicionados em 'Cc'.</p>
            
            <div class="mt-4 grid grid-cols-2 gap-6">
                <div>
                    <h4 class="font-semibold text-gray-800 mb-2">Destinatários (Para)</h4>
                    <div id="to-tags-container" class="p-2 border rounded-md min-h-[128px] max-h-48 overflow-y-auto bg-gray-50"></div>
                </div>
                <div>
                    <h4 class="font-semibold text-gray-800 mb-2">Destinatários (Cc)</h4>
                    <div id="cc-tags-container" class="p-2 border rounded-md min-h-[128px] max-h-48 overflow-y-auto bg-gray-50"></div>
                </div>
            </div>

            <div class="mt-4">
                <label for="add-recipient-input" class="block text-sm font-medium text-gray-700">Adicionar novo e-mail</label>
                <div class="mt-1 flex gap-2">
                    <input type="email" id="add-recipient-input" class="flex-grow p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500" placeholder="nome@exemplo.com">
                    <select id="add-recipient-type" class="p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                        <option value="to">Para</option>
                        <option value="cc">Cc</option>
                    </select>
                    <button id="add-recipient-btn" class="bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-blue-700">Adicionar</button>
                </div>
                <p id="recipient-error-message" class="text-red-600 text-sm mt-1 h-4"></p>
            </div>

            <div class="mt-6 flex justify-end items-center">
                <div class="flex gap-3">
                    <button id="cancel-edit-recipients" class="bg-gray-200 text-gray-700 font-bold py-2 px-4 rounded-lg hover:bg-gray-300">Cancelar</button>
                    <button id="save-recipients-btn" class="bg-blue-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-700">Salvar</button>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // --- ELEMENTOS DO DOM ---
            const meetingTitleInput = document.getElementById('meeting-title-input');
            const meetingThemeInput = document.getElementById('meeting-theme-input');
            const attendanceReportInput = document.getElementById('attendance-report-input');
            const processReportButton = document.getElementById('process-report-button');
            const fileStatus = document.getElementById('file-status');
            const previewFrame = document.getElementById('email-preview-frame');
            const regionalControlsContainer = document.getElementById('regional-controls');
            const tiControlsContainer = document.getElementById('ti-controls');
            const copilotSummaryInput = document.getElementById('copilot-summary-input');
            const processSummaryButton = document.getElementById('process-summary-button');
            const summaryStatus = document.getElementById('summary-status');
            const powerAutomateUrlInput = document.getElementById('power-automate-url');
            const sendButton = document.getElementById('send-button');
            const statusMessage = document.getElementById('status-message');
            const testModeToggle = document.getElementById('test-mode-toggle');
            const manageRecipientsButton = document.getElementById('manage-recipients-button');
            const fixedRecipientsDisplay = document.getElementById('fixed-recipients-display');
            const ccRecipientsLog = document.getElementById('cc-recipients-log');
            const toggleRepresentatives = document.getElementById('toggle-representatives');
            const toggleActionPlan = document.getElementById('toggle-action-plan');
            const representativesSections = document.getElementById('representatives-sections');
            
            // Modais
            const testEmailModal = document.getElementById('test-email-modal');
            const testEmailInput = document.getElementById('test-email-input');
            const testEmailError = document.getElementById('test-email-error');
            const cancelTestEmailBtn = document.getElementById('cancel-test-email');
            const confirmTestEmailBtn = document.getElementById('confirm-test-email');
            const confirmSendModal = document.getElementById('confirm-send-modal');
            const confirmSendTitle = document.getElementById('confirm-send-title');
            const confirmSendMessage = document.getElementById('confirm-send-message');
            const cancelSendBtn = document.getElementById('cancel-send-btn');
            const confirmSendBtn = document.getElementById('confirm-send-btn');
            const recipientsModal = document.getElementById('recipients-modal');
            const toTagsContainer = document.getElementById('to-tags-container');
            const ccTagsContainer = document.getElementById('cc-tags-container');
            const addRecipientInput = document.getElementById('add-recipient-input');
            const addRecipientBtn = document.getElementById('add-recipient-btn');
            const addRecipientType = document.getElementById('add-recipient-type');
            const recipientErrorMessage = document.getElementById('recipient-error-message');
            const cancelEditRecipientsBtn = document.getElementById('cancel-edit-recipients');
            const saveRecipientsBtn = document.getElementById('save-recipients-btn');

            // --- ESTADO DA APLICAÇÃO ---
            const DESTINATARIOS_FIXOS_RAW = `
                mara.lassabia@assai.com.br; fernando.mazzei@assai.com.br; fabio.benevento@assai.com.br; nelson.alves@assai.com.br; eduardo.nader@assai.com.br; tiago.pichelli@assai.com.br; elcio.kamei@assai.com.br; felipe.nemeth@assai.com.br; laercio.junior@assai.com.br; raphael.fusco@assai.com.br; marilia.scatena@assai.com.br; claudia.lima@assai.com.br; cassio.rodrigues@assai.com.br; ti.qualidade@assai.com.br;ti.consultores@assai.com.br
            `;
            let fixedRecipients = new Set(DESTINATARIOS_FIXOS_RAW.split(';').map(email => email.trim()).filter(Boolean));
            let ccRecipients = new Set();
            let tempFixedRecipients = new Set();
            let tempCcRecipients = new Set();
            let selectedFile = null;
            let ataMeetingDate = '';
            let ataMeetingStartTime = '';
            let ataMeetingEndTime = '';
            let ataTotalMeetingDuration = '';
            let ataMeetingTheme = '';
            let ataMeetingAvgTime = ''; // Nova variável para a média de tempo
            let participantsHtml = '<ul><li>Aguardando relatório...</li></ul>';
            
            const REGIONAIS_DATA = [
                { regional: "REGIONAL - SP9-GRANDE SÃO PAULO/TABOÃO", consultor: "Rafael Santiago", email: "rafael.santiago@assai.com.br" },
                { regional: "REGIONAL - SP8- LESTE/GRU", consultor: "Hebertt Souza", email: "hebertt.souza@assai.com.br" },
                { regional: "REGIONAL - SP2- S.MIGUEL/MOGI", consultor: "Elisangela Lima Camargo", email: "elisangela.camargo@assai.com.br" },
                { regional: "REGIONAL - SP1 - ABC BAIXADA", consultor: "Wendel Messias", email: "wendel.silva@assai.com.br" },
                { regional: "REGIONAL - SP7 INTERIOR III", consultor: "Vinicius Ferreira", email: "vinicius.ferreira@assai.com.br" },
                { regional: "REGIONAL - SP5- INTERIOR I", consultor: "Vinicius Rosa Santana Santos", email: "vinicius.santos3@assai.com.br" },
                { regional: "REGIONAL - SP4- NOVO", consultor: "Jennifer Silva", email: "jennifer.silva@assai.com.br" },
                { regional: "REGIONAL - SP3- ZONA NORTE/ SUL", consultor: "Roberto Pazos", email: "roberto.pazos@assai.com.br" },
                { regional: "CEARÁ", consultor: "Glauber Silva", email: "glauber.silva@assai.com.br" },
                { regional: "NORDESTE 2", consultor: "Autair Cleyton", email: "autair.costa@assai.com.br" },
                { regional: "BA/SE 1", consultor: "Alisson Costa Santos", email: "alisson.santos@assai.com.br" },
                { regional: "BA/SE 2", consultor: "Alisson Costa Santos", email: "alisson.santos@assai.com.br" },
                { regional: "NORTE", consultor: "Marliane Chaves", email: "marliane.chaves@assai.com.br" },
                { regional: "RJ 1", consultor: "Maria Triana Miranda Viana", email: "maria.viana@assai.com.br" },
                { regional: "RJ 2", consultor: "Silas Dias Moraes Pereira", email: "silas.pereira@assai.com.br" },
                { regional: "RJ 3", consultor: "Silas Dias Moraes Pereira", email: "silas.pereira@assai.com.br" },
                { regional: "SUL", consultor: "Ednilson Gois Tsukamoto", email: "ednilson.tsukamoto@assai.com.br" },
                { regional: "CENTRO OESTE", consultor: "Danrley Perez Pereira", email: "danrley.pereira@assai.com.br" },
                { regional: "MG", consultor: "Otavio Augusto Alkimim Couto", email: "otavio.couto@assai.com.br" },
            ].map(item => ({
                ...item,
                regional: item.regional.replace(/^REGIONAL - /i, '')
            }));

            const REGIONAIS = [...new Set(REGIONAIS_DATA.map(r => r.regional))]; // Nomes únicos para UI
            const REPRESENTANTES_TI = ["FIELD SERVICE - IT", "INFRAESTRUTURA - IT", "PRODUÇÃO - IT", "SEGURANÇA DA INFORMAÇÃO - IT", "SUSTENTAÇÃO DE SISTEMAS - IT", "TELECOM - IT", "CSA - IT"];
            let regionalStatus = {};
            let tiStatus = {};
            REGIONAIS.forEach(r => regionalStatus[r] = 'ausente');
            REPRESENTANTES_TI.forEach(r => tiStatus[r] = 'ausente');

            const ataTemplate = {
                bannerUrl: "https://i.ibb.co/pjRg01PB/Capas-E-mails-5.png",
                emailTitle: "ATA da Reunião: ",
                body: {
                    actionPlan: `
                        <div style="margin-bottom: 24px;">
                            <h3 style="font-family: 'Segoe UI', Arial, sans-serif; font-size: 18px; color: #374151; font-weight: 600; margin: 0 0 16px 0; border-bottom: 1px solid #d1d5db; padding-bottom: 8px;">Plano de Ação</h3>
                            <div contenteditable="true" style="background-color: #f9fafb; border: 1px solid #e5e7eb; border-radius: 6px; padding: 16px;">
                                <table width="100%" cellpadding="8" cellspacing="0" style="border-collapse: collapse;">
                                    <thead style="background-color: #f3f4f6;">
                                        <tr>
                                            <th style="border: 1px solid #e5e7eb; text-align: left; padding: 8px; font-weight: 600;">Ação</th>
                                            <th style="border: 1px solid #e5e7eb; text-align: left; padding: 8px; font-weight: 600;">Responsável</th>
                                            <th style="border: 1px solid #e5e7eb; text-align: left; padding: 8px; font-weight: 600;">Prazo</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td style="border: 1px solid #e5e7eb; padding: 8px;">Exemplo: Enviar relatório de progresso.</td>
                                            <td style="border: 1px solid #e5e7eb; padding: 8px;">Nome do Responsável</td>
                                            <td style="border: 1px solid #e5e7eb; padding: 8px;">DD/MM/AAAA</td>
                                        </tr>
                                        <tr>
                                            <td style="border: 1px solid #e5e7eb; padding: 8px;">Clique para editar...</td>
                                            <td style="border: 1px solid #e5e7eb; padding: 8px;">...</td>
                                            <td style="border: 1px solid #e5e7eb; padding: 8px;">...</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>`,
                    notes: `
                        <div style="margin-bottom: 24px;">
                            <h3 style="font-family: 'Segoe UI', Arial, sans-serif; font-size: 18px; color: #374151; font-weight: 600; margin: 0 0 16px 0; border-bottom: 1px solid #d1d5db; padding-bottom: 8px;">Anotações da Reunião</h3>
                            <div id="anotacoes-content" contenteditable="true" style="background-color: #f9fafb; border: 1px solid #e5e7eb; border-radius: 6px; padding: 16px; min-height: 150px;">
                                <p>Cole o resumo do Copilot e clique em "Popular ATA" ou edite diretamente aqui.</p>
                            </div>
                        </div>`,
                    representativesRegional: `
                        <div style="margin-bottom: 24px;">
                            <h3 style="font-family: 'Segoe UI', Arial, sans-serif; font-size: 18px; color: #374151; font-weight: 600; margin: 0 0 16px 0; border-bottom: 1px solid #d1d5db; padding-bottom: 8px;">Presença dos Representantes das Regionais</h3>
                            <div style="background-color: #f9fafb; border: 1px solid #e5e7eb; border-radius: 6px; padding: 16px;">
                                <p style="margin: 0 0 8px 0;"><strong style="color: #166534;">Presentes:</strong> <span id="regionais-presentes">Nenhuma</span></p>
                                <p style="margin: 0;"><strong style="color: #991b1b;">Ausentes:</strong> <span id="regionais-ausentes">${REGIONAIS.sort().join(', ')}</span></p>
                            </div>
                        </div>`,
                    representativesTI: `
                        <div style="margin-bottom: 24px;">
                             <h3 style="font-family: 'Segoe UI', Arial, sans-serif; font-size: 18px; color: #374151; font-weight: 600; margin: 0 0 16px 0; border-bottom: 1px solid #d1d5db; padding-bottom: 8px;">Presença dos Representantes de TI</h3>
                             <div style="background-color: #f9fafb; border: 1px solid #e5e7eb; border-radius: 6px; padding: 16px;">
                                <p style="margin: 0 0 8px 0;"><strong style="color: #166534;">Presentes:</strong> <span id="ti-presentes">Nenhuma</span></p>
                                <p style="margin: 0;"><strong style="color: #991b1b;">Ausentes:</strong> <span id="ti-ausentes">${REPRESENTANTES_TI.sort().join(', ')}</span></p>
                            </div>
                        </div>`,
                }
            };

            const buildEmailHtml = (bodyContent, title, meetingDate, meetingStartTime, meetingEndTime, totalMeetingDuration, meetingTheme, showRepresentatives, showActionPlan, isEditable = true) => {
                const editableAttribute = isEditable ? 'contenteditable="true"' : '';
                const infoParts = [];
                const infoStyle = "margin: 0 0 4px 0; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; color: #6b7280;";
                if (meetingDate) infoParts.push(`<p style="${infoStyle}"><strong>Data:</strong> ${meetingDate}</p>`);
                if (meetingStartTime) infoParts.push(`<p style="${infoStyle}"><strong>Início:</strong> ${meetingStartTime}</p>`);
                if (meetingEndTime) infoParts.push(`<p style="${infoStyle}"><strong>Término:</strong> ${meetingEndTime}</p>`);
                if (totalMeetingDuration) infoParts.push(`<p style="${infoStyle}"><strong>Duração:</strong> ${totalMeetingDuration}</p>`);
                if (meetingTheme) infoParts.push(`<p style="${infoStyle}"><strong>Tema:</strong> ${meetingTheme}</p>`);
                
                const meetingInfoHtml = infoParts.length > 0 
                    ? `<div style="margin-bottom: 24px; padding-bottom: 16px; border-bottom: 1px solid #e5e7eb;">${infoParts.join('')}</div>`
                    : '';
                
                const participantsSection = `
                    <div style="margin-bottom: 24px;">
                        <h3 style="font-family: 'Segoe UI', Arial, sans-serif; font-size: 18px; color: #374151; font-weight: 600; margin: 0 0 16px 0; border-bottom: 1px solid #d1d5db; padding-bottom: 8px;">Participantes</h3>
                        <div style="background-color: #f9fafb; border: 1px solid #e5e7eb; border-radius: 6px; padding: 16px; min-height: 80px;">
                            ${participantsHtml}
                        </div>
                    </div>`;

                let finalBody = '';

                // Nova Ordem
                if (showActionPlan) {
                    finalBody += bodyContent.actionPlan;
                }
                finalBody += bodyContent.notes;
                
                if (showRepresentatives) {
                    finalBody += bodyContent.representativesRegional;
                    finalBody += bodyContent.representativesTI;
                }
                
                finalBody += participantsSection;


                return `<!DOCTYPE html>
                    <html lang="pt-BR"><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><title>${title}</title>
                    <style>
                        body { margin:0; padding:0; background-color:#F8F8F8; font-family: 'Segoe UI', Arial, sans-serif; }
                        p, li, th, td { margin: 0; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; color: #555555; line-height: 1.6; }
                        strong { color: #000000; }
                        ul { padding-left: 20px; margin-top: 0; margin-bottom: 0;}
                        [contenteditable]:focus { outline: 2px solid #2563eb; border-radius: 4px; }
                    </style></head>
                    <body style="margin:0; padding:0; background-color:#F8F8F8; width:100%;">
                        <center>
                            <table role="presentation" border="0" cellspacing="0" cellpadding="0" align="center" width="600" style="width:100%; max-width:600px; background-color:#FFFFFF; border-radius:6px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); border: 1px solid #D1D1D1; margin: 0 auto;">
                                <tr><td><img alt="Banner da Reunião" src="${ataTemplate.bannerUrl}" width="600" style="width:100%; max-width:600px; display:block; border:0;"></td></tr>
                                <tr><td style="padding: 32px;">
                                    <h2 style="margin: 0 0 8px 0; font-family: 'Segoe UI', Arial, sans-serif; font-size: 22px; color: #333333; font-weight: 700;" ${editableAttribute}>${title}</h2>
                                    ${meetingInfoHtml}
                                    <div id="email-body-content">${finalBody}</div>
                                </td></tr>
                                <tr><td style="background-color:#F0F0F0; text-align:center; padding:16px 20px;">
                                    <p style="font-family:'Segoe UI', Arial, sans-serif; font-size:11px; color:#777777; margin:0;">Esta é uma comunicação automática. Por favor, não responda.</p>
                                </td></tr>
                            </table>
                        </center>
                    </body></html>`;
            };

            const updateAtaPreview = () => {
                 const doc = previewFrame.contentWindow.document;
                 const title = meetingTitleInput.value ? `ATA da Reunião: ${meetingTitleInput.value}` : (doc.querySelector('h2') ? doc.querySelector('h2').textContent : ataTemplate.emailTitle);
                 ataMeetingTheme = meetingThemeInput.value;
                 const showRepresentatives = toggleRepresentatives.checked;
                 const showActionPlan = toggleActionPlan.checked;
                 
                 previewFrame.srcdoc = buildEmailHtml(ataTemplate.body, title, ataMeetingDate, ataMeetingStartTime, ataMeetingEndTime, ataTotalMeetingDuration, ataMeetingTheme, showRepresentatives, showActionPlan, true);
            };

            const normalizeName = (name) => {
                if (!name || typeof name !== 'string') return '';
                const exceptions = ['de', 'da', 'do', 'dos', 'das'];
                return name.toLowerCase().split(' ').map(word => {
                    if (exceptions.includes(word)) return word;
                    return word.charAt(0).toUpperCase() + word.slice(1);
                }).join(' ');
            };

            const durationToSeconds = (durationStr) => {
                let totalSeconds = 0;
                const hoursMatch = durationStr.match(/(\d+)\s*h/);
                const minutesMatch = durationStr.match(/(\d+)\s*m/);
                const secondsMatch = durationStr.match(/(\d+)\s*s/);
                if (hoursMatch) totalSeconds += parseInt(hoursMatch[1], 10) * 3600;
                if (minutesMatch) totalSeconds += parseInt(minutesMatch[1], 10) * 60;
                if (secondsMatch) totalSeconds += parseInt(secondsMatch[1], 10);
                return totalSeconds;
            };

            const normalizeTime = (timeStr) => {
                if (!timeStr) return '';
                const match = timeStr.match(/(\d{1,2}:\d{1,2}:\d{1,2})/);
                if (match && match[1]) {
                    const timeParts = match[1].split(':');
                    const hours = String(timeParts[0]).padStart(2, '0');
                    const minutes = String(timeParts[1]).padStart(2, '0');
                    return `${hours}:${minutes}`;
                }
                return '';
            };

            const secondsToHHMM = (seconds) => {
                const h = Math.floor(seconds / 3600);
                const m = Math.floor((seconds % 3600) / 60);
                return `${String(h).padStart(2, '0')}h ${String(m).padStart(2, '0')}m`;
            };

            const reformatDate = (dateStr) => {
                if (!dateStr) return '';
                const parts = dateStr.match(/(\d+)/g);
                if (parts && parts.length >= 3) {
                    let month, day, year;
                    if (parts[0].length > 2) { // YYYY/MM/DD
                        [year, month, day] = parts;
                    } else { // MM/DD/YYYY or DD/MM/YYYY
                        [month, day, year] = parts;
                    }
                    
                    if (year.length === 2) year = '20' + year;

                    if (parseInt(month, 10) > 12 && parseInt(day, 10) <= 12) {
                        [day, month] = [month, day];
                    }
                    
                    day = String(day).padStart(2, '0');
                    month = String(month).padStart(2, '0');
                    return `${day}/${month}/${year}`;
                }
                return dateStr;
            };

            const processAttendance = (csvText) => {
                const lines = csvText.split(/\r?\n/).filter(line => line.trim() !== '');
                const attendeesMap = new Map();
                const emails = new Set();
                let meetingTitle = '';
                let meetingDate = '';
                let meetingStartTime = '';
                let meetingEndTime = '';
                let meetingAvgTime = ''; // Nova variável
                let totalMeetingDurationSec = 0;
                let isParticipantSection = false;
                let emailColumnIndex = -1;
                let nameColumnIndex = -1;
                let durationColumnIndex = -1;
                let joinTimeColumnIndex = -1;
                let delimiter = '\t';

                const parseCsvLine = (line, separator) => {
                    const result = [];
                    let current = '';
                    let inQuotes = false;
                    for (let i = 0; i < line.length; i++) {
                        const char = line[i];
                        const nextChar = line[i + 1];
                        if (char === '"') {
                            if (inQuotes && nextChar === '"') { 
                                current += '"';
                                i++; 
                            } else {
                                inQuotes = !inQuotes;
                            }
                        } else if (char === separator && !inQuotes) {
                            result.push(current);
                            current = '';
                        } else {
                            current += char;
                        }
                    }
                    result.push(current);
                    return result.map(f => f.trim().replace(/^"|"$/g, ''));
                };

                for (let i = 0; i < lines.length; i++) {
                    const line = lines[i];
                    const trimmedLine = line.trim();
                    if (!trimmedLine) continue;

                    if (!isParticipantSection) {
                        const parts = trimmedLine.split('\t');
                        if (parts.length > 1) {
                            const key = parts[0].toLowerCase().replace(/:/g, '').trim();
                            const value = parts.slice(1).join('\t').trim();
                            if (key.includes('título da reunião')) meetingTitle = value;
                            if (key.includes('data da reunião') || key.includes('hora de início') || key.includes('hora de inicio')) {
                                const dateMatch = value.match(/(\d{1,2}\/\d{1,2}\/\d{2,4})/);
                                if (dateMatch && dateMatch[0]) {
                                    meetingDate = dateMatch[0];
                                }
                            }
                            if (key.includes('hora de início') || key.includes('hora de inicio')) meetingStartTime = normalizeTime(value);
                            if (key.includes('hora de término') || key.includes('hora de termino') || key.includes('hora de fim')) meetingEndTime = normalizeTime(value);
                            if (key.includes('duração da reunião')) totalMeetingDurationSec = durationToSeconds(value);
                            if (key.includes('tempo médio de participação')) meetingAvgTime = value; // Captura a média
                        }
                    }

                    const lowerTrimmedLine = trimmedLine.toLowerCase();
                    if (!isParticipantSection && (lowerTrimmedLine.includes('nome') || lowerTrimmedLine.includes('name')) && (lowerTrimmedLine.includes('email') || lowerTrimmedLine.includes('duração'))) {
                        isParticipantSection = true;
                        
                        const delimiterCounts = [
                            { char: '\t', count: (trimmedLine.match(/\t/g) || []).length },
                            { char: ',', count: (trimmedLine.match(/,/g) || []).length },
                            { char: ';', count: (trimmedLine.match(/;/g) || []).length }
                        ];
                        delimiter = delimiterCounts.reduce((a, b) => (b.count > a.count ? b : a)).char;
                        
                        const headers = lowerTrimmedLine.split(delimiter).map(h => h.replace(/"/g, '').trim());
                        nameColumnIndex = headers.findIndex(h => h.includes('nome') || h.includes('name'));
                        emailColumnIndex = headers.findIndex(h => h.includes('email'));
                        durationColumnIndex = headers.findIndex(h => h.includes('dura'));
                        joinTimeColumnIndex = headers.findIndex(h => h.includes('hora de ingresso') || h.includes('join time') || h.includes('primeira entrada'));
                        continue;
                    }

                    if (isParticipantSection) {
                        const columns = parseCsvLine(trimmedLine, delimiter);
                        if (columns.length > Math.max(nameColumnIndex, emailColumnIndex) && nameColumnIndex !== -1) {
                            
                            if (columns[nameColumnIndex].trim().toLowerCase() === 'nome' || columns[nameColumnIndex].trim().toLowerCase() === 'full name') {
                                continue;
                            }

                            const name = normalizeName(columns[nameColumnIndex]);
                            const email = emailColumnIndex > -1 ? columns[emailColumnIndex] : '';
                            const durationStr = durationColumnIndex > -1 ? (columns[durationColumnIndex] || '0s') : '0s';

                            if (name) {
                               const durationSec = durationToSeconds(durationStr);
                               const participationPercentage = totalMeetingDurationSec > 0 ? (durationSec / totalMeetingDurationSec) * 100 : 0;
                               
                               attendeesMap.set(name, { name, duration: durationStr, durationSec, participation: participationPercentage });
                               if (email && email.includes('@')) {
                                   emails.add(email.toLowerCase());
                               }

                               if (!meetingDate && joinTimeColumnIndex > -1 && columns[joinTimeColumnIndex]) {
                                   const potentialDateTime = columns[joinTimeColumnIndex];
                                   const dateMatch = potentialDateTime.match(/(\d{1,2}\/\d{1,2}\/\d{2,4})/);
                                   if (dateMatch && dateMatch[0]) {
                                       meetingDate = dateMatch[0];
                                   }
                               }
                            }
                        }
                    }
                }
                
                const attendees = Array.from(attendeesMap.values());
                const totalMeetingDuration = totalMeetingDurationSec > 0 ? secondsToHHMM(totalMeetingDurationSec) : '';
                return { attendees, meetingTitle, ccEmails: emails, meetingDate: reformatDate(meetingDate), meetingStartTime, meetingEndTime, totalMeetingDuration, meetingAvgTime };
            };
            
            const updateRepresentativeControlsUI = () => {
                for (const item in regionalStatus) {
                    const status = regionalStatus[item];
                    const controlGroup = regionalControlsContainer.querySelector(`[data-toggle="${item}"]`);
                    if (controlGroup) {
                        const activeButton = controlGroup.querySelector('.active');
                        if (activeButton) {
                            activeButton.classList.remove('active');
                        }
                        const newButton = controlGroup.querySelector(`[data-status="${status}"]`);
                        if (newButton) {
                            newButton.classList.add('active');
                        }
                    }
                }
            };

            const processAndDisplayReport = () => {
                if (!selectedFile) {
                    fileStatus.textContent = 'Nenhum arquivo selecionado.';
                    fileStatus.style.color = 'red';
                    return;
                }
                fileStatus.textContent = `Processando: ${selectedFile.name}...`;
                processReportButton.disabled = true;
                const reader = new FileReader();
                reader.onload = (e) => {
                    try {
                        const { attendees, meetingTitle, ccEmails, meetingDate, meetingStartTime, meetingEndTime, totalMeetingDuration, meetingAvgTime } = processAttendance(e.target.result);
                        
                        // Auto-marca a presença dos representantes das regionais
                        REGIONAIS.forEach(r => regionalStatus[r] = 'ausente'); // Reseta para ausente
                        REGIONAIS_DATA.forEach(rep => {
                            if (ccEmails.has(rep.email.toLowerCase())) {
                                regionalStatus[rep.regional] = 'presente';
                            }
                        });
                        updateRepresentativeControlsUI();


                        ccRecipients = ccEmails;
                        ataMeetingDate = meetingDate;
                        ataMeetingStartTime = meetingStartTime;
                        ataMeetingEndTime = meetingEndTime;
                        ataTotalMeetingDuration = totalMeetingDuration;
                        ataMeetingAvgTime = meetingAvgTime; // Armazena a média
                        updateRecipientsDisplay();

                        if (meetingTitle) {
                            meetingTitleInput.value = meetingTitle;
                            meetingThemeInput.value = meetingTitle;
                        }
                        
                        attendees.sort((a, b) => b.durationSec - a.durationSec);
                        
                        if (attendees.length > 0) {
                            const totalParticipants = attendees.length;
                            let summaryHtml = `<p style="font-size: 13px; color: #555; margin-bottom: 12px; padding-bottom: 8px; border-bottom: 1px solid #eee;">`;
                            summaryHtml += `<strong>Total de Participantes:</strong> ${totalParticipants}`;
                            if (ataMeetingAvgTime) {
                                summaryHtml += `<br><strong>Tempo Médio de Participação:</strong> ${ataMeetingAvgTime}`;
                            }
                            summaryHtml += `</p>`;

                            participantsHtml = summaryHtml + '<ul>' + attendees
                                .map(p => `<li>${p.name}</li>`)
                                .join('') + '</ul>';
                        } else {
                            participantsHtml = '<ul><li>Nenhum participante encontrado no relatório.</li></ul>';
                        }
                        
                        updateAtaPreview();

                        fileStatus.textContent = `Relatório processado! ${ccRecipients.size} e-mails e a data da reunião foram encontrados.`;
                        fileStatus.style.color = 'green';
                    } catch (error) {
                        console.error("Erro ao processar o arquivo:", error);
                        fileStatus.textContent = 'Erro ao ler o arquivo. Verifique o formato.';
                        fileStatus.style.color = 'red';
                    } finally {
                        processReportButton.disabled = false;
                    }
                };
                reader.onerror = () => {
                    fileStatus.textContent = 'Erro ao ler o arquivo.';
                    fileStatus.style.color = 'red';
                    processReportButton.disabled = false;
                };
                reader.readAsText(selectedFile, 'UTF-8');
            };
            
            const handleTitleChange = () => {
                 updateAtaPreview();
            }

            const setupControls = (container, list, statusObject, updateFunction) => {
                container.innerHTML = '';
                list.sort().forEach(item => {
                    const controlDiv = document.createElement('div');
                    controlDiv.className = 'flex items-center justify-between text-sm';
                    controlDiv.innerHTML = `
                        <span class="font-medium text-gray-800">${item}</span>
                        <div class="flex gap-2" data-toggle="${item}">
                            <button data-status="presente" class="status-btn px-2 py-1 text-xs font-semibold text-green-800 bg-green-100 rounded-full hover:bg-green-200 transition-all">Presente</button>
                            <button data-status="ausente" class="status-btn px-2 py-1 text-xs font-semibold text-red-800 bg-red-200 rounded-full hover:bg-red-300 active">Ausente</button>
                        </div>
                    `;
                    container.appendChild(controlDiv);
                });
                container.addEventListener('click', (e) => {
                    if (e.target.classList.contains('status-btn')) {
                        const button = e.target;
                        const item = button.parentElement.dataset.toggle;
                        const status = button.dataset.status;
                        statusObject[item] = status;
                        const sibling = button.parentElement.querySelector('.active');
                        if (sibling) sibling.classList.remove('active');
                        button.classList.add('active');
                        updateFunction();
                    }
                });
            };

            const updatePresenceInPreview = (statusObject, presentElId, absentElId) => {
                const doc = previewFrame.contentWindow.document;
                if (!doc) return;
                const presentEl = doc.getElementById(presentElId);
                const absentEl = doc.getElementById(absentElId);
                
                if(!presentEl || !absentEl) {
                    setTimeout(() => updatePresenceInPreview(statusObject, presentElId, absentElId), 100);
                    return;
                }

                const presentes = [];
                const ausentes = [];
                for(const item in statusObject) {
                    if (statusObject[item] === 'presente') presentes.push(item);
                    else ausentes.push(item);
                }
                presentEl.textContent = presentes.length > 0 ? presentes.sort().join(', ') : 'Nenhuma';
                absentEl.textContent = ausentes.length > 0 ? ausentes.sort().join(', ') : 'Nenhuma';
            };

            const processCopilotSummary = () => {
                const text = copilotSummaryInput.value;
                if (!text.trim()) {
                    summaryStatus.textContent = 'O campo de resumo está vazio.';
                    summaryStatus.style.color = 'red';
                    return;
                }
                const htmlContent = text.split('\n')
                    .filter(line => line.trim() !== '')
                    .map(line => {
                        const parts = line.split(':');
                        if (parts.length > 1) {
                            const header = parts.shift();
                            const content = parts.join(':');
                            return `<p><strong>${header}:</strong>${content.replace(/^\s+/, '&nbsp;&nbsp;&nbsp;')}</p>`;
                        }
                        return `<p>${line}</p>`;
                    }).join('');
                const doc = previewFrame.contentWindow.document;
                const anotacoesEl = doc.getElementById('anotacoes-content');
                if (anotacoesEl) anotacoesEl.innerHTML = htmlContent;
                summaryStatus.textContent = 'ATA populada com sucesso!';
                summaryStatus.style.color = 'green';
            };

            function openRecipientsModal() {
                tempFixedRecipients = new Set(fixedRecipients);
                tempCcRecipients = new Set(ccRecipients);
                renderRecipientTags();
                recipientsModal.classList.remove('hidden');
                addRecipientInput.focus();
            }

            function renderRecipientTags() {
                const renderList = (container, list, type) => {
                    container.innerHTML = list.size === 0 ? `<p class="text-gray-500 text-center p-4">Nenhum e-mail adicionado.</p>` : '';
                    list.forEach(email => {
                        const tag = document.createElement('div');
                        tag.className = 'recipient-tag';
                        tag.innerHTML = `<span>${email}</span><button type="button" title="Remover">&times;</button>`;
                        tag.querySelector('button').addEventListener('click', () => {
                            if (type === 'to') tempFixedRecipients.delete(email);
                            else tempCcRecipients.delete(email);
                            renderRecipientTags();
                        });
                        if(container.querySelector('p')) container.innerHTML = '';
                        container.appendChild(tag);
                    });
                };
                renderList(toTagsContainer, tempFixedRecipients, 'to');
                renderList(ccTagsContainer, tempCcRecipients, 'cc');
            }
            
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            const isValidEmail = (email) => emailRegex.test(email);

            function addRecipient() {
                const email = addRecipientInput.value.trim();
                recipientErrorMessage.textContent = '';
                if (!isValidEmail(email)) {
                    recipientErrorMessage.textContent = 'Formato de e-mail inválido.';
                    return;
                }
                const mode = addRecipientType.value;
                const targetSet = mode === 'to' ? tempFixedRecipients : tempCcRecipients;
                if (targetSet.has(email)) {
                    recipientErrorMessage.textContent = 'Este e-mail já foi adicionado.';
                    return;
                }
                targetSet.add(email);
                renderRecipientTags();
                addRecipientInput.value = '';
                addRecipientInput.focus();
            }

            function saveRecipients() {
                fixedRecipients = new Set(tempFixedRecipients);
                ccRecipients = new Set(tempCcRecipients);
                updateRecipientsDisplay();
                recipientsModal.classList.add('hidden');
            }

            function updateRecipientsDisplay() {
                fixedRecipientsDisplay.textContent = fixedRecipients.size === 0
                    ? "Nenhum destinatário 'Para' definido."
                    : `${fixedRecipients.size} destinatário(s) em 'Para'.`;
                ccRecipientsLog.innerHTML = ccRecipients.size > 0 
                    ? `<p class="font-semibold">${ccRecipients.size} destinatário(s) em 'Cc'.</p>` 
                    : "Nenhum destinatário 'Cc' definido.";
            }

            function cleanEmailString(emailSet) {
                return Array.from(emailSet).join(';');
            }

            function prepareSendConfirmation() {
                const isTestMode = testModeToggle.checked;
                const toCount = fixedRecipients.size;
                const ccCount = ccRecipients.size;

                if (isTestMode) {
                    confirmSendTitle.textContent = "Enviar E-mail de Teste";
                    confirmSendMessage.textContent = "O modo de teste está ativo. Um modal aparecerá para você inserir os e-mails de teste. Deseja continuar?";
                } else {
                    confirmSendTitle.textContent = "Confirmar Envio Oficial";
                    confirmSendMessage.textContent = `Você está prestes a enviar este comunicado para ${toCount} destinatário(s) em 'Para' e ${ccCount} em 'Cópia'. Confirma a ação?`;
                }

                confirmSendModal.classList.remove('hidden');
                
                const currentConfirmBtn = document.getElementById('confirm-send-btn');
                const newConfirmBtn = currentConfirmBtn.cloneNode(true);
                currentConfirmBtn.parentNode.replaceChild(newConfirmBtn, currentConfirmBtn);
                
                newConfirmBtn.addEventListener('click', () => {
                    confirmSendModal.classList.add('hidden');
                    if (isTestMode) {
                        testEmailModal.classList.remove('hidden');
                        testEmailInput.focus();
                    } else {
                        if (fixedRecipients.size === 0) {
                            showStatus('Envio cancelado. É necessário adicionar ao menos um destinatário principal (Para).', 'error');
                            return;
                        }
                        executeSend(cleanEmailString(fixedRecipients), cleanEmailString(ccRecipients));
                    }
                });
            }
            
            function handleConfirmTestEmail() {
                const testEmails = testEmailInput.value;
                testEmailError.textContent = '';
                if (testEmails.trim()) {
                    const emailsArray = testEmails.split(',').map(email => email.trim()).filter(email => email);
                    const invalidEmail = emailsArray.find(email => !isValidEmail(email));
                    if (invalidEmail) {
                        testEmailError.textContent = `Endereço de e-mail inválido: ${invalidEmail}`;
                        return;
                    }
                    executeSend(emailsArray.join(','), '');
                    testEmailModal.classList.add('hidden');
                } else {
                    testEmailError.textContent = 'Por favor, insira um e-mail de teste válido.';
                }
            }
            
            function showStatus(message, type = 'info') {
                statusMessage.textContent = message;
                statusMessage.className = 'mt-3 text-sm font-medium text-center ';
                switch(type) {
                    case 'success': statusMessage.classList.add('text-green-600'); break;
                    case 'error': statusMessage.classList.add('text-red-600'); break;
                    case 'loading': statusMessage.classList.add('text-blue-600'); break;
                    default: statusMessage.classList.add('text-gray-600');
                }
            }

            const buildEmailHtmlForSend = (finalBodyHtml, title, meetingDate, meetingStartTime, meetingEndTime, totalMeetingDuration, meetingTheme) => {
                const infoParts = [];
                const infoStyle = "margin: 0 0 4px 0; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; color: #6b7280;";
                if (meetingDate) infoParts.push(`<p style="${infoStyle}"><strong>Data:</strong> ${meetingDate}</p>`);
                if (meetingStartTime) infoParts.push(`<p style="${infoStyle}"><strong>Início:</strong> ${meetingStartTime}</p>`);
                if (meetingEndTime) infoParts.push(`<p style="${infoStyle}"><strong>Término:</strong> ${meetingEndTime}</p>`);
                if (totalMeetingDuration) infoParts.push(`<p style="${infoStyle}"><strong>Duração:</strong> ${totalMeetingDuration}</p>`);
                if (meetingTheme) infoParts.push(`<p style="${infoStyle}"><strong>Tema:</strong> ${meetingTheme}</p>`);
                
                const meetingInfoHtml = infoParts.length > 0 
                    ? `<div style="margin-bottom: 24px; padding-bottom: 16px; border-bottom: 1px solid #e5e7eb;">${infoParts.join('')}</div>`
                    : '';

                return `<!DOCTYPE html>
                    <html lang="pt-BR"><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><title>${title}</title>
                    <style>
                        body { margin:0; padding:0; background-color:#F8F8F8; font-family: 'Segoe UI', Arial, sans-serif; }
                        p, li, th, td { margin: 0; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; color: #555555; line-height: 1.6; }
                        strong { color: #000000; }
                        ul { padding-left: 20px; margin-top: 0; margin-bottom: 0;}
                    </style></head>
                    <body style="margin:0; padding:0; background-color:#F8F8F8; width:100%;">
                        <center>
                            <table role="presentation" border="0" cellspacing="0" cellpadding="0" align="center" width="600" style="width:100%; max-width:600px; background-color:#FFFFFF; border-radius:6px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); border: 1px solid #D1D1D1; margin: 0 auto;">
                                <tr><td><img alt="Banner da Reunião" src="${ataTemplate.bannerUrl}" width="600" style="width:100%; max-width:600px; display:block; border:0;"></td></tr>
                                <tr><td style="padding: 32px;">
                                    <h2 style="margin: 0 0 8px 0; font-family: 'Segoe UI', Arial, sans-serif; font-size: 22px; color: #333333; font-weight: 700;">${title}</h2>
                                    ${meetingInfoHtml}
                                    <div id="email-body-content">${finalBodyHtml}</div>
                                </td></tr>
                                <tr><td style="background-color:#F0F0F0; text-align:center; padding:16px 20px;">
                                    <p style="font-family:'Segoe UI', Arial, sans-serif; font-size:11px; color:#777777; margin:0;">Esta é uma comunicação automática. Por favor, não responda.</p>
                                </td></tr>
                            </table>
                        </center>
                    </body></html>`;
            };

            async function executeSend(destinatariosPara, destinatariosCopia) {
                const url = powerAutomateUrlInput.value.trim();
                if (!url) {
                    showStatus('URL do Power Automate não configurada.', 'error');
                    return;
                }
                
                sendButton.disabled = true;
                showStatus('Enviando...', 'loading');

                const doc = previewFrame.contentWindow.document;
                const finalTitleHtml = doc.querySelector('h2').innerHTML;
                const finalBodyContentHtml = doc.getElementById('email-body-content').innerHTML;

                const payload = { 
                    htmlParaEnviar: buildEmailHtmlForSend(finalBodyContentHtml, finalTitleHtml, ataMeetingDate, ataMeetingStartTime, ataMeetingEndTime, ataTotalMeetingDuration, meetingThemeInput.value),
                    assuntoParaEnviar: meetingTitleInput.value,
                    destinatariosFixos: destinatariosPara,
                    destinatariosDinamicos: destinatariosCopia,
                    attachmentName: null,
                    attachmentContent: null
                };

                try {
                    const response = await fetch(url, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });
                    if (response.ok) {
                        showStatus('ATA enviada com sucesso!', 'success');
                    } else {
                        throw new Error(`Erro no envio: ${response.status} ${response.statusText}`);
                    }
                } catch (error) {
                    console.error('Erro ao enviar para o Power Automate:', error);
                    showStatus(`Falha no envio. ${error.message}`, 'error');
                } finally {
                    sendButton.disabled = false;
                }
            }

            // --- Inicialização e Eventos ---
            manageRecipientsButton.addEventListener('click', openRecipientsModal);
            saveRecipientsBtn.addEventListener('click', saveRecipients);
            cancelEditRecipientsBtn.addEventListener('click', () => recipientsModal.classList.add('hidden'));
            addRecipientBtn.addEventListener('click', addRecipient);
            addRecipientInput.addEventListener('keydown', (e) => { if (e.key === 'Enter') { e.preventDefault(); addRecipient(); } });
            attendanceReportInput.addEventListener('change', (e) => {
                selectedFile = e.target.files[0];
                processReportButton.disabled = !selectedFile;
            });
            processReportButton.addEventListener('click', processAndDisplayReport);
            processSummaryButton.addEventListener('click', processCopilotSummary);
            meetingTitleInput.addEventListener('input', handleTitleChange);
            meetingThemeInput.addEventListener('input', updateAtaPreview);
            toggleRepresentatives.addEventListener('change', () => {
                representativesSections.style.display = toggleRepresentatives.checked ? 'block' : 'none';
                updateAtaPreview();
            });
            toggleActionPlan.addEventListener('change', updateAtaPreview);
            copilotSummaryInput.addEventListener('input', () => {
                processSummaryButton.disabled = !copilotSummaryInput.value.trim();
            });
            sendButton.addEventListener('click', prepareSendConfirmation);
            cancelTestEmailBtn.addEventListener('click', () => testEmailModal.classList.add('hidden'));
            confirmTestEmailBtn.addEventListener('click', handleConfirmTestEmail);
            cancelSendBtn.addEventListener('click', () => confirmSendModal.classList.add('hidden'));

            setupControls(regionalControlsContainer, REGIONAIS, regionalStatus, () => updatePresenceInPreview(regionalStatus, 'regionais-presentes', 'regionais-ausentes'));
            setupControls(tiControlsContainer, REPRESENTANTES_TI, tiStatus, () => updatePresenceInPreview(tiStatus, 'ti-presentes', 'ti-ausentes'));
            
            previewFrame.addEventListener('load', () => {
                 updatePresenceInPreview(regionalStatus, 'regionais-presentes', 'regionais-ausentes');
                 updatePresenceInPreview(tiStatus, 'ti-presentes', 'ti-ausentes');
            });

            updateAtaPreview();
            updateRecipientsDisplay();
        });
    </script>
</body>
</html>
